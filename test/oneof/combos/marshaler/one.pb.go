// Code generated by protoc-gen-gogo.
// source: combos/marshaler/one.proto
// DO NOT EDIT!

/*
Package one is a generated protocol buffer package.

It is generated from these files:
	combos/marshaler/one.proto

It has these top-level messages:
	Subby
	AllTypesOneOf
	AllTypesOneOfDirect
	TwoOneofs
	TwoOneofsDirect
	CustomOneof
	CustomOneofDirect
*/
package one

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_test_custom "github.com/gogo/protobuf/test/custom"
import github_com_gogo_protobuf_test_casttype "github.com/gogo/protobuf/test/casttype"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Subby struct {
	Sub              *string `protobuf:"bytes,1,opt,name=sub" json:"sub,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Subby) Reset()                    { *m = Subby{} }
func (*Subby) ProtoMessage()               {}
func (*Subby) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{0} }

type AllTypesOneOf struct {
	// Types that are valid to be assigned to TestOneof:
	//	*AllTypesOneOf_Field1
	//	*AllTypesOneOf_Field2
	//	*AllTypesOneOf_Field3
	//	*AllTypesOneOf_Field4
	//	*AllTypesOneOf_Field5
	//	*AllTypesOneOf_Field6
	//	*AllTypesOneOf_Field7
	//	*AllTypesOneOf_Field8
	//	*AllTypesOneOf_Field9
	//	*AllTypesOneOf_Field10
	//	*AllTypesOneOf_Field11
	//	*AllTypesOneOf_Field12
	//	*AllTypesOneOf_Field13
	//	*AllTypesOneOf_Field14
	//	*AllTypesOneOf_Field15
	//	*AllTypesOneOf_SubMessage
	TestOneof        isAllTypesOneOf_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *AllTypesOneOf) Reset()                    { *m = AllTypesOneOf{} }
func (*AllTypesOneOf) ProtoMessage()               {}
func (*AllTypesOneOf) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{1} }

type isAllTypesOneOf_TestOneof interface {
	isAllTypesOneOf_TestOneof()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type AllTypesOneOf_Field1 struct {
	Field1 float64 `protobuf:"fixed64,1,opt,name=Field1,json=field1,oneof"`
}
type AllTypesOneOf_Field2 struct {
	Field2 float32 `protobuf:"fixed32,2,opt,name=Field2,json=field2,oneof"`
}
type AllTypesOneOf_Field3 struct {
	Field3 int32 `protobuf:"varint,3,opt,name=Field3,json=field3,oneof"`
}
type AllTypesOneOf_Field4 struct {
	Field4 int64 `protobuf:"varint,4,opt,name=Field4,json=field4,oneof"`
}
type AllTypesOneOf_Field5 struct {
	Field5 uint32 `protobuf:"varint,5,opt,name=Field5,json=field5,oneof"`
}
type AllTypesOneOf_Field6 struct {
	Field6 uint64 `protobuf:"varint,6,opt,name=Field6,json=field6,oneof"`
}
type AllTypesOneOf_Field7 struct {
	Field7 int32 `protobuf:"zigzag32,7,opt,name=Field7,json=field7,oneof"`
}
type AllTypesOneOf_Field8 struct {
	Field8 int64 `protobuf:"zigzag64,8,opt,name=Field8,json=field8,oneof"`
}
type AllTypesOneOf_Field9 struct {
	Field9 uint32 `protobuf:"fixed32,9,opt,name=Field9,json=field9,oneof"`
}
type AllTypesOneOf_Field10 struct {
	Field10 int32 `protobuf:"fixed32,10,opt,name=Field10,json=field10,oneof"`
}
type AllTypesOneOf_Field11 struct {
	Field11 uint64 `protobuf:"fixed64,11,opt,name=Field11,json=field11,oneof"`
}
type AllTypesOneOf_Field12 struct {
	Field12 int64 `protobuf:"fixed64,12,opt,name=Field12,json=field12,oneof"`
}
type AllTypesOneOf_Field13 struct {
	Field13 bool `protobuf:"varint,13,opt,name=Field13,json=field13,oneof"`
}
type AllTypesOneOf_Field14 struct {
	Field14 string `protobuf:"bytes,14,opt,name=Field14,json=field14,oneof"`
}
type AllTypesOneOf_Field15 struct {
	Field15 []byte `protobuf:"bytes,15,opt,name=Field15,json=field15,oneof"`
}
type AllTypesOneOf_SubMessage struct {
	SubMessage *Subby `protobuf:"bytes,16,opt,name=sub_message,json=subMessage,oneof"`
}

func (*AllTypesOneOf_Field1) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field2) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field3) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field4) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field5) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field6) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field7) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field8) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field9) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field10) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field11) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field12) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field13) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field14) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field15) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_SubMessage) isAllTypesOneOf_TestOneof() {}

func (m *AllTypesOneOf) GetTestOneof() isAllTypesOneOf_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *AllTypesOneOf) GetField1() float64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field1); ok {
		return x.Field1
	}
	return 0
}

func (m *AllTypesOneOf) GetField2() float32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field2); ok {
		return x.Field2
	}
	return 0
}

func (m *AllTypesOneOf) GetField3() int32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field3); ok {
		return x.Field3
	}
	return 0
}

func (m *AllTypesOneOf) GetField4() int64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field4); ok {
		return x.Field4
	}
	return 0
}

func (m *AllTypesOneOf) GetField5() uint32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field5); ok {
		return x.Field5
	}
	return 0
}

func (m *AllTypesOneOf) GetField6() uint64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field6); ok {
		return x.Field6
	}
	return 0
}

func (m *AllTypesOneOf) GetField7() int32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field7); ok {
		return x.Field7
	}
	return 0
}

func (m *AllTypesOneOf) GetField8() int64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field8); ok {
		return x.Field8
	}
	return 0
}

func (m *AllTypesOneOf) GetField9() uint32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field9); ok {
		return x.Field9
	}
	return 0
}

func (m *AllTypesOneOf) GetField10() int32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field10); ok {
		return x.Field10
	}
	return 0
}

func (m *AllTypesOneOf) GetField11() uint64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field11); ok {
		return x.Field11
	}
	return 0
}

func (m *AllTypesOneOf) GetField12() int64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field12); ok {
		return x.Field12
	}
	return 0
}

func (m *AllTypesOneOf) GetField13() bool {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field13); ok {
		return x.Field13
	}
	return false
}

func (m *AllTypesOneOf) GetField14() string {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field14); ok {
		return x.Field14
	}
	return ""
}

func (m *AllTypesOneOf) GetField15() []byte {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field15); ok {
		return x.Field15
	}
	return nil
}

func (m *AllTypesOneOf) GetSubMessage() *Subby {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_SubMessage); ok {
		return x.SubMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AllTypesOneOf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AllTypesOneOf_OneofMarshaler, _AllTypesOneOf_OneofUnmarshaler, _AllTypesOneOf_OneofSizer, []interface{}{
		(*AllTypesOneOf_Field1)(nil),
		(*AllTypesOneOf_Field2)(nil),
		(*AllTypesOneOf_Field3)(nil),
		(*AllTypesOneOf_Field4)(nil),
		(*AllTypesOneOf_Field5)(nil),
		(*AllTypesOneOf_Field6)(nil),
		(*AllTypesOneOf_Field7)(nil),
		(*AllTypesOneOf_Field8)(nil),
		(*AllTypesOneOf_Field9)(nil),
		(*AllTypesOneOf_Field10)(nil),
		(*AllTypesOneOf_Field11)(nil),
		(*AllTypesOneOf_Field12)(nil),
		(*AllTypesOneOf_Field13)(nil),
		(*AllTypesOneOf_Field14)(nil),
		(*AllTypesOneOf_Field15)(nil),
		(*AllTypesOneOf_SubMessage)(nil),
	}
}

func _AllTypesOneOf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AllTypesOneOf)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *AllTypesOneOf_Field1:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Field1))
	case *AllTypesOneOf_Field2:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.Field2)))
	case *AllTypesOneOf_Field3:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field3))
	case *AllTypesOneOf_Field4:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field4))
	case *AllTypesOneOf_Field5:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field5))
	case *AllTypesOneOf_Field6:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field6))
	case *AllTypesOneOf_Field7:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeZigzag32(uint64(x.Field7))
	case *AllTypesOneOf_Field8:
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeZigzag64(uint64(x.Field8))
	case *AllTypesOneOf_Field9:
		_ = b.EncodeVarint(9<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.Field9))
	case *AllTypesOneOf_Field10:
		_ = b.EncodeVarint(10<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.Field10))
	case *AllTypesOneOf_Field11:
		_ = b.EncodeVarint(11<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Field11))
	case *AllTypesOneOf_Field12:
		_ = b.EncodeVarint(12<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Field12))
	case *AllTypesOneOf_Field13:
		t := uint64(0)
		if x.Field13 {
			t = 1
		}
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *AllTypesOneOf_Field14:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Field14)
	case *AllTypesOneOf_Field15:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Field15)
	case *AllTypesOneOf_SubMessage:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AllTypesOneOf.TestOneof has unexpected type %T", x)
	}
	return nil
}

func _AllTypesOneOf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AllTypesOneOf)
	switch tag {
	case 1: // test_oneof.Field1
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = &AllTypesOneOf_Field1{math.Float64frombits(x)}
		return true, err
	case 2: // test_oneof.Field2
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = &AllTypesOneOf_Field2{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // test_oneof.Field3
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &AllTypesOneOf_Field3{int32(x)}
		return true, err
	case 4: // test_oneof.Field4
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &AllTypesOneOf_Field4{int64(x)}
		return true, err
	case 5: // test_oneof.Field5
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &AllTypesOneOf_Field5{uint32(x)}
		return true, err
	case 6: // test_oneof.Field6
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &AllTypesOneOf_Field6{x}
		return true, err
	case 7: // test_oneof.Field7
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag32()
		m.TestOneof = &AllTypesOneOf_Field7{int32(x)}
		return true, err
	case 8: // test_oneof.Field8
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.TestOneof = &AllTypesOneOf_Field8{int64(x)}
		return true, err
	case 9: // test_oneof.Field9
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = &AllTypesOneOf_Field9{uint32(x)}
		return true, err
	case 10: // test_oneof.Field10
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = &AllTypesOneOf_Field10{int32(x)}
		return true, err
	case 11: // test_oneof.Field11
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = &AllTypesOneOf_Field11{x}
		return true, err
	case 12: // test_oneof.Field12
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = &AllTypesOneOf_Field12{int64(x)}
		return true, err
	case 13: // test_oneof.Field13
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &AllTypesOneOf_Field13{x != 0}
		return true, err
	case 14: // test_oneof.Field14
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TestOneof = &AllTypesOneOf_Field14{x}
		return true, err
	case 15: // test_oneof.Field15
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.TestOneof = &AllTypesOneOf_Field15{x}
		return true, err
	case 16: // test_oneof.sub_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Subby)
		err := b.DecodeMessage(msg)
		m.TestOneof = &AllTypesOneOf_SubMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AllTypesOneOf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AllTypesOneOf)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *AllTypesOneOf_Field1:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *AllTypesOneOf_Field2:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *AllTypesOneOf_Field3:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field3))
	case *AllTypesOneOf_Field4:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field4))
	case *AllTypesOneOf_Field5:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field5))
	case *AllTypesOneOf_Field6:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field6))
	case *AllTypesOneOf_Field7:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64((uint32(x.Field7) << 1) ^ uint32((int32(x.Field7) >> 31))))
	case *AllTypesOneOf_Field8:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(x.Field8<<1) ^ uint64((int64(x.Field8) >> 63))))
	case *AllTypesOneOf_Field9:
		n += proto.SizeVarint(9<<3 | proto.WireFixed32)
		n += 4
	case *AllTypesOneOf_Field10:
		n += proto.SizeVarint(10<<3 | proto.WireFixed32)
		n += 4
	case *AllTypesOneOf_Field11:
		n += proto.SizeVarint(11<<3 | proto.WireFixed64)
		n += 8
	case *AllTypesOneOf_Field12:
		n += proto.SizeVarint(12<<3 | proto.WireFixed64)
		n += 8
	case *AllTypesOneOf_Field13:
		n += proto.SizeVarint(13<<3 | proto.WireVarint)
		n += 1
	case *AllTypesOneOf_Field14:
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Field14)))
		n += len(x.Field14)
	case *AllTypesOneOf_Field15:
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Field15)))
		n += len(x.Field15)
	case *AllTypesOneOf_SubMessage:
		s := proto.Size(x.SubMessage)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AllTypesOneOfDirect struct {
	// Types that are valid to be assigned to TestOneof:
	//	AllTypesOneOfDirect_Field1
	//	AllTypesOneOfDirect_Field2
	//	AllTypesOneOfDirect_Field3
	//	AllTypesOneOfDirect_Field4
	//	AllTypesOneOfDirect_Field5
	//	AllTypesOneOfDirect_Field6
	//	AllTypesOneOfDirect_Field7
	//	AllTypesOneOfDirect_Field8
	//	AllTypesOneOfDirect_Field9
	//	AllTypesOneOfDirect_Field10
	//	AllTypesOneOfDirect_Field11
	//	AllTypesOneOfDirect_Field12
	//	AllTypesOneOfDirect_Field13
	//	AllTypesOneOfDirect_Field14
	//	AllTypesOneOfDirect_Field15
	//	AllTypesOneOfDirect_SubMessage
	TestOneof        isAllTypesOneOfDirect_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *AllTypesOneOfDirect) Reset()                    { *m = AllTypesOneOfDirect{} }
func (*AllTypesOneOfDirect) ProtoMessage()               {}
func (*AllTypesOneOfDirect) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{2} }

type isAllTypesOneOfDirect_TestOneof interface {
	isAllTypesOneOfDirect_TestOneof()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type AllTypesOneOfDirect_Field1 float64
type AllTypesOneOfDirect_Field2 float32
type AllTypesOneOfDirect_Field3 int32
type AllTypesOneOfDirect_Field4 int64
type AllTypesOneOfDirect_Field5 uint32
type AllTypesOneOfDirect_Field6 uint64
type AllTypesOneOfDirect_Field7 int32
type AllTypesOneOfDirect_Field8 int64
type AllTypesOneOfDirect_Field9 uint32
type AllTypesOneOfDirect_Field10 int32
type AllTypesOneOfDirect_Field11 uint64
type AllTypesOneOfDirect_Field12 int64
type AllTypesOneOfDirect_Field13 bool
type AllTypesOneOfDirect_Field14 string
type AllTypesOneOfDirect_Field15 []byte
type AllTypesOneOfDirect_SubMessage Subby

func (AllTypesOneOfDirect_Field1) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field2) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field3) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field4) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field5) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field6) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field7) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field8) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field9) isAllTypesOneOfDirect_TestOneof()     {}
func (AllTypesOneOfDirect_Field10) isAllTypesOneOfDirect_TestOneof()    {}
func (AllTypesOneOfDirect_Field11) isAllTypesOneOfDirect_TestOneof()    {}
func (AllTypesOneOfDirect_Field12) isAllTypesOneOfDirect_TestOneof()    {}
func (AllTypesOneOfDirect_Field13) isAllTypesOneOfDirect_TestOneof()    {}
func (AllTypesOneOfDirect_Field14) isAllTypesOneOfDirect_TestOneof()    {}
func (AllTypesOneOfDirect_Field15) isAllTypesOneOfDirect_TestOneof()    {}
func (AllTypesOneOfDirect_SubMessage) isAllTypesOneOfDirect_TestOneof() {}

func (m *AllTypesOneOfDirect) GetTestOneof() isAllTypesOneOfDirect_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *AllTypesOneOfDirect) GetField1() float64 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field1); ok {
		return float64(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField2() float32 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field2); ok {
		return float32(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField3() int32 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field3); ok {
		return int32(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField4() int64 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field4); ok {
		return int64(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField5() uint32 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field5); ok {
		return uint32(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField6() uint64 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field6); ok {
		return uint64(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField7() int32 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field7); ok {
		return int32(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField8() int64 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field8); ok {
		return int64(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField9() uint32 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field9); ok {
		return uint32(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField10() int32 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field10); ok {
		return int32(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField11() uint64 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field11); ok {
		return uint64(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField12() int64 {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field12); ok {
		return int64(x)
	}
	return 0
}

func (m *AllTypesOneOfDirect) GetField13() bool {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field13); ok {
		return bool(x)
	}
	return false
}

func (m *AllTypesOneOfDirect) GetField14() string {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field14); ok {
		return string(x)
	}
	return ""
}

func (m *AllTypesOneOfDirect) GetField15() []byte {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_Field15); ok {
		return []byte(x)
	}
	return nil
}

func (m *AllTypesOneOfDirect) GetSubMessage() *Subby {
	if x, ok := m.GetTestOneof().(AllTypesOneOfDirect_SubMessage); ok {
		x2 := Subby(x)
		return &x2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AllTypesOneOfDirect) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AllTypesOneOfDirect_OneofMarshaler, _AllTypesOneOfDirect_OneofUnmarshaler, _AllTypesOneOfDirect_OneofSizer, []interface{}{
		(*AllTypesOneOfDirect_Field1)(nil),
		(*AllTypesOneOfDirect_Field2)(nil),
		(*AllTypesOneOfDirect_Field3)(nil),
		(*AllTypesOneOfDirect_Field4)(nil),
		(*AllTypesOneOfDirect_Field5)(nil),
		(*AllTypesOneOfDirect_Field6)(nil),
		(*AllTypesOneOfDirect_Field7)(nil),
		(*AllTypesOneOfDirect_Field8)(nil),
		(*AllTypesOneOfDirect_Field9)(nil),
		(*AllTypesOneOfDirect_Field10)(nil),
		(*AllTypesOneOfDirect_Field11)(nil),
		(*AllTypesOneOfDirect_Field12)(nil),
		(*AllTypesOneOfDirect_Field13)(nil),
		(*AllTypesOneOfDirect_Field14)(nil),
		(*AllTypesOneOfDirect_Field15)(nil),
		(*AllTypesOneOfDirect_SubMessage)(nil),
	}
}

func _AllTypesOneOfDirect_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AllTypesOneOfDirect)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case AllTypesOneOfDirect_Field1:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(float64(x)))
	case AllTypesOneOfDirect_Field2:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(float32(x))))
	case AllTypesOneOfDirect_Field3:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(int32(x)))
	case AllTypesOneOfDirect_Field4:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(int64(x)))
	case AllTypesOneOfDirect_Field5:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(uint32(x)))
	case AllTypesOneOfDirect_Field6:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(uint64(x)))
	case AllTypesOneOfDirect_Field7:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeZigzag32(uint64(int32(x)))
	case AllTypesOneOfDirect_Field8:
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeZigzag64(uint64(int64(x)))
	case AllTypesOneOfDirect_Field9:
		_ = b.EncodeVarint(9<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(uint32(x)))
	case AllTypesOneOfDirect_Field10:
		_ = b.EncodeVarint(10<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(int32(x)))
	case AllTypesOneOfDirect_Field11:
		_ = b.EncodeVarint(11<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(uint64(x)))
	case AllTypesOneOfDirect_Field12:
		_ = b.EncodeVarint(12<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(int64(x)))
	case AllTypesOneOfDirect_Field13:
		t := uint64(0)
		if bool(x) {
			t = 1
		}
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case AllTypesOneOfDirect_Field14:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(string(x))
	case AllTypesOneOfDirect_Field15:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes([]byte(x))
	case AllTypesOneOfDirect_SubMessage:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		x2 := Subby(x)
		if err := b.EncodeMessage(&x2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AllTypesOneOfDirect.TestOneof has unexpected type %T", x)
	}
	return nil
}

func _AllTypesOneOfDirect_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AllTypesOneOfDirect)
	switch tag {
	case 1: // test_oneof.Field1
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = AllTypesOneOfDirect_Field1(math.Float64frombits(x))
		return true, err
	case 2: // test_oneof.Field2
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = AllTypesOneOfDirect_Field2(math.Float32frombits(uint32(x)))
		return true, err
	case 3: // test_oneof.Field3
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = AllTypesOneOfDirect_Field3(int32(x))
		return true, err
	case 4: // test_oneof.Field4
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = AllTypesOneOfDirect_Field4(int64(x))
		return true, err
	case 5: // test_oneof.Field5
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = AllTypesOneOfDirect_Field5(uint32(x))
		return true, err
	case 6: // test_oneof.Field6
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = AllTypesOneOfDirect_Field6(x)
		return true, err
	case 7: // test_oneof.Field7
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag32()
		m.TestOneof = AllTypesOneOfDirect_Field7(int32(x))
		return true, err
	case 8: // test_oneof.Field8
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.TestOneof = AllTypesOneOfDirect_Field8(int64(x))
		return true, err
	case 9: // test_oneof.Field9
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = AllTypesOneOfDirect_Field9(uint32(x))
		return true, err
	case 10: // test_oneof.Field10
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = AllTypesOneOfDirect_Field10(int32(x))
		return true, err
	case 11: // test_oneof.Field11
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = AllTypesOneOfDirect_Field11(x)
		return true, err
	case 12: // test_oneof.Field12
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = AllTypesOneOfDirect_Field12(int64(x))
		return true, err
	case 13: // test_oneof.Field13
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = AllTypesOneOfDirect_Field13(x != 0)
		return true, err
	case 14: // test_oneof.Field14
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TestOneof = AllTypesOneOfDirect_Field14(x)
		return true, err
	case 15: // test_oneof.Field15
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.TestOneof = AllTypesOneOfDirect_Field15(x)
		return true, err
	case 16: // test_oneof.sub_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		var msg Subby
		err := b.DecodeMessage(&msg)
		m.TestOneof = AllTypesOneOfDirect_SubMessage(msg)
		return true, err
	default:
		return false, nil
	}
}

func _AllTypesOneOfDirect_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AllTypesOneOfDirect)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case AllTypesOneOfDirect_Field1:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case AllTypesOneOfDirect_Field2:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case AllTypesOneOfDirect_Field3:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(int32(x)))
	case AllTypesOneOfDirect_Field4:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(int64(x)))
	case AllTypesOneOfDirect_Field5:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint32(x)))
	case AllTypesOneOfDirect_Field6:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(x)))
	case AllTypesOneOfDirect_Field7:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64((uint32(int32(x)) << 1) ^ uint32((int32(int32(x)) >> 31))))
	case AllTypesOneOfDirect_Field8:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(int64(x)<<1) ^ uint64((int64(int64(x)) >> 63))))
	case AllTypesOneOfDirect_Field9:
		n += proto.SizeVarint(9<<3 | proto.WireFixed32)
		n += 4
	case AllTypesOneOfDirect_Field10:
		n += proto.SizeVarint(10<<3 | proto.WireFixed32)
		n += 4
	case AllTypesOneOfDirect_Field11:
		n += proto.SizeVarint(11<<3 | proto.WireFixed64)
		n += 8
	case AllTypesOneOfDirect_Field12:
		n += proto.SizeVarint(12<<3 | proto.WireFixed64)
		n += 8
	case AllTypesOneOfDirect_Field13:
		n += proto.SizeVarint(13<<3 | proto.WireVarint)
		n += 1
	case AllTypesOneOfDirect_Field14:
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(string(x))))
		n += len(string(x))
	case AllTypesOneOfDirect_Field15:
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len([]byte(x))))
		n += len([]byte(x))
	case AllTypesOneOfDirect_SubMessage:
		x2 := Subby(x)
		s := proto.Size(&x2)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TwoOneofs struct {
	// Types that are valid to be assigned to One:
	//	*TwoOneofs_Field1
	//	*TwoOneofs_Field2
	//	*TwoOneofs_Field3
	One isTwoOneofs_One `protobuf_oneof:"one"`
	// Types that are valid to be assigned to Two:
	//	*TwoOneofs_Field34
	//	*TwoOneofs_Field35
	//	*TwoOneofs_SubMessage2
	Two              isTwoOneofs_Two `protobuf_oneof:"two"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *TwoOneofs) Reset()                    { *m = TwoOneofs{} }
func (*TwoOneofs) ProtoMessage()               {}
func (*TwoOneofs) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{3} }

type isTwoOneofs_One interface {
	isTwoOneofs_One()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTwoOneofs_Two interface {
	isTwoOneofs_Two()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type TwoOneofs_Field1 struct {
	Field1 float64 `protobuf:"fixed64,1,opt,name=Field1,json=field1,oneof"`
}
type TwoOneofs_Field2 struct {
	Field2 float32 `protobuf:"fixed32,2,opt,name=Field2,json=field2,oneof"`
}
type TwoOneofs_Field3 struct {
	Field3 int32 `protobuf:"varint,3,opt,name=Field3,json=field3,oneof"`
}
type TwoOneofs_Field34 struct {
	Field34 string `protobuf:"bytes,34,opt,name=Field34,json=field34,oneof"`
}
type TwoOneofs_Field35 struct {
	Field35 []byte `protobuf:"bytes,35,opt,name=Field35,json=field35,oneof"`
}
type TwoOneofs_SubMessage2 struct {
	SubMessage2 *Subby `protobuf:"bytes,36,opt,name=sub_message2,json=subMessage2,oneof"`
}

func (*TwoOneofs_Field1) isTwoOneofs_One()      {}
func (*TwoOneofs_Field2) isTwoOneofs_One()      {}
func (*TwoOneofs_Field3) isTwoOneofs_One()      {}
func (*TwoOneofs_Field34) isTwoOneofs_Two()     {}
func (*TwoOneofs_Field35) isTwoOneofs_Two()     {}
func (*TwoOneofs_SubMessage2) isTwoOneofs_Two() {}

func (m *TwoOneofs) GetOne() isTwoOneofs_One {
	if m != nil {
		return m.One
	}
	return nil
}
func (m *TwoOneofs) GetTwo() isTwoOneofs_Two {
	if m != nil {
		return m.Two
	}
	return nil
}

func (m *TwoOneofs) GetField1() float64 {
	if x, ok := m.GetOne().(*TwoOneofs_Field1); ok {
		return x.Field1
	}
	return 0
}

func (m *TwoOneofs) GetField2() float32 {
	if x, ok := m.GetOne().(*TwoOneofs_Field2); ok {
		return x.Field2
	}
	return 0
}

func (m *TwoOneofs) GetField3() int32 {
	if x, ok := m.GetOne().(*TwoOneofs_Field3); ok {
		return x.Field3
	}
	return 0
}

func (m *TwoOneofs) GetField34() string {
	if x, ok := m.GetTwo().(*TwoOneofs_Field34); ok {
		return x.Field34
	}
	return ""
}

func (m *TwoOneofs) GetField35() []byte {
	if x, ok := m.GetTwo().(*TwoOneofs_Field35); ok {
		return x.Field35
	}
	return nil
}

func (m *TwoOneofs) GetSubMessage2() *Subby {
	if x, ok := m.GetTwo().(*TwoOneofs_SubMessage2); ok {
		return x.SubMessage2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TwoOneofs) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TwoOneofs_OneofMarshaler, _TwoOneofs_OneofUnmarshaler, _TwoOneofs_OneofSizer, []interface{}{
		(*TwoOneofs_Field1)(nil),
		(*TwoOneofs_Field2)(nil),
		(*TwoOneofs_Field3)(nil),
		(*TwoOneofs_Field34)(nil),
		(*TwoOneofs_Field35)(nil),
		(*TwoOneofs_SubMessage2)(nil),
	}
}

func _TwoOneofs_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TwoOneofs)
	// one
	switch x := m.One.(type) {
	case *TwoOneofs_Field1:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Field1))
	case *TwoOneofs_Field2:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.Field2)))
	case *TwoOneofs_Field3:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field3))
	case nil:
	default:
		return fmt.Errorf("TwoOneofs.One has unexpected type %T", x)
	}
	// two
	switch x := m.Two.(type) {
	case *TwoOneofs_Field34:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Field34)
	case *TwoOneofs_Field35:
		_ = b.EncodeVarint(35<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Field35)
	case *TwoOneofs_SubMessage2:
		_ = b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubMessage2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TwoOneofs.Two has unexpected type %T", x)
	}
	return nil
}

func _TwoOneofs_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TwoOneofs)
	switch tag {
	case 1: // one.Field1
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.One = &TwoOneofs_Field1{math.Float64frombits(x)}
		return true, err
	case 2: // one.Field2
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.One = &TwoOneofs_Field2{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // one.Field3
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.One = &TwoOneofs_Field3{int32(x)}
		return true, err
	case 34: // two.Field34
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Two = &TwoOneofs_Field34{x}
		return true, err
	case 35: // two.Field35
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Two = &TwoOneofs_Field35{x}
		return true, err
	case 36: // two.sub_message2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Subby)
		err := b.DecodeMessage(msg)
		m.Two = &TwoOneofs_SubMessage2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TwoOneofs_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TwoOneofs)
	// one
	switch x := m.One.(type) {
	case *TwoOneofs_Field1:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *TwoOneofs_Field2:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *TwoOneofs_Field3:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field3))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// two
	switch x := m.Two.(type) {
	case *TwoOneofs_Field34:
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Field34)))
		n += len(x.Field34)
	case *TwoOneofs_Field35:
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Field35)))
		n += len(x.Field35)
	case *TwoOneofs_SubMessage2:
		s := proto.Size(x.SubMessage2)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TwoOneofsDirect struct {
	// Types that are valid to be assigned to One:
	//	TwoOneofsDirect_Field1
	//	TwoOneofsDirect_Field2
	//	TwoOneofsDirect_Field3
	One isTwoOneofsDirect_One `protobuf_oneof:"one"`
	// Types that are valid to be assigned to Two:
	//	TwoOneofsDirect_Field34
	//	TwoOneofsDirect_Field35
	//	TwoOneofsDirect_SubMessage2
	Two              isTwoOneofsDirect_Two `protobuf_oneof:"two"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *TwoOneofsDirect) Reset()                    { *m = TwoOneofsDirect{} }
func (*TwoOneofsDirect) ProtoMessage()               {}
func (*TwoOneofsDirect) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{4} }

type isTwoOneofsDirect_One interface {
	isTwoOneofsDirect_One()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTwoOneofsDirect_Two interface {
	isTwoOneofsDirect_Two()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type TwoOneofsDirect_Field1 float64
type TwoOneofsDirect_Field2 float32
type TwoOneofsDirect_Field3 int32
type TwoOneofsDirect_Field34 string
type TwoOneofsDirect_Field35 []byte
type TwoOneofsDirect_SubMessage2 Subby

func (TwoOneofsDirect_Field1) isTwoOneofsDirect_One()      {}
func (TwoOneofsDirect_Field2) isTwoOneofsDirect_One()      {}
func (TwoOneofsDirect_Field3) isTwoOneofsDirect_One()      {}
func (TwoOneofsDirect_Field34) isTwoOneofsDirect_Two()     {}
func (TwoOneofsDirect_Field35) isTwoOneofsDirect_Two()     {}
func (TwoOneofsDirect_SubMessage2) isTwoOneofsDirect_Two() {}

func (m *TwoOneofsDirect) GetOne() isTwoOneofsDirect_One {
	if m != nil {
		return m.One
	}
	return nil
}
func (m *TwoOneofsDirect) GetTwo() isTwoOneofsDirect_Two {
	if m != nil {
		return m.Two
	}
	return nil
}

func (m *TwoOneofsDirect) GetField1() float64 {
	if x, ok := m.GetOne().(TwoOneofsDirect_Field1); ok {
		return float64(x)
	}
	return 0
}

func (m *TwoOneofsDirect) GetField2() float32 {
	if x, ok := m.GetOne().(TwoOneofsDirect_Field2); ok {
		return float32(x)
	}
	return 0
}

func (m *TwoOneofsDirect) GetField3() int32 {
	if x, ok := m.GetOne().(TwoOneofsDirect_Field3); ok {
		return int32(x)
	}
	return 0
}

func (m *TwoOneofsDirect) GetField34() string {
	if x, ok := m.GetTwo().(TwoOneofsDirect_Field34); ok {
		return string(x)
	}
	return ""
}

func (m *TwoOneofsDirect) GetField35() []byte {
	if x, ok := m.GetTwo().(TwoOneofsDirect_Field35); ok {
		return []byte(x)
	}
	return nil
}

func (m *TwoOneofsDirect) GetSubMessage2() *Subby {
	if x, ok := m.GetTwo().(TwoOneofsDirect_SubMessage2); ok {
		x2 := Subby(x)
		return &x2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TwoOneofsDirect) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TwoOneofsDirect_OneofMarshaler, _TwoOneofsDirect_OneofUnmarshaler, _TwoOneofsDirect_OneofSizer, []interface{}{
		(*TwoOneofsDirect_Field1)(nil),
		(*TwoOneofsDirect_Field2)(nil),
		(*TwoOneofsDirect_Field3)(nil),
		(*TwoOneofsDirect_Field34)(nil),
		(*TwoOneofsDirect_Field35)(nil),
		(*TwoOneofsDirect_SubMessage2)(nil),
	}
}

func _TwoOneofsDirect_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TwoOneofsDirect)
	// one
	switch x := m.One.(type) {
	case TwoOneofsDirect_Field1:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(float64(x)))
	case TwoOneofsDirect_Field2:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(float32(x))))
	case TwoOneofsDirect_Field3:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(int32(x)))
	case nil:
	default:
		return fmt.Errorf("TwoOneofsDirect.One has unexpected type %T", x)
	}
	// two
	switch x := m.Two.(type) {
	case TwoOneofsDirect_Field34:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(string(x))
	case TwoOneofsDirect_Field35:
		_ = b.EncodeVarint(35<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes([]byte(x))
	case TwoOneofsDirect_SubMessage2:
		_ = b.EncodeVarint(36<<3 | proto.WireBytes)
		x2 := Subby(x)
		if err := b.EncodeMessage(&x2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TwoOneofsDirect.Two has unexpected type %T", x)
	}
	return nil
}

func _TwoOneofsDirect_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TwoOneofsDirect)
	switch tag {
	case 1: // one.Field1
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.One = TwoOneofsDirect_Field1(math.Float64frombits(x))
		return true, err
	case 2: // one.Field2
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.One = TwoOneofsDirect_Field2(math.Float32frombits(uint32(x)))
		return true, err
	case 3: // one.Field3
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.One = TwoOneofsDirect_Field3(int32(x))
		return true, err
	case 34: // two.Field34
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Two = TwoOneofsDirect_Field34(x)
		return true, err
	case 35: // two.Field35
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Two = TwoOneofsDirect_Field35(x)
		return true, err
	case 36: // two.sub_message2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		var msg Subby
		err := b.DecodeMessage(&msg)
		m.Two = TwoOneofsDirect_SubMessage2(msg)
		return true, err
	default:
		return false, nil
	}
}

func _TwoOneofsDirect_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TwoOneofsDirect)
	// one
	switch x := m.One.(type) {
	case TwoOneofsDirect_Field1:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case TwoOneofsDirect_Field2:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case TwoOneofsDirect_Field3:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(int32(x)))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// two
	switch x := m.Two.(type) {
	case TwoOneofsDirect_Field34:
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(string(x))))
		n += len(string(x))
	case TwoOneofsDirect_Field35:
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len([]byte(x))))
		n += len([]byte(x))
	case TwoOneofsDirect_SubMessage2:
		x2 := Subby(x)
		s := proto.Size(&x2)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CustomOneof struct {
	// Types that are valid to be assigned to Custom:
	//	*CustomOneof_Stringy
	//	*CustomOneof_CustomType
	//	*CustomOneof_CastType
	//	*CustomOneof_MyCustomName
	Custom           isCustomOneof_Custom `protobuf_oneof:"custom"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CustomOneof) Reset()                    { *m = CustomOneof{} }
func (*CustomOneof) ProtoMessage()               {}
func (*CustomOneof) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{5} }

type isCustomOneof_Custom interface {
	isCustomOneof_Custom()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type CustomOneof_Stringy struct {
	Stringy string `protobuf:"bytes,34,opt,name=Stringy,json=stringy,oneof"`
}
type CustomOneof_CustomType struct {
	CustomType github_com_gogo_protobuf_test_custom.Uint128 `protobuf:"bytes,35,opt,name=CustomType,json=customType,oneof,customtype=github.com/gogo/protobuf/test/custom.Uint128"`
}
type CustomOneof_CastType struct {
	CastType github_com_gogo_protobuf_test_casttype.MyUint64Type `protobuf:"varint,36,opt,name=CastType,json=castType,oneof,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type"`
}
type CustomOneof_MyCustomName struct {
	MyCustomName int64 `protobuf:"varint,37,opt,name=CustomName,json=customName,oneof"`
}

func (*CustomOneof_Stringy) isCustomOneof_Custom()      {}
func (*CustomOneof_CustomType) isCustomOneof_Custom()   {}
func (*CustomOneof_CastType) isCustomOneof_Custom()     {}
func (*CustomOneof_MyCustomName) isCustomOneof_Custom() {}

func (m *CustomOneof) GetCustom() isCustomOneof_Custom {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *CustomOneof) GetStringy() string {
	if x, ok := m.GetCustom().(*CustomOneof_Stringy); ok {
		return x.Stringy
	}
	return ""
}

func (m *CustomOneof) GetCastType() github_com_gogo_protobuf_test_casttype.MyUint64Type {
	if x, ok := m.GetCustom().(*CustomOneof_CastType); ok {
		return x.CastType
	}
	return 0
}

func (m *CustomOneof) GetMyCustomName() int64 {
	if x, ok := m.GetCustom().(*CustomOneof_MyCustomName); ok {
		return x.MyCustomName
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CustomOneof) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CustomOneof_OneofMarshaler, _CustomOneof_OneofUnmarshaler, _CustomOneof_OneofSizer, []interface{}{
		(*CustomOneof_Stringy)(nil),
		(*CustomOneof_CustomType)(nil),
		(*CustomOneof_CastType)(nil),
		(*CustomOneof_MyCustomName)(nil),
	}
}

func _CustomOneof_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CustomOneof)
	// custom
	switch x := m.Custom.(type) {
	case *CustomOneof_Stringy:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Stringy)
	case *CustomOneof_CustomType:
		_ = b.EncodeVarint(35<<3 | proto.WireBytes)
		data, err := x.CustomType.Marshal()
		if err != nil {
			return err
		}
		_ = b.EncodeRawBytes(data)
	case *CustomOneof_CastType:
		_ = b.EncodeVarint(36<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.CastType))
	case *CustomOneof_MyCustomName:
		_ = b.EncodeVarint(37<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.MyCustomName))
	case nil:
	default:
		return fmt.Errorf("CustomOneof.Custom has unexpected type %T", x)
	}
	return nil
}

func _CustomOneof_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CustomOneof)
	switch tag {
	case 34: // custom.Stringy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Custom = &CustomOneof_Stringy{x}
		return true, err
	case 35: // custom.CustomType
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		if err != nil {
			return true, err
		}
		var cc github_com_gogo_protobuf_test_custom.Uint128
		c := &cc
		err = c.Unmarshal(x)
		m.Custom = &CustomOneof_CustomType{*c}
		return true, err
	case 36: // custom.CastType
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Custom = &CustomOneof_CastType{github_com_gogo_protobuf_test_casttype.MyUint64Type(x)}
		return true, err
	case 37: // custom.CustomName
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Custom = &CustomOneof_MyCustomName{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _CustomOneof_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CustomOneof)
	// custom
	switch x := m.Custom.(type) {
	case *CustomOneof_Stringy:
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Stringy)))
		n += len(x.Stringy)
	case *CustomOneof_CustomType:
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(x.CustomType.Size()))
		n += x.CustomType.Size()
	case *CustomOneof_CastType:
		n += proto.SizeVarint(36<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CastType))
	case *CustomOneof_MyCustomName:
		n += proto.SizeVarint(37<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.MyCustomName))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CustomOneofDirect struct {
	// Types that are valid to be assigned to Custom:
	//	CustomOneofDirect_Stringy
	//	CustomOneofDirect_CustomType
	//	CustomOneofDirect_CastType
	//	CustomOneofDirect_MyCustomName
	Custom           isCustomOneofDirect_Custom `protobuf_oneof:"custom"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CustomOneofDirect) Reset()                    { *m = CustomOneofDirect{} }
func (*CustomOneofDirect) ProtoMessage()               {}
func (*CustomOneofDirect) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{6} }

type isCustomOneofDirect_Custom interface {
	isCustomOneofDirect_Custom()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type CustomOneofDirect_Stringy string
type CustomOneofDirect_CustomType github_com_gogo_protobuf_test_custom.Uint128
type CustomOneofDirect_CastType github_com_gogo_protobuf_test_casttype.MyUint64Type
type CustomOneofDirect_MyCustomName int64

func (CustomOneofDirect_Stringy) isCustomOneofDirect_Custom()      {}
func (CustomOneofDirect_CustomType) isCustomOneofDirect_Custom()   {}
func (CustomOneofDirect_CastType) isCustomOneofDirect_Custom()     {}
func (CustomOneofDirect_MyCustomName) isCustomOneofDirect_Custom() {}

func (m *CustomOneofDirect) GetCustom() isCustomOneofDirect_Custom {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *CustomOneofDirect) GetStringy() string {
	if x, ok := m.GetCustom().(CustomOneofDirect_Stringy); ok {
		return string(x)
	}
	return ""
}

func (m *CustomOneofDirect) GetCastType() github_com_gogo_protobuf_test_casttype.MyUint64Type {
	if x, ok := m.GetCustom().(CustomOneofDirect_CastType); ok {
		return github_com_gogo_protobuf_test_casttype.MyUint64Type(x)
	}
	return 0
}

func (m *CustomOneofDirect) GetMyCustomName() int64 {
	if x, ok := m.GetCustom().(CustomOneofDirect_MyCustomName); ok {
		return int64(x)
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CustomOneofDirect) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CustomOneofDirect_OneofMarshaler, _CustomOneofDirect_OneofUnmarshaler, _CustomOneofDirect_OneofSizer, []interface{}{
		(*CustomOneofDirect_Stringy)(nil),
		(*CustomOneofDirect_CustomType)(nil),
		(*CustomOneofDirect_CastType)(nil),
		(*CustomOneofDirect_MyCustomName)(nil),
	}
}

func _CustomOneofDirect_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CustomOneofDirect)
	// custom
	switch x := m.Custom.(type) {
	case CustomOneofDirect_Stringy:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(string(x))
	case CustomOneofDirect_CustomType:
		_ = b.EncodeVarint(35<<3 | proto.WireBytes)
		data, err := github_com_gogo_protobuf_test_custom.Uint128(x).Marshal()
		if err != nil {
			return err
		}
		_ = b.EncodeRawBytes(data)
	case CustomOneofDirect_CastType:
		_ = b.EncodeVarint(36<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(github_com_gogo_protobuf_test_casttype.MyUint64Type(x)))
	case CustomOneofDirect_MyCustomName:
		_ = b.EncodeVarint(37<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(int64(x)))
	case nil:
	default:
		return fmt.Errorf("CustomOneofDirect.Custom has unexpected type %T", x)
	}
	return nil
}

func _CustomOneofDirect_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CustomOneofDirect)
	switch tag {
	case 34: // custom.Stringy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Custom = CustomOneofDirect_Stringy(x)
		return true, err
	case 35: // custom.CustomType
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		if err != nil {
			return true, err
		}
		var cc github_com_gogo_protobuf_test_custom.Uint128
		c := &cc
		err = c.Unmarshal(x)
		m.Custom = CustomOneofDirect_CustomType(*c)
		return true, err
	case 36: // custom.CastType
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Custom = CustomOneofDirect_CastType(github_com_gogo_protobuf_test_casttype.MyUint64Type(x))
		return true, err
	case 37: // custom.CustomName
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Custom = CustomOneofDirect_MyCustomName(int64(x))
		return true, err
	default:
		return false, nil
	}
}

func _CustomOneofDirect_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CustomOneofDirect)
	// custom
	switch x := m.Custom.(type) {
	case CustomOneofDirect_Stringy:
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(string(x))))
		n += len(string(x))
	case CustomOneofDirect_CustomType:
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(github_com_gogo_protobuf_test_custom.Uint128(x).Size()))
		n += github_com_gogo_protobuf_test_custom.Uint128(x).Size()
	case CustomOneofDirect_CastType:
		n += proto.SizeVarint(36<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(github_com_gogo_protobuf_test_casttype.MyUint64Type(x)))
	case CustomOneofDirect_MyCustomName:
		n += proto.SizeVarint(37<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(int64(x)))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Subby)(nil), "one.Subby")
	proto.RegisterType((*AllTypesOneOf)(nil), "one.AllTypesOneOf")
	proto.RegisterType((*AllTypesOneOfDirect)(nil), "one.AllTypesOneOfDirect")
	proto.RegisterType((*TwoOneofs)(nil), "one.TwoOneofs")
	proto.RegisterType((*TwoOneofsDirect)(nil), "one.TwoOneofsDirect")
	proto.RegisterType((*CustomOneof)(nil), "one.CustomOneof")
	proto.RegisterType((*CustomOneofDirect)(nil), "one.CustomOneofDirect")
}
func (this *Subby) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *AllTypesOneOf) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *AllTypesOneOfDirect) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *TwoOneofs) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *TwoOneofsDirect) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *CustomOneof) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *CustomOneofDirect) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func OneDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3820 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0x5b, 0x6c, 0x1b, 0x67,
		0x76, 0x36, 0xaf, 0x22, 0x0f, 0x29, 0x92, 0x1a, 0x29, 0x36, 0xad, 0x24, 0x56, 0xcc, 0x38, 0x89,
		0xe3, 0x24, 0x92, 0x2d, 0x59, 0xbe, 0x30, 0x6d, 0x02, 0x51, 0xa2, 0x65, 0x19, 0xba, 0x75, 0x24,
		0x26, 0x4e, 0xfa, 0x30, 0x18, 0x91, 0x23, 0x8a, 0x36, 0x39, 0xc3, 0x72, 0x86, 0xb6, 0x95, 0xa7,
		0x14, 0xe9, 0x05, 0x41, 0xd1, 0x5b, 0x5a, 0xa0, 0xb9, 0xba, 0x4d, 0x80, 0x36, 0x69, 0x7a, 0x4b,
		0x7a, 0x09, 0x8a, 0x3e, 0x15, 0x28, 0xd2, 0xe6, 0xa9, 0x48, 0xfb, 0x54, 0x14, 0x81, 0xd1, 0xa4,
		0x01, 0x92, 0xa6, 0xd9, 0x5d, 0x2f, 0x60, 0x60, 0x83, 0xcd, 0xcb, 0x9e, 0xff, 0x36, 0x17, 0x92,
		0xd2, 0x50, 0xc1, 0x26, 0xd9, 0xc5, 0xae, 0x00, 0x42, 0x9c, 0x73, 0xce, 0xf7, 0xcd, 0xff, 0x9f,
		0xff, 0xfc, 0xe7, 0x9c, 0x7f, 0x86, 0xf0, 0x2f, 0x27, 0xe0, 0xae, 0xaa, 0x61, 0x54, 0xeb, 0xda,
		0x44, 0xb3, 0x65, 0x58, 0xc6, 0x46, 0x7b, 0x73, 0xa2, 0xa2, 0x99, 0xe5, 0x56, 0xad, 0x69, 0x19,
		0xad, 0x71, 0x2a, 0x93, 0xd2, 0xcc, 0x62, 0x5c, 0x58, 0xe4, 0x96, 0x60, 0xe8, 0x5c, 0xad, 0xae,
		0xcd, 0xd9, 0x86, 0x6b, 0x9a, 0x25, 0x9d, 0x81, 0xf0, 0x26, 0x0a, 0xb3, 0x81, 0xbb, 0x42, 0x47,
		0x13, 0x93, 0x47, 0xc6, 0x3b, 0x40, 0xe3, 0x5e, 0xc4, 0x2a, 0x11, 0xcb, 0x14, 0x91, 0xfb, 0x38,
		0x0c, 0xc3, 0x3d, 0xb4, 0x92, 0x04, 0x61, 0x5d, 0x6d, 0x10, 0xc6, 0xc0, 0xd1, 0xb8, 0x4c, 0xbf,
		0x4b, 0x59, 0x18, 0x68, 0xaa, 0xe5, 0xcb, 0x6a, 0x55, 0xcb, 0x06, 0xa9, 0x58, 0x5c, 0x4a, 0x87,
		0x00, 0x2a, 0x5a, 0x53, 0xd3, 0x2b, 0x9a, 0x5e, 0xde, 0xce, 0x86, 0x70, 0x14, 0x71, 0xd9, 0x25,
		0x91, 0x1e, 0x80, 0xa1, 0x66, 0x7b, 0xa3, 0x5e, 0x2b, 0x2b, 0x2e, 0x33, 0x40, 0xb3, 0x88, 0x9c,
		0x61, 0x8a, 0x39, 0xc7, 0xf8, 0x3e, 0x48, 0x5f, 0xd5, 0xd4, 0xcb, 0x6e, 0xd3, 0x04, 0x35, 0x4d,
		0x11, 0xb1, 0xcb, 0x70, 0x16, 0x92, 0x0d, 0xcd, 0x34, 0x71, 0x00, 0x8a, 0xb5, 0xdd, 0xd4, 0xb2,
		0x61, 0x3a, 0xfb, 0xbb, 0xba, 0x66, 0xdf, 0x39, 0xf3, 0x04, 0x47, 0xad, 0x23, 0x48, 0x9a, 0x81,
		0xb8, 0xa6, 0xb7, 0x1b, 0x8c, 0x21, 0xb2, 0x83, 0xff, 0x8a, 0x68, 0xd1, 0xc9, 0x12, 0x23, 0x30,
		0x4e, 0x31, 0x60, 0x6a, 0xad, 0x2b, 0xb5, 0xb2, 0x96, 0x8d, 0x52, 0x82, 0xfb, 0xba, 0x08, 0xd6,
		0x98, 0xbe, 0x93, 0x43, 0xe0, 0x70, 0x2a, 0x71, 0xed, 0x9a, 0xa5, 0xe9, 0x66, 0xcd, 0xd0, 0xb3,
		0x03, 0x94, 0xe4, 0x9e, 0x1e, 0xab, 0xa8, 0xd5, 0x2b, 0x9d, 0x14, 0x0e, 0x4e, 0x3a, 0x05, 0x03,
		0x46, 0xd3, 0xc2, 0x6f, 0x66, 0x36, 0x86, 0xeb, 0x93, 0x98, 0xbc, 0xa3, 0x67, 0x20, 0xac, 0x30,
		0x1b, 0x59, 0x18, 0x4b, 0x0b, 0x90, 0x31, 0x8d, 0x76, 0xab, 0xac, 0x29, 0x65, 0xa3, 0xa2, 0x29,
		0x35, 0x7d, 0xd3, 0xc8, 0xc6, 0x29, 0xc1, 0x58, 0xf7, 0x44, 0xa8, 0xe1, 0x2c, 0xda, 0x2d, 0xa0,
		0x99, 0x9c, 0x32, 0x3d, 0xd7, 0xd2, 0x7e, 0x88, 0x9a, 0xdb, 0xba, 0xa5, 0x5e, 0xcb, 0x26, 0x69,
		0x84, 0xf0, 0xab, 0xdc, 0x0f, 0x22, 0x90, 0xee, 0x27, 0xc4, 0x1e, 0x86, 0xc8, 0x26, 0x99, 0x25,
		0x06, 0xd8, 0x1e, 0x7c, 0xc0, 0x30, 0x5e, 0x27, 0x46, 0xbf, 0xa2, 0x13, 0x67, 0x20, 0xa1, 0x6b,
		0xa6, 0xa5, 0x55, 0x58, 0x44, 0x84, 0xfa, 0x8c, 0x29, 0x60, 0xa0, 0xee, 0x90, 0x0a, 0x7f, 0xa5,
		0x90, 0xba, 0x08, 0x69, 0x7b, 0x48, 0x4a, 0x4b, 0xd5, 0xab, 0x22, 0x36, 0x27, 0xfc, 0x46, 0x32,
		0x5e, 0x14, 0x38, 0x99, 0xc0, 0xe4, 0x94, 0xe6, 0xb9, 0x96, 0xe6, 0x00, 0x0c, 0x5d, 0x33, 0x36,
		0x71, 0x7b, 0x95, 0xeb, 0x18, 0x27, 0xbd, 0xbd, 0xb4, 0x42, 0x4c, 0xba, 0xbc, 0x64, 0x30, 0x69,
		0xb9, 0x2e, 0x9d, 0x75, 0x42, 0x6d, 0x60, 0x87, 0x48, 0x59, 0x62, 0x9b, 0xac, 0x2b, 0xda, 0x4a,
		0x90, 0x6a, 0x69, 0x24, 0xee, 0xd1, 0xc5, 0x6c, 0x66, 0x71, 0x3a, 0x88, 0x71, 0xdf, 0x99, 0xc9,
		0x1c, 0xc6, 0x26, 0x36, 0xd8, 0x72, 0x5f, 0x4a, 0x77, 0x83, 0x2d, 0x50, 0x68, 0x58, 0x01, 0xcd,
		0x42, 0x49, 0x21, 0x5c, 0x46, 0xd9, 0xe8, 0x19, 0x48, 0x79, 0xdd, 0x23, 0x8d, 0x40, 0xc4, 0xb4,
		0xd4, 0x96, 0x45, 0xa3, 0x30, 0x22, 0xb3, 0x0b, 0x29, 0x03, 0x21, 0x4c, 0x32, 0x34, 0xcb, 0x45,
		0x64, 0xf2, 0x75, 0xf4, 0x34, 0x0c, 0x7a, 0x6e, 0xdf, 0x2f, 0x30, 0xf7, 0x7c, 0x14, 0x46, 0x7a,
		0xc5, 0x5c, 0xcf, 0xf0, 0xc7, 0xed, 0x83, 0x11, 0xb0, 0xa1, 0xb5, 0x30, 0xee, 0x08, 0x03, 0xbf,
		0xc2, 0x88, 0x8a, 0xd4, 0xd5, 0x0d, 0xad, 0x8e, 0xd1, 0x14, 0x38, 0x9a, 0x9a, 0x7c, 0xa0, 0xaf,
		0xa8, 0x1e, 0x5f, 0x24, 0x10, 0x99, 0x21, 0xa5, 0x47, 0x20, 0xcc, 0x53, 0x1c, 0x61, 0x38, 0xd6,
		0x1f, 0x03, 0x89, 0x45, 0x99, 0xe2, 0xa4, 0xdb, 0x21, 0x4e, 0xfe, 0x33, 0xdf, 0x46, 0xe9, 0x98,
		0x63, 0x44, 0x40, 0xfc, 0x2a, 0x8d, 0x42, 0x8c, 0x86, 0x59, 0x45, 0x13, 0xa5, 0xc1, 0xbe, 0x26,
		0x0b, 0x53, 0xd1, 0x36, 0xd5, 0x76, 0xdd, 0x52, 0xae, 0xa8, 0xf5, 0xb6, 0x46, 0x03, 0x06, 0x17,
		0x86, 0x0b, 0x1f, 0x23, 0x32, 0x69, 0x0c, 0x12, 0x2c, 0x2a, 0x6b, 0x88, 0xb9, 0x46, 0xb3, 0x4f,
		0x44, 0x66, 0x81, 0xba, 0x40, 0x24, 0xe4, 0xf6, 0x97, 0x4c, 0xdc, 0x0b, 0x7c, 0x69, 0xe9, 0x2d,
		0x88, 0x80, 0xde, 0xfe, 0x74, 0x67, 0xe2, 0xbb, 0xb3, 0xf7, 0xf4, 0x3a, 0x63, 0x31, 0xf7, 0x4e,
		0x10, 0xc2, 0x74, 0xbf, 0xa5, 0x21, 0xb1, 0xfe, 0xc4, 0x6a, 0x51, 0x99, 0x5b, 0x29, 0x15, 0x16,
		0x8b, 0x99, 0x80, 0x94, 0x02, 0xa0, 0x82, 0x73, 0x8b, 0x2b, 0x33, 0xeb, 0x99, 0xa0, 0x7d, 0xbd,
		0xb0, 0xbc, 0x7e, 0xea, 0x64, 0x26, 0x64, 0x03, 0x4a, 0x4c, 0x10, 0x76, 0x1b, 0x4c, 0x4d, 0x66,
		0x22, 0x18, 0x09, 0x49, 0x46, 0xb0, 0x70, 0xb1, 0x38, 0x87, 0x16, 0x51, 0xaf, 0x04, 0x6d, 0x06,
		0xa4, 0x41, 0x88, 0x53, 0x49, 0x61, 0x65, 0x65, 0x31, 0x13, 0xb3, 0x39, 0xd7, 0xd6, 0xe5, 0x85,
		0xe5, 0xf9, 0x4c, 0xdc, 0xe6, 0x9c, 0x97, 0x57, 0x4a, 0xab, 0x19, 0xb0, 0x19, 0x96, 0x8a, 0x6b,
		0x6b, 0x33, 0xf3, 0xc5, 0x4c, 0xc2, 0xb6, 0x28, 0x3c, 0xb1, 0x5e, 0x5c, 0xcb, 0x24, 0x3d, 0xc3,
		0xc2, 0x5b, 0x0c, 0xda, 0xb7, 0x28, 0x2e, 0x97, 0x96, 0x32, 0x29, 0x69, 0x08, 0x06, 0xd9, 0x2d,
		0xc4, 0x20, 0xd2, 0x1d, 0x22, 0x1c, 0x69, 0xc6, 0x19, 0x08, 0x63, 0x19, 0xf2, 0x08, 0xd0, 0x42,
		0xca, 0xcd, 0x42, 0x84, 0x46, 0x17, 0x46, 0x71, 0x6a, 0x71, 0xa6, 0x50, 0x5c, 0x54, 0x56, 0x56,
		0xd7, 0x17, 0x56, 0x96, 0x67, 0x16, 0xd1, 0x77, 0xb6, 0x4c, 0x2e, 0xfe, 0x52, 0x69, 0x41, 0x2e,
		0xce, 0xa1, 0xff, 0x5c, 0xb2, 0xd5, 0xe2, 0xcc, 0x3a, 0xca, 0x42, 0xb9, 0x63, 0x30, 0xd2, 0x2b,
		0xcf, 0xf4, 0xda, 0x19, 0xb9, 0xd7, 0x02, 0x30, 0xdc, 0x23, 0x65, 0xf6, 0xdc, 0x45, 0x8f, 0x42,
		0x84, 0x45, 0x1a, 0x2b, 0x22, 0xf7, 0xf7, 0xcc, 0xbd, 0x34, 0xee, 0xba, 0x0a, 0x09, 0xc5, 0xb9,
		0x0b, 0x69, 0x68, 0x87, 0x42, 0x4a, 0x28, 0xba, 0xc2, 0xe9, 0x99, 0x00, 0x64, 0x77, 0xe2, 0xf6,
		0xd9, 0xef, 0x41, 0xcf, 0x7e, 0x7f, 0xb8, 0x73, 0x00, 0x87, 0x77, 0x9e, 0x43, 0xd7, 0x28, 0x5e,
		0x0f, 0xc0, 0xfe, 0xde, 0xfd, 0x46, 0xcf, 0x31, 0x3c, 0x02, 0xd1, 0x86, 0x66, 0x6d, 0x19, 0xa2,
		0xe6, 0xde, 0xdb, 0x23, 0x93, 0x13, 0x75, 0xa7, 0xaf, 0x38, 0xca, 0x5d, 0x0a, 0x42, 0x3b, 0x35,
		0x0d, 0x6c, 0x34, 0x5d, 0x23, 0x7d, 0x36, 0x08, 0xb7, 0xf5, 0x24, 0xef, 0x39, 0xd0, 0x3b, 0x01,
		0x6a, 0x7a, 0xb3, 0x6d, 0xb1, 0xba, 0xca, 0xd2, 0x4c, 0x9c, 0x4a, 0xe8, 0x16, 0x26, 0x29, 0xa4,
		0x6d, 0xd9, 0xfa, 0x10, 0xd5, 0x03, 0x13, 0x51, 0x83, 0x33, 0xce, 0x40, 0xc3, 0x74, 0xa0, 0x87,
		0x76, 0x98, 0x69, 0x57, 0xc9, 0x3a, 0x0e, 0x99, 0x72, 0xbd, 0xa6, 0xe9, 0x96, 0x62, 0x5a, 0x2d,
		0x4d, 0x6d, 0xd4, 0xf4, 0x2a, 0xcd, 0xa3, 0xb1, 0x7c, 0x64, 0x53, 0xad, 0x9b, 0x9a, 0x9c, 0x66,
		0xea, 0x35, 0xa1, 0x25, 0x08, 0x5a, 0x2c, 0x5a, 0x2e, 0x44, 0xd4, 0x83, 0x60, 0x6a, 0x1b, 0x91,
		0xfb, 0xcf, 0x01, 0x48, 0xb8, 0xba, 0x33, 0xe9, 0x30, 0x24, 0x2f, 0xa9, 0x57, 0x54, 0x45, 0x74,
		0xdc, 0xcc, 0x13, 0x09, 0x22, 0x5b, 0xe5, 0x5d, 0xf7, 0x71, 0x18, 0xa1, 0x26, 0x38, 0x47, 0xbc,
		0x51, 0xb9, 0xae, 0x9a, 0x26, 0x75, 0x5a, 0x8c, 0x9a, 0x4a, 0x44, 0xb7, 0x42, 0x54, 0xb3, 0x42,
		0x23, 0x4d, 0xc3, 0x30, 0x45, 0x34, 0x30, 0xf1, 0xd6, 0x9a, 0x75, 0x4d, 0x21, 0x67, 0x00, 0x93,
		0xe6, 0x53, 0x7b, 0x64, 0x43, 0xc4, 0x62, 0x89, 0x1b, 0x90, 0x11, 0x99, 0xd2, 0x3c, 0xdc, 0x49,
		0x61, 0x55, 0x4d, 0xd7, 0x5a, 0xaa, 0xa5, 0x29, 0xda, 0xaf, 0xb4, 0xd1, 0x56, 0x51, 0xf5, 0x8a,
		0xb2, 0xa5, 0x9a, 0x5b, 0xd9, 0x11, 0x37, 0xc1, 0x41, 0x62, 0x3b, 0xcf, 0x4d, 0x8b, 0xd4, 0x72,
		0x46, 0xaf, 0x9c, 0x47, 0x3b, 0x29, 0x0f, 0xfb, 0x29, 0x11, 0x3a, 0x05, 0xe7, 0xac, 0x94, 0xb7,
		0xb4, 0xf2, 0x65, 0xa5, 0x6d, 0x6d, 0x9e, 0xc9, 0xde, 0xee, 0x66, 0xa0, 0x83, 0x5c, 0xa3, 0x36,
		0xb3, 0xc4, 0xa4, 0x84, 0x16, 0xd2, 0x1a, 0x24, 0xc9, 0x7a, 0x34, 0x6a, 0x4f, 0xe1, 0xb0, 0x8d,
		0x16, 0xad, 0x11, 0xa9, 0x1e, 0x9b, 0xdb, 0xe5, 0xc4, 0xf1, 0x15, 0x0e, 0x58, 0xc2, 0xfe, 0x34,
		0x1f, 0x59, 0x5b, 0x2d, 0x16, 0xe7, 0xe4, 0x84, 0x60, 0x39, 0x67, 0xb4, 0x48, 0x4c, 0x55, 0x0d,
		0xdb, 0xc7, 0x09, 0x16, 0x53, 0x55, 0x43, 0x78, 0x18, 0xfd, 0x55, 0x2e, 0xb3, 0x69, 0xe3, 0xd9,
		0x85, 0x37, 0xeb, 0x66, 0x36, 0xe3, 0xf1, 0x57, 0xb9, 0x3c, 0xcf, 0x0c, 0x78, 0x98, 0x9b, 0xb8,
		0x25, 0x6e, 0x73, 0xfc, 0xe5, 0x06, 0x0e, 0x75, 0xcd, 0xb2, 0x13, 0x8a, 0x77, 0x6c, 0x6e, 0x77,
		0x03, 0x25, 0xcf, 0x1d, 0x9b, 0xdb, 0x9d, 0xb0, 0x7b, 0xe8, 0x01, 0xac, 0xa5, 0x95, 0xd1, 0xe5,
		0x95, 0xec, 0x01, 0xb7, 0xb5, 0x4b, 0x21, 0x4d, 0x60, 0x20, 0x97, 0x15, 0x4d, 0x57, 0x37, 0x70,
		0xed, 0xd5, 0x16, 0x7e, 0x31, 0xb3, 0x63, 0x6e, 0xe3, 0x54, 0xb9, 0x5c, 0xa4, 0xda, 0x19, 0xaa,
		0x94, 0x8e, 0xc1, 0x90, 0xb1, 0x71, 0xa9, 0xcc, 0x82, 0x4b, 0x41, 0x9e, 0xcd, 0xda, 0xb5, 0xec,
		0x11, 0xea, 0xa6, 0x34, 0x51, 0xd0, 0xd0, 0x5a, 0xa5, 0x62, 0xe9, 0x7e, 0x24, 0x37, 0xb7, 0xd4,
		0x56, 0x93, 0x16, 0x69, 0x13, 0x9d, 0xaa, 0x65, 0xef, 0x61, 0xa6, 0x4c, 0xbe, 0x2c, 0xc4, 0x52,
		0x11, 0xc6, 0xc8, 0xe4, 0x75, 0x55, 0x37, 0x94, 0xb6, 0xa9, 0x29, 0xce, 0x10, 0xed, 0xb5, 0xb8,
		0x97, 0x0c, 0x4b, 0xbe, 0x43, 0x98, 0x95, 0x4c, 0x4c, 0x66, 0xc2, 0x48, 0x2c, 0xcf, 0x45, 0x18,
		0x69, 0xeb, 0x35, 0x1d, 0x43, 0x1c, 0x35, 0x04, 0xcc, 0x36, 0x6c, 0xf6, 0x93, 0x81, 0x1d, 0x9a,
		0xee, 0x92, 0xdb, 0x9a, 0x05, 0x89, 0x3c, 0xdc, 0xee, 0x16, 0xe6, 0xf2, 0x90, 0x74, 0xc7, 0x8e,
		0x14, 0x07, 0x16, 0x3d, 0x58, 0xdd, 0xb0, 0xa2, 0xce, 0xae, 0xcc, 0x91, 0x5a, 0xf8, 0x64, 0x11,
		0x0b, 0x1b, 0xd6, 0xe4, 0xc5, 0x85, 0xf5, 0xa2, 0x22, 0x97, 0x96, 0xd7, 0x17, 0x96, 0x8a, 0x99,
		0xd0, 0xb1, 0x78, 0xec, 0xd3, 0x81, 0xcc, 0xd3, 0xf8, 0x17, 0xcc, 0xbd, 0x1b, 0x84, 0x94, 0xb7,
		0x0f, 0x96, 0x7e, 0x01, 0x0e, 0x88, 0x43, 0xab, 0xa9, 0x59, 0xca, 0xd5, 0x5a, 0x8b, 0x86, 0x73,
		0x43, 0x65, 0x9d, 0xa4, 0xbd, 0x12, 0x23, 0xdc, 0x0a, 0x8f, 0xf7, 0x8f, 0xa3, 0xcd, 0x39, 0x6a,
		0x22, 0x2d, 0xc2, 0x18, 0xba, 0x0c, 0x7b, 0x4d, 0xbd, 0xa2, 0xb6, 0x2a, 0x8a, 0xf3, 0xb8, 0x40,
		0x51, 0xcb, 0x18, 0x07, 0xa6, 0xc1, 0x2a, 0x89, 0xcd, 0x72, 0x87, 0x6e, 0xac, 0x71, 0x63, 0x27,
		0xc5, 0xce, 0x70, 0xd3, 0x8e, 0xa8, 0x09, 0xed, 0x14, 0x35, 0xd8, 0x7b, 0x35, 0xd4, 0x26, 0x86,
		0x8d, 0xd5, 0xda, 0xa6, 0xdd, 0x5b, 0x4c, 0x8e, 0xa1, 0xa0, 0x48, 0xae, 0xbf, 0xbe, 0x35, 0x70,
		0xfb, 0xf1, 0x83, 0x10, 0x24, 0xdd, 0x1d, 0x1c, 0x69, 0x88, 0xcb, 0x34, 0xcd, 0x07, 0x68, 0x16,
		0xb8, 0x7b, 0xd7, 0x7e, 0x6f, 0x7c, 0x96, 0xe4, 0xff, 0x7c, 0x94, 0xf5, 0x55, 0x32, 0x43, 0x92,
		0xda, 0x4b, 0x62, 0x4d, 0x63, 0xdd, 0x7a, 0x4c, 0xe6, 0x57, 0x98, 0xec, 0xa2, 0x97, 0x4c, 0xca,
		0x1d, 0xa5, 0xdc, 0x47, 0x76, 0xe7, 0xbe, 0xb0, 0x46, 0xc9, 0xe3, 0x17, 0xd6, 0x94, 0xe5, 0x15,
		0x79, 0x69, 0x66, 0x51, 0xe6, 0x70, 0xe9, 0x20, 0x84, 0xeb, 0xea, 0x53, 0xdb, 0xde, 0x4a, 0x41,
		0x45, 0xfd, 0x3a, 0x1e, 0x19, 0xc8, 0x23, 0x0f, 0x6f, 0x7e, 0xa6, 0xa2, 0xaf, 0x31, 0xf4, 0x27,
		0x20, 0x42, 0xfd, 0x25, 0x01, 0x70, 0x8f, 0x65, 0xf6, 0x49, 0x31, 0x08, 0xcf, 0xae, 0xc8, 0x24,
		0xfc, 0x31, 0xde, 0x99, 0x54, 0x59, 0x5d, 0x28, 0xce, 0xe2, 0x0e, 0xc8, 0x4d, 0x43, 0x94, 0x39,
		0x81, 0x6c, 0x0d, 0xdb, 0x0d, 0x08, 0x62, 0x97, 0x9c, 0x23, 0x20, 0xb4, 0xa5, 0xa5, 0x42, 0x51,
		0xce, 0x04, 0xdd, 0xcb, 0xfb, 0x4f, 0x01, 0x48, 0xb8, 0x1a, 0x2a, 0x52, 0xca, 0xd5, 0x7a, 0xdd,
		0xb8, 0xaa, 0xa8, 0xf5, 0x1a, 0x66, 0x28, 0xb6, 0x3e, 0x40, 0x45, 0x33, 0x44, 0xd2, 0xaf, 0xff,
		0xbe, 0x91, 0xd8, 0xbc, 0x1e, 0x80, 0x4c, 0x67, 0x33, 0xd6, 0x31, 0xc0, 0xc0, 0xb7, 0x3a, 0xc0,
		0x97, 0x03, 0x90, 0xf2, 0x76, 0x60, 0x1d, 0xc3, 0x3b, 0xfc, 0xad, 0x0e, 0xef, 0xa5, 0x00, 0x0c,
		0x7a, 0xfa, 0xae, 0x9f, 0xa8, 0xd1, 0xbd, 0x18, 0x82, 0xe1, 0x1e, 0x38, 0x4c, 0x40, 0xac, 0x41,
		0x65, 0x3d, 0xf3, 0x43, 0xfd, 0xdc, 0x6b, 0x9c, 0xd4, 0xbf, 0x55, 0xb5, 0x65, 0xf1, 0x7e, 0x16,
		0xeb, 0x65, 0xad, 0x82, 0x49, 0xb5, 0xb6, 0x59, 0xc3, 0xf6, 0x8d, 0x9d, 0x58, 0x58, 0xd7, 0x9a,
		0x76, 0xe4, 0xec, 0x78, 0xfc, 0x20, 0x48, 0x4d, 0xc3, 0xac, 0x59, 0xb5, 0x2b, 0xe4, 0xf1, 0x9c,
		0x38, 0x48, 0x93, 0x2e, 0x36, 0x2c, 0x67, 0x84, 0x66, 0x41, 0xb7, 0x6c, 0x6b, 0x5d, 0xab, 0xaa,
		0x1d, 0xd6, 0x24, 0x0d, 0x85, 0xe4, 0x8c, 0xd0, 0xd8, 0xd6, 0xd8, 0x68, 0x56, 0x8c, 0x36, 0x69,
		0x08, 0x98, 0x1d, 0xc9, 0x7a, 0x01, 0x39, 0xc1, 0x64, 0xb6, 0x09, 0xef, 0xd8, 0x9c, 0x13, 0x7c,
		0x52, 0x4e, 0x30, 0x19, 0x33, 0xb9, 0x0f, 0xd2, 0x6a, 0xb5, 0xda, 0x22, 0xe4, 0x82, 0x88, 0xb5,
		0xa1, 0x29, 0x5b, 0x4c, 0x0d, 0x47, 0x2f, 0x40, 0x4c, 0xf8, 0x81, 0x14, 0x16, 0xe2, 0x09, 0xac,
		0xf9, 0xf4, 0x39, 0x4a, 0x90, 0x1c, 0xea, 0x75, 0xa1, 0xc4, 0x9b, 0xd6, 0x4c, 0xc5, 0x79, 0xa0,
		0x17, 0x44, 0x7d, 0x4c, 0x4e, 0xd4, 0x4c, 0xfb, 0x09, 0x4e, 0xee, 0x75, 0x2c, 0xaf, 0xde, 0x07,
		0x92, 0xd2, 0x1c, 0xc4, 0xea, 0x06, 0xc6, 0x07, 0x41, 0xb0, 0xa7, 0xe1, 0x47, 0x7d, 0x9e, 0x61,
		0x8e, 0x2f, 0x72, 0x7b, 0xd9, 0x46, 0x8e, 0xfe, 0x7b, 0x00, 0x62, 0x42, 0x8c, 0x85, 0x22, 0xdc,
		0x54, 0xad, 0x2d, 0x4a, 0x17, 0x29, 0x04, 0x33, 0x01, 0x99, 0x5e, 0x13, 0x39, 0x76, 0x33, 0x3a,
		0x0d, 0x01, 0x2e, 0x27, 0xd7, 0x64, 0x5d, 0xeb, 0x9a, 0x5a, 0xa1, 0x0d, 0xae, 0xd1, 0x68, 0xe0,
		0x4a, 0x9a, 0x62, 0x5d, 0xb9, 0x7c, 0x96, 0x8b, 0xc9, 0x73, 0x71, 0xab, 0xa5, 0xd6, 0xea, 0x1e,
		0xdb, 0x30, 0xb5, 0xcd, 0x08, 0x85, 0x6d, 0x9c, 0x87, 0x83, 0x82, 0xb7, 0xa2, 0x59, 0x2a, 0x36,
		0xcf, 0x15, 0x07, 0x14, 0xa5, 0x4f, 0xbb, 0x0e, 0x70, 0x83, 0x39, 0xae, 0x17, 0xd8, 0xc2, 0x45,
		0x6c, 0x64, 0x8d, 0x46, 0xa7, 0x27, 0x0a, 0x99, 0x8e, 0x73, 0x97, 0x79, 0x3e, 0xf0, 0x24, 0x38,
		0x4d, 0xc5, 0x6b, 0xc1, 0xd0, 0xfc, 0x6a, 0xe1, 0xcd, 0xe0, 0xe8, 0x3c, 0xc3, 0xad, 0x0a, 0x0f,
		0xca, 0xda, 0x66, 0x5d, 0x2b, 0x13, 0xef, 0xc0, 0xdb, 0x47, 0xe0, 0xa1, 0x6a, 0xcd, 0xda, 0x6a,
		0x6f, 0x8c, 0xe3, 0x1d, 0x26, 0xaa, 0x46, 0xd5, 0x70, 0x5e, 0x67, 0x90, 0x2b, 0x7a, 0x41, 0xbf,
		0xf1, 0x57, 0x1a, 0x71, 0x5b, 0x3a, 0xea, 0xfb, 0xfe, 0x23, 0xbf, 0x0c, 0xc3, 0xdc, 0x58, 0xa1,
		0xcf, 0x54, 0x59, 0x0b, 0x2a, 0xed, 0x7a, 0x20, 0xcf, 0xbe, 0xfd, 0x31, 0x2d, 0x09, 0xf2, 0x10,
		0x87, 0x12, 0x1d, 0x6b, 0x52, 0xf3, 0x32, 0xdc, 0xe6, 0xe1, 0x63, 0x31, 0x8c, 0x47, 0xee, 0xdd,
		0x19, 0xdf, 0xe5, 0x8c, 0xc3, 0x2e, 0xc6, 0x35, 0x0e, 0xcd, 0xcf, 0xc2, 0xe0, 0x5e, 0xb8, 0xfe,
		0x95, 0x73, 0x25, 0x35, 0x37, 0xc9, 0x3c, 0xa4, 0x29, 0x49, 0xb9, 0x6d, 0x5a, 0x46, 0x83, 0x26,
		0x88, 0xdd, 0x69, 0xfe, 0xed, 0x63, 0x16, 0x54, 0x29, 0x02, 0x9b, 0xb5, 0x51, 0xf9, 0xc7, 0x60,
		0x84, 0x48, 0xe8, 0x1e, 0x74, 0xb3, 0xf9, 0x3f, 0x42, 0xc8, 0xfe, 0xc7, 0x33, 0x2c, 0xf6, 0x86,
		0x6d, 0x02, 0x17, 0xaf, 0x6b, 0x25, 0xaa, 0x9a, 0x85, 0xb9, 0x0d, 0xcf, 0x7f, 0xf5, 0xba, 0xb4,
		0xeb, 0x3b, 0x86, 0xec, 0x0b, 0x9f, 0x7b, 0x57, 0x62, 0x9e, 0x21, 0x67, 0xea, 0xf5, 0x7c, 0x09,
		0x0e, 0xf4, 0x58, 0xd9, 0x3e, 0x38, 0x5f, 0xe4, 0x9c, 0x23, 0x5d, 0xab, 0x4b, 0x68, 0x57, 0x41,
		0xc8, 0xed, 0xf5, 0xe8, 0x83, 0xf3, 0x25, 0xce, 0x29, 0x71, 0xac, 0x58, 0x16, 0xc2, 0x78, 0x01,
		0x86, 0xf0, 0xa4, 0xbe, 0x61, 0x98, 0xfc, 0xdc, 0xdb, 0x07, 0xdd, 0xcb, 0x9c, 0x2e, 0xcd, 0x81,
		0xf4, 0x14, 0x4c, 0xb8, 0xce, 0x42, 0x6c, 0x13, 0x0f, 0x40, 0x7d, 0x50, 0xbc, 0xc2, 0x29, 0x06,
		0x88, 0x3d, 0x81, 0xce, 0x40, 0xb2, 0x6a, 0xf0, 0x34, 0xec, 0x0f, 0xbf, 0xce, 0xe1, 0x09, 0x81,
		0xe1, 0x14, 0x4d, 0xa3, 0xd9, 0xae, 0x93, 0x1c, 0xed, 0x4f, 0xf1, 0xc7, 0x82, 0x42, 0x60, 0x38,
		0xc5, 0x1e, 0xdc, 0xfa, 0x27, 0x82, 0xc2, 0x74, 0xf9, 0xf3, 0x51, 0xf2, 0xac, 0xb7, 0xbe, 0x6d,
		0xe8, 0xfd, 0x0c, 0xe2, 0x55, 0xce, 0x00, 0x1c, 0x42, 0x08, 0x1e, 0x86, 0x78, 0xbf, 0x0b, 0xf1,
		0xa7, 0x1c, 0x1e, 0xd3, 0xc4, 0x0a, 0xe0, 0x3e, 0x13, 0x49, 0x86, 0xbc, 0x5b, 0xf1, 0xa7, 0xf8,
		0x33, 0x4e, 0x91, 0x72, 0xc1, 0xf8, 0x34, 0x2c, 0xcd, 0xb4, 0xf0, 0xa8, 0xde, 0x07, 0xc9, 0xeb,
		0x62, 0x1a, 0x1c, 0xc2, 0x5d, 0xb9, 0xa1, 0xe9, 0xe5, 0xad, 0xfe, 0x18, 0xde, 0x10, 0xae, 0x14,
		0x18, 0x42, 0x81, 0x99, 0xa7, 0xa1, 0xb6, 0xf0, 0x70, 0x5d, 0xef, 0x6b, 0x39, 0xfe, 0x9c, 0x73,
		0x24, 0x6d, 0x10, 0xf7, 0x48, 0x5b, 0xdf, 0x0b, 0xcd, 0x9b, 0xc2, 0x23, 0x2e, 0x18, 0xdf, 0x7a,
		0x78, 0x32, 0x25, 0x9d, 0xc4, 0x5e, 0xd8, 0xfe, 0x42, 0x6c, 0x3d, 0x86, 0x5d, 0x72, 0x33, 0xe2,
		0x4a, 0x9b, 0x78, 0x04, 0xef, 0x87, 0xe6, 0x2f, 0xc5, 0x4a, 0x53, 0x00, 0x01, 0x3f, 0x01, 0x07,
		0x7b, 0xa6, 0xfa, 0x3e, 0xc8, 0xfe, 0x8a, 0x93, 0xed, 0xef, 0x91, 0xee, 0x79, 0x4a, 0xd8, 0x2b,
		0xe5, 0x5f, 0x8b, 0x94, 0xa0, 0x75, 0x70, 0xad, 0x92, 0x36, 0xd6, 0x54, 0x37, 0xf7, 0xe6, 0xb5,
		0xbf, 0x11, 0x5e, 0x63, 0x58, 0x8f, 0xd7, 0xd6, 0x61, 0x3f, 0x67, 0xdc, 0xdb, 0xba, 0xbe, 0x25,
		0x12, 0x2b, 0x43, 0x97, 0xbc, 0xab, 0xfb, 0xcb, 0x30, 0x6a, 0xbb, 0x53, 0x74, 0x60, 0xa6, 0x42,
		0x1e, 0x0c, 0xf8, 0x33, 0xbf, 0xcd, 0x99, 0x45, 0xc6, 0xb7, 0x5b, 0x38, 0x73, 0x49, 0x6d, 0x12,
		0xf2, 0x8b, 0x90, 0x15, 0xe4, 0x6d, 0x1d, 0x1b, 0x7c, 0xa3, 0xaa, 0xe3, 0x32, 0x56, 0xfa, 0xa0,
		0xfe, 0xdb, 0x8e, 0xa5, 0x2a, 0xb9, 0xe0, 0x84, 0x79, 0x01, 0x32, 0x76, 0xbf, 0xa1, 0xd4, 0x1a,
		0x4d, 0x03, 0x5b, 0xcb, 0xdd, 0x19, 0xff, 0x4e, 0xac, 0x94, 0x8d, 0x5b, 0xa0, 0xb0, 0x7c, 0x11,
		0x52, 0xf4, 0xb2, 0xdf, 0x90, 0xfc, 0x7b, 0x4e, 0x34, 0xe8, 0xa0, 0x78, 0xe2, 0xc0, 0x4e, 0x09,
		0x7b, 0xde, 0x7e, 0xf2, 0xdf, 0x3f, 0x88, 0xc4, 0xc1, 0x21, 0x84, 0xe0, 0x3c, 0x64, 0x2a, 0x35,
		0x9c, 0xa5, 0xa5, 0xb0, 0x77, 0x66, 0xfe, 0x2c, 0xef, 0xd8, 0x39, 0x8c, 0xe2, 0xe8, 0x5b, 0x17,
		0x16, 0xc7, 0xe9, 0x8e, 0x9a, 0x2e, 0xf9, 0xbd, 0xc8, 0xcd, 0xfe, 0xea, 0x2d, 0xce, 0xe5, 0x2d,
		0xe9, 0xf9, 0x45, 0xe2, 0x68, 0x6f, 0xe1, 0xf5, 0x27, 0x7b, 0xe6, 0x96, 0xed, 0x6b, 0x4f, 0xdd,
		0xcd, 0x9f, 0x83, 0x41, 0x4f, 0xd1, 0xf5, 0xa7, 0xfa, 0x35, 0x4e, 0x95, 0x74, 0xd7, 0xdc, 0xfc,
		0x34, 0x84, 0x49, 0x01, 0xf5, 0x87, 0xff, 0x3a, 0x87, 0x53, 0xf3, 0xfc, 0x2f, 0x42, 0x4c, 0x14,
		0x4e, 0x7f, 0xe8, 0x6f, 0x70, 0xa8, 0x0d, 0x21, 0x70, 0x51, 0x34, 0xfd, 0xe1, 0xbf, 0x29, 0xe0,
		0x02, 0x42, 0xe0, 0xfd, 0xbb, 0xf0, 0x9f, 0x7f, 0x2b, 0xcc, 0x13, 0x9f, 0xf0, 0x1d, 0x79, 0x7b,
		0xc4, 0xaa, 0xa5, 0x3f, 0xfa, 0x59, 0x7e, 0x73, 0x81, 0xc8, 0x9f, 0x86, 0x48, 0x9f, 0x0e, 0xff,
		0x6d, 0x0e, 0x65, 0xf6, 0x58, 0x8b, 0x12, 0xae, 0x0a, 0xe9, 0x0f, 0xff, 0x1d, 0x0e, 0x77, 0xa3,
		0xc8, 0xd0, 0x79, 0x85, 0xf4, 0x27, 0xf8, 0x5d, 0x31, 0x74, 0x8e, 0x20, 0x6e, 0x13, 0xc5, 0xd1,
		0x1f, 0xfd, 0x7b, 0xc2, 0xeb, 0x02, 0x82, 0xfb, 0x32, 0x6e, 0x27, 0x3c, 0x7f, 0xfc, 0xef, 0x73,
		0xbc, 0x83, 0x21, 0x1e, 0x70, 0x25, 0x5c, 0x7f, 0x8a, 0xe7, 0x84, 0x07, 0x5c, 0x28, 0xb2, 0x8d,
		0x3a, 0x8b, 0xa8, 0x3f, 0xd3, 0x1f, 0x88, 0x6d, 0xd4, 0x51, 0x43, 0xc9, 0x6a, 0xd2, 0xbc, 0xe3,
		0x4f, 0xf1, 0x87, 0x62, 0x35, 0xa9, 0x3d, 0x19, 0x46, 0x67, 0x55, 0xf2, 0xe7, 0xf8, 0x23, 0x31,
		0x8c, 0x8e, 0xa2, 0x84, 0x35, 0x4e, 0xea, 0xae, 0x48, 0xfe, 0x7c, 0xcf, 0x73, 0xbe, 0xa1, 0xae,
		0x82, 0x94, 0x7f, 0x1c, 0xf6, 0xf7, 0xae, 0x46, 0xfe, 0xac, 0x2f, 0xdc, 0xea, 0x38, 0x3f, 0xb8,
		0x8b, 0x11, 0x16, 0xcf, 0x91, 0x5e, 0x95, 0xc8, 0x9f, 0xf6, 0xc5, 0x5b, 0xde, 0x23, 0xa2, 0xbb,
		0x10, 0x61, 0xaf, 0x07, 0x4e, 0x11, 0xf0, 0xe7, 0x7a, 0x99, 0x73, 0xb9, 0x40, 0x64, 0x6b, 0xf0,
		0x1a, 0xe0, 0x8f, 0x7f, 0x45, 0x6c, 0x0d, 0x8e, 0xc8, 0xcf, 0x41, 0xd2, 0x5d, 0x32, 0xfc, 0x19,
		0xae, 0xdb, 0xbb, 0xd3, 0xa9, 0x18, 0x38, 0x84, 0x98, 0xde, 0xae, 0xd7, 0x49, 0x88, 0x49, 0xbb,
		0xff, 0xc4, 0x22, 0xfb, 0x7f, 0x5f, 0xf2, 0xed, 0x25, 0x00, 0x98, 0x89, 0x23, 0x5a, 0x63, 0x03,
		0x3d, 0xe9, 0x83, 0xfc, 0xec, 0x4b, 0x91, 0x56, 0x88, 0x35, 0xee, 0x4a, 0x60, 0x87, 0x58, 0xfa,
		0x4c, 0xdd, 0x07, 0xfb, 0xff, 0x5f, 0xf2, 0xd7, 0xbe, 0x0e, 0xc4, 0x21, 0x60, 0x2f, 0x91, 0x77,
		0x27, 0xf8, 0xdc, 0x4b, 0x40, 0x0f, 0xbe, 0x67, 0x61, 0x80, 0xfc, 0xd2, 0xc4, 0x52, 0xab, 0x7e,
		0xe8, 0xef, 0x70, 0xb4, 0xb0, 0x27, 0x0e, 0x6b, 0x18, 0x2d, 0x0d, 0xbf, 0x9a, 0x7e, 0xd8, 0xef,
		0x72, 0xac, 0x0d, 0x20, 0xe0, 0xb2, 0x6a, 0x5a, 0xfd, 0xcc, 0xfb, 0x7b, 0x02, 0x2c, 0x00, 0x64,
		0xd0, 0xe4, 0xfb, 0x65, 0x6d, 0xdb, 0x0f, 0x7b, 0x53, 0x0c, 0x9a, 0xdb, 0x63, 0x1a, 0x8d, 0x93,
		0xaf, 0xec, 0xa7, 0x10, 0x3e, 0xe0, 0xef, 0x73, 0xb0, 0x83, 0x28, 0x1c, 0xee, 0xfd, 0xa8, 0x09,
		0xe6, 0x8d, 0x79, 0x83, 0x3d, 0x64, 0x82, 0x4f, 0x32, 0x30, 0x8a, 0x36, 0x58, 0xa5, 0x27, 0xec,
		0x1d, 0x3d, 0x81, 0x81, 0xc9, 0x1f, 0x10, 0x85, 0xf0, 0xeb, 0xe8, 0xde, 0x1e, 0x2a, 0xe5, 0x0e,
		0x42, 0x64, 0xad, 0xbd, 0xb1, 0xb1, 0x4d, 0x7e, 0x81, 0x65, 0xb6, 0x37, 0xf8, 0xeb, 0x72, 0xf2,
		0x35, 0x77, 0x23, 0x04, 0x83, 0xd8, 0xec, 0x90, 0x37, 0x14, 0x26, 0xc6, 0xf1, 0xca, 0xa6, 0x94,
		0x85, 0x28, 0x9d, 0xc5, 0x09, 0x6a, 0x16, 0x38, 0xbf, 0x4f, 0x8e, 0xd2, 0x5f, 0x10, 0x9e, 0xb0,
		0x35, 0x93, 0xf4, 0xa5, 0x43, 0xd0, 0xd6, 0x4c, 0xda, 0x9a, 0x29, 0xf6, 0xd3, 0x2c, 0x5b, 0x33,
		0x65, 0x6b, 0x4e, 0xd2, 0x27, 0x77, 0x21, 0x5b, 0x73, 0xd2, 0xd6, 0x4c, 0xd3, 0x87, 0xaf, 0x83,
		0xb6, 0x66, 0xda, 0xd6, 0x9c, 0xa2, 0x8f, 0x5b, 0xc3, 0xb6, 0xe6, 0x94, 0xad, 0x39, 0x4d, 0x9f,
		0xb2, 0x0e, 0xd9, 0x9a, 0xd3, 0xb6, 0xe6, 0x0c, 0x7d, 0xb2, 0x2a, 0xd9, 0x9a, 0x33, 0xb6, 0xe6,
		0x2c, 0x7d, 0x29, 0x3e, 0x60, 0x6b, 0xce, 0x4a, 0xa3, 0x30, 0xc0, 0x66, 0x7a, 0x9c, 0xbe, 0x44,
		0x4a, 0xa3, 0x6a, 0x80, 0x4d, 0xf5, 0xb8, 0xa3, 0x3b, 0x41, 0x5f, 0x7c, 0x47, 0x1d, 0xdd, 0x09,
		0x47, 0x37, 0x49, 0x7f, 0xc8, 0x99, 0x71, 0x74, 0x93, 0x8e, 0x6e, 0x2a, 0x3b, 0x48, 0x76, 0xaa,
		0xa3, 0x9b, 0x72, 0x74, 0x27, 0xb3, 0x29, 0xb2, 0x02, 0x8e, 0xee, 0xa4, 0xa3, 0x9b, 0xce, 0xa6,
		0xc9, 0x03, 0x64, 0x47, 0x37, 0x2d, 0x3d, 0x04, 0x09, 0x5c, 0x2a, 0x85, 0xbf, 0xf3, 0xa4, 0x2f,
		0xd8, 0x13, 0x93, 0x30, 0x4e, 0x62, 0x82, 0x2e, 0x2b, 0xda, 0x02, 0x1a, 0xf0, 0x24, 0x55, 0x48,
		0x02, 0x3d, 0x48, 0xb3, 0x64, 0x96, 0xfb, 0x2c, 0x04, 0xc3, 0x9e, 0x05, 0x9e, 0xa3, 0x39, 0xeb,
		0xe7, 0xcb, 0xfc, 0x53, 0xbe, 0xcc, 0xf9, 0xf0, 0xcd, 0x57, 0xc7, 0x02, 0x1d, 0x8b, 0xfd, 0x7e,
		0x00, 0xe2, 0xeb, 0x57, 0x0d, 0x5a, 0x90, 0xcc, 0x1f, 0xf3, 0x12, 0x8b, 0xa1, 0x4f, 0x9d, 0xcc,
		0xe6, 0xe8, 0xb4, 0x02, 0x7c, 0xe8, 0x53, 0xce, 0xb4, 0xa6, 0xa6, 0xb3, 0x77, 0xd3, 0x69, 0xd9,
		0xba, 0x69, 0x69, 0x02, 0x92, 0xae, 0x69, 0x4d, 0xd2, 0x1f, 0x48, 0x78, 0xe7, 0x15, 0x90, 0x13,
		0xce, 0xbc, 0x26, 0x0b, 0x11, 0x20, 0x39, 0x8e, 0xfc, 0xb3, 0xae, 0x1a, 0xb9, 0x0f, 0x02, 0x90,
		0xb6, 0xa7, 0xf4, 0xb5, 0xc4, 0xee, 0x37, 0x35, 0x31, 0xbe, 0x62, 0xde, 0xe9, 0x3d, 0x17, 0x84,
		0x04, 0x7b, 0x8e, 0x4c, 0x67, 0x48, 0x6e, 0xc8, 0x8e, 0x79, 0xdb, 0x7c, 0x30, 0x18, 0x20, 0xec,
		0xec, 0xb2, 0x2d, 0xc9, 0x00, 0xcc, 0x94, 0x6c, 0x66, 0x36, 0x9e, 0xc2, 0xf1, 0xff, 0xbe, 0x31,
		0xf6, 0xe0, 0x8e, 0xd5, 0x80, 0x84, 0xc6, 0x04, 0xab, 0xd6, 0xe3, 0xa5, 0x9a, 0x6e, 0x9d, 0x98,
		0x3c, 0x43, 0xa2, 0xa8, 0x6c, 0xb3, 0x48, 0x25, 0x88, 0xcd, 0x62, 0x75, 0xa2, 0x8c, 0x64, 0x02,
		0xe1, 0xc2, 0xe9, 0x1f, 0xde, 0x18, 0x9b, 0xf2, 0x61, 0xe4, 0x85, 0x74, 0x7c, 0x69, 0x9b, 0xb0,
		0x9e, 0x3a, 0x49, 0xe0, 0x48, 0x4c, 0x2b, 0x2c, 0xa5, 0x9d, 0x14, 0x43, 0x25, 0xaf, 0xb3, 0xe8,
		0x0f, 0x5d, 0x42, 0x85, 0xcc, 0x47, 0x37, 0xc6, 0x92, 0x4b, 0xdb, 0x8e, 0xdc, 0x19, 0x0a, 0xb9,
		0x2a, 0xc4, 0x20, 0xca, 0xae, 0x72, 0xd7, 0x83, 0x30, 0xe4, 0x72, 0x0a, 0x5f, 0xf5, 0x9f, 0x5d,
		0xd7, 0xf0, 0xc8, 0xb1, 0x1d, 0x54, 0x98, 0x7b, 0xef, 0xc3, 0x43, 0xfb, 0xde, 0xc7, 0xcf, 0x7f,
		0xe1, 0xe7, 0x7f, 0x3e, 0x3c, 0x14, 0xb8, 0x89, 0x9f, 0x2f, 0xf0, 0xf3, 0xf4, 0x47, 0x87, 0x02,
		0x6f, 0xe0, 0xe7, 0x2d, 0xfc, 0xfc, 0x23, 0x7e, 0xde, 0xc3, 0xcf, 0xfb, 0x1f, 0xa1, 0x0d, 0xfe,
		0xff, 0x14, 0xff, 0xdf, 0xc4, 0xff, 0x5f, 0xe0, 0xff, 0xa7, 0xff, 0xf7, 0xd0, 0xbe, 0x1f, 0x05,
		0x00, 0x00, 0xff, 0xff, 0x6a, 0x44, 0x25, 0xc7, 0x64, 0x33, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Subby) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Subby")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Subby but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Subby but is not nil && this == nil")
	}
	if this.Sub != nil && that1.Sub != nil {
		if *this.Sub != *that1.Sub {
			return fmt.Errorf("Sub this(%v) Not Equal that(%v)", *this.Sub, *that1.Sub)
		}
	} else if this.Sub != nil {
		return fmt.Errorf("this.Sub == nil && that.Sub != nil")
	} else if that1.Sub != nil {
		return fmt.Errorf("Sub this(%v) Not Equal that(%v)", this.Sub, that1.Sub)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Subby) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Sub != nil && that1.Sub != nil {
		if *this.Sub != *that1.Sub {
			return false
		}
	} else if this.Sub != nil {
		return false
	} else if that1.Sub != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllTypesOneOf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf)
	if !ok {
		that2, ok := that.(AllTypesOneOf)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf but is not nil && this == nil")
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return fmt.Errorf("this.TestOneof != nil && that1.TestOneof == nil")
		}
	} else if this.TestOneof == nil {
		return fmt.Errorf("this.TestOneof == nil && that1.TestOneof != nil")
	} else if err := this.TestOneof.VerboseEqual(that1.TestOneof); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllTypesOneOf_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field1 but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	return nil
}
func (this *AllTypesOneOf_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field2 but is not nil && this == nil")
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	return nil
}
func (this *AllTypesOneOf_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field3")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field3 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field3 but is not nil && this == nil")
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *AllTypesOneOf_Field4) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field4")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field4 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field4 but is not nil && this == nil")
	}
	if this.Field4 != that1.Field4 {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", this.Field4, that1.Field4)
	}
	return nil
}
func (this *AllTypesOneOf_Field5) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field5")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field5 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field5 but is not nil && this == nil")
	}
	if this.Field5 != that1.Field5 {
		return fmt.Errorf("Field5 this(%v) Not Equal that(%v)", this.Field5, that1.Field5)
	}
	return nil
}
func (this *AllTypesOneOf_Field6) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field6")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field6 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field6 but is not nil && this == nil")
	}
	if this.Field6 != that1.Field6 {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	return nil
}
func (this *AllTypesOneOf_Field7) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field7")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field7 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field7 but is not nil && this == nil")
	}
	if this.Field7 != that1.Field7 {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", this.Field7, that1.Field7)
	}
	return nil
}
func (this *AllTypesOneOf_Field8) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field8")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field8 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field8 but is not nil && this == nil")
	}
	if this.Field8 != that1.Field8 {
		return fmt.Errorf("Field8 this(%v) Not Equal that(%v)", this.Field8, that1.Field8)
	}
	return nil
}
func (this *AllTypesOneOf_Field9) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field9")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field9 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field9 but is not nil && this == nil")
	}
	if this.Field9 != that1.Field9 {
		return fmt.Errorf("Field9 this(%v) Not Equal that(%v)", this.Field9, that1.Field9)
	}
	return nil
}
func (this *AllTypesOneOf_Field10) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field10")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field10 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field10 but is not nil && this == nil")
	}
	if this.Field10 != that1.Field10 {
		return fmt.Errorf("Field10 this(%v) Not Equal that(%v)", this.Field10, that1.Field10)
	}
	return nil
}
func (this *AllTypesOneOf_Field11) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field11")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field11 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field11 but is not nil && this == nil")
	}
	if this.Field11 != that1.Field11 {
		return fmt.Errorf("Field11 this(%v) Not Equal that(%v)", this.Field11, that1.Field11)
	}
	return nil
}
func (this *AllTypesOneOf_Field12) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field12")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field12 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field12 but is not nil && this == nil")
	}
	if this.Field12 != that1.Field12 {
		return fmt.Errorf("Field12 this(%v) Not Equal that(%v)", this.Field12, that1.Field12)
	}
	return nil
}
func (this *AllTypesOneOf_Field13) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field13")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field13 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field13 but is not nil && this == nil")
	}
	if this.Field13 != that1.Field13 {
		return fmt.Errorf("Field13 this(%v) Not Equal that(%v)", this.Field13, that1.Field13)
	}
	return nil
}
func (this *AllTypesOneOf_Field14) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field14")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field14 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field14 but is not nil && this == nil")
	}
	if this.Field14 != that1.Field14 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this.Field14, that1.Field14)
	}
	return nil
}
func (this *AllTypesOneOf_Field15) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field15")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field15 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field15 but is not nil && this == nil")
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return fmt.Errorf("Field15 this(%v) Not Equal that(%v)", this.Field15, that1.Field15)
	}
	return nil
}
func (this *AllTypesOneOf_SubMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_SubMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_SubMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_SubMessage but is not nil && this == nil")
	}
	if !this.SubMessage.Equal(that1.SubMessage) {
		return fmt.Errorf("SubMessage this(%v) Not Equal that(%v)", this.SubMessage, that1.SubMessage)
	}
	return nil
}
func (this *AllTypesOneOf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf)
	if !ok {
		that2, ok := that.(AllTypesOneOf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return false
		}
	} else if this.TestOneof == nil {
		return false
	} else if !this.TestOneof.Equal(that1.TestOneof) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field3) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field4) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field4 != that1.Field4 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field5) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field5 != that1.Field5 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field6) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field7) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field8) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field8 != that1.Field8 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field9) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field9 != that1.Field9 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field10) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field10 != that1.Field10 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field11) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field11 != that1.Field11 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field12) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field12 != that1.Field12 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field13) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field13 != that1.Field13 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field14) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field14 != that1.Field14 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field15) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return false
	}
	return true
}
func (this *AllTypesOneOf_SubMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOf_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SubMessage.Equal(that1.SubMessage) {
		return false
	}
	return true
}
func (this *AllTypesOneOfDirect) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOfDirect but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect but is not nil && this == nil")
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return fmt.Errorf("this.TestOneof != nil && that1.TestOneof == nil")
		}
	} else if this.TestOneof == nil {
		return fmt.Errorf("this.TestOneof == nil && that1.TestOneof != nil")
	} else if err := this.TestOneof.VerboseEqual(that1.TestOneof); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field1")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field1 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field2")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field2 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field3")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field3 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field4) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field4)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field4")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field4 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field5) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field5)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field5")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field5 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field5 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field6) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field6)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field6")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field6 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field7) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field7)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field7")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field7 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field8) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field8)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field8")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field8 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field8 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field9) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field9)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field9")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field9 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field9 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field10) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field10)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field10")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field10 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field10 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field11) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field11)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field11")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field11 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field11 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field12) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field12)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field12")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field12 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field12 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field13) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field13)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field13")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field13 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field13 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field14) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field14)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field14")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field14 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_Field15) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field15)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_Field15")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_Field15 but is nil && this != nil")
	}
	if !bytes.Equal(this, *that1) {
		return fmt.Errorf("Field15 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this AllTypesOneOfDirect_SubMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOfDirect_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOfDirect_SubMessage")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *AllTypesOneOfDirect_SubMessage but is nil && this != nil")
	}
	this2 := Subby(this)
	if !this2.Equal(Subby(*that1)) {
		return fmt.Errorf("SubMessage this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this *AllTypesOneOfDirect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return false
		}
	} else if this.TestOneof == nil {
		return false
	} else if !this.TestOneof.Equal(that1.TestOneof) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field1) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field2) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field3) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field4) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field5) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field6) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field7) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field7)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field8) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field8)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field9) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field9)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field10) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field10)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field11) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field11)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field12) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field12)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field13) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field13)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field14) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field14)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_Field15) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_Field15)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if !bytes.Equal(this, *that1) {
		return false
	}
	return true
}
func (this AllTypesOneOfDirect_SubMessage) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*AllTypesOneOfDirect_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOfDirect_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	this2 := Subby(this)
	if !this2.Equal(Subby(*that1)) {
		return false
	}
	return true
}
func (this *TwoOneofs) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs)
	if !ok {
		that2, ok := that.(TwoOneofs)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs but is not nil && this == nil")
	}
	if that1.One == nil {
		if this.One != nil {
			return fmt.Errorf("this.One != nil && that1.One == nil")
		}
	} else if this.One == nil {
		return fmt.Errorf("this.One == nil && that1.One != nil")
	} else if err := this.One.VerboseEqual(that1.One); err != nil {
		return err
	}
	if that1.Two == nil {
		if this.Two != nil {
			return fmt.Errorf("this.Two != nil && that1.Two == nil")
		}
	} else if this.Two == nil {
		return fmt.Errorf("this.Two == nil && that1.Two != nil")
	} else if err := this.Two.VerboseEqual(that1.Two); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TwoOneofs_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field1)
	if !ok {
		that2, ok := that.(TwoOneofs_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field1 but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	return nil
}
func (this *TwoOneofs_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field2)
	if !ok {
		that2, ok := that.(TwoOneofs_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field2 but is not nil && this == nil")
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	return nil
}
func (this *TwoOneofs_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field3)
	if !ok {
		that2, ok := that.(TwoOneofs_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field3")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field3 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field3 but is not nil && this == nil")
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *TwoOneofs_Field34) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field34)
	if !ok {
		that2, ok := that.(TwoOneofs_Field34)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field34")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field34 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field34 but is not nil && this == nil")
	}
	if this.Field34 != that1.Field34 {
		return fmt.Errorf("Field34 this(%v) Not Equal that(%v)", this.Field34, that1.Field34)
	}
	return nil
}
func (this *TwoOneofs_Field35) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field35)
	if !ok {
		that2, ok := that.(TwoOneofs_Field35)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field35")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field35 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field35 but is not nil && this == nil")
	}
	if !bytes.Equal(this.Field35, that1.Field35) {
		return fmt.Errorf("Field35 this(%v) Not Equal that(%v)", this.Field35, that1.Field35)
	}
	return nil
}
func (this *TwoOneofs_SubMessage2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofs_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_SubMessage2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_SubMessage2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_SubMessage2 but is not nil && this == nil")
	}
	if !this.SubMessage2.Equal(that1.SubMessage2) {
		return fmt.Errorf("SubMessage2 this(%v) Not Equal that(%v)", this.SubMessage2, that1.SubMessage2)
	}
	return nil
}
func (this *TwoOneofs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs)
	if !ok {
		that2, ok := that.(TwoOneofs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.One == nil {
		if this.One != nil {
			return false
		}
	} else if this.One == nil {
		return false
	} else if !this.One.Equal(that1.One) {
		return false
	}
	if that1.Two == nil {
		if this.Two != nil {
			return false
		}
	} else if this.Two == nil {
		return false
	} else if !this.Two.Equal(that1.Two) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TwoOneofs_Field1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs_Field1)
	if !ok {
		that2, ok := that.(TwoOneofs_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs_Field2)
	if !ok {
		that2, ok := that.(TwoOneofs_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field3) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs_Field3)
	if !ok {
		that2, ok := that.(TwoOneofs_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field34) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs_Field34)
	if !ok {
		that2, ok := that.(TwoOneofs_Field34)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field34 != that1.Field34 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field35) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs_Field35)
	if !ok {
		that2, ok := that.(TwoOneofs_Field35)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Field35, that1.Field35) {
		return false
	}
	return true
}
func (this *TwoOneofs_SubMessage2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofs_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofs_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SubMessage2.Equal(that1.SubMessage2) {
		return false
	}
	return true
}
func (this *TwoOneofsDirect) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect)
	if !ok {
		that2, ok := that.(TwoOneofsDirect)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofsDirect but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect but is not nil && this == nil")
	}
	if that1.One == nil {
		if this.One != nil {
			return fmt.Errorf("this.One != nil && that1.One == nil")
		}
	} else if this.One == nil {
		return fmt.Errorf("this.One == nil && that1.One != nil")
	} else if err := this.One.VerboseEqual(that1.One); err != nil {
		return err
	}
	if that1.Two == nil {
		if this.Two != nil {
			return fmt.Errorf("this.Two != nil && that1.Two == nil")
		}
	} else if this.Two == nil {
		return fmt.Errorf("this.Two == nil && that1.Two != nil")
	} else if err := this.Two.VerboseEqual(that1.Two); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this TwoOneofsDirect_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect_Field1)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect_Field1")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect_Field1 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this TwoOneofsDirect_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect_Field2)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect_Field2")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect_Field2 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this TwoOneofsDirect_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect_Field3)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect_Field3")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect_Field3 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this TwoOneofsDirect_Field34) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect_Field34)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field34)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect_Field34")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect_Field34 but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Field34 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this TwoOneofsDirect_Field35) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect_Field35)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field35)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect_Field35")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect_Field35 but is nil && this != nil")
	}
	if !bytes.Equal(this, *that1) {
		return fmt.Errorf("Field35 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this TwoOneofsDirect_SubMessage2) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofsDirect_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofsDirect_SubMessage2")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *TwoOneofsDirect_SubMessage2 but is nil && this != nil")
	}
	this2 := Subby(this)
	if !this2.Equal(Subby(*that1)) {
		return fmt.Errorf("SubMessage2 this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this *TwoOneofsDirect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwoOneofsDirect)
	if !ok {
		that2, ok := that.(TwoOneofsDirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.One == nil {
		if this.One != nil {
			return false
		}
	} else if this.One == nil {
		return false
	} else if !this.One.Equal(that1.One) {
		return false
	}
	if that1.Two == nil {
		if this.Two != nil {
			return false
		}
	} else if this.Two == nil {
		return false
	} else if !this.Two.Equal(that1.Two) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this TwoOneofsDirect_Field1) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*TwoOneofsDirect_Field1)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this TwoOneofsDirect_Field2) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*TwoOneofsDirect_Field2)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this TwoOneofsDirect_Field3) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*TwoOneofsDirect_Field3)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this TwoOneofsDirect_Field34) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*TwoOneofsDirect_Field34)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field34)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this TwoOneofsDirect_Field35) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*TwoOneofsDirect_Field35)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_Field35)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if !bytes.Equal(this, *that1) {
		return false
	}
	return true
}
func (this TwoOneofsDirect_SubMessage2) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*TwoOneofsDirect_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofsDirect_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	this2 := Subby(this)
	if !this2.Equal(Subby(*that1)) {
		return false
	}
	return true
}
func (this *CustomOneof) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof)
	if !ok {
		that2, ok := that.(CustomOneof)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof but is not nil && this == nil")
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return fmt.Errorf("this.Custom != nil && that1.Custom == nil")
		}
	} else if this.Custom == nil {
		return fmt.Errorf("this.Custom == nil && that1.Custom != nil")
	} else if err := this.Custom.VerboseEqual(that1.Custom); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomOneof_Stringy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_Stringy)
	if !ok {
		that2, ok := that.(CustomOneof_Stringy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_Stringy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_Stringy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_Stringy but is not nil && this == nil")
	}
	if this.Stringy != that1.Stringy {
		return fmt.Errorf("Stringy this(%v) Not Equal that(%v)", this.Stringy, that1.Stringy)
	}
	return nil
}
func (this *CustomOneof_CustomType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_CustomType)
	if !ok {
		that2, ok := that.(CustomOneof_CustomType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_CustomType")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_CustomType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_CustomType but is not nil && this == nil")
	}
	if !this.CustomType.Equal(that1.CustomType) {
		return fmt.Errorf("CustomType this(%v) Not Equal that(%v)", this.CustomType, that1.CustomType)
	}
	return nil
}
func (this *CustomOneof_CastType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_CastType)
	if !ok {
		that2, ok := that.(CustomOneof_CastType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_CastType")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_CastType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_CastType but is not nil && this == nil")
	}
	if this.CastType != that1.CastType {
		return fmt.Errorf("CastType this(%v) Not Equal that(%v)", this.CastType, that1.CastType)
	}
	return nil
}
func (this *CustomOneof_MyCustomName) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneof_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_MyCustomName")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_MyCustomName but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_MyCustomName but is not nil && this == nil")
	}
	if this.MyCustomName != that1.MyCustomName {
		return fmt.Errorf("MyCustomName this(%v) Not Equal that(%v)", this.MyCustomName, that1.MyCustomName)
	}
	return nil
}
func (this *CustomOneof) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomOneof)
	if !ok {
		that2, ok := that.(CustomOneof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return false
		}
	} else if this.Custom == nil {
		return false
	} else if !this.Custom.Equal(that1.Custom) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomOneof_Stringy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomOneof_Stringy)
	if !ok {
		that2, ok := that.(CustomOneof_Stringy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Stringy != that1.Stringy {
		return false
	}
	return true
}
func (this *CustomOneof_CustomType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomOneof_CustomType)
	if !ok {
		that2, ok := that.(CustomOneof_CustomType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomType.Equal(that1.CustomType) {
		return false
	}
	return true
}
func (this *CustomOneof_CastType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomOneof_CastType)
	if !ok {
		that2, ok := that.(CustomOneof_CastType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CastType != that1.CastType {
		return false
	}
	return true
}
func (this *CustomOneof_MyCustomName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomOneof_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneof_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MyCustomName != that1.MyCustomName {
		return false
	}
	return true
}
func (this *CustomOneofDirect) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneofDirect)
	if !ok {
		that2, ok := that.(CustomOneofDirect)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneofDirect")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneofDirect but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneofDirect but is not nil && this == nil")
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return fmt.Errorf("this.Custom != nil && that1.Custom == nil")
		}
	} else if this.Custom == nil {
		return fmt.Errorf("this.Custom == nil && that1.Custom != nil")
	} else if err := this.Custom.VerboseEqual(that1.Custom); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this CustomOneofDirect_Stringy) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneofDirect_Stringy)
	if !ok {
		that2, ok := that.(CustomOneofDirect_Stringy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneofDirect_Stringy")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *CustomOneofDirect_Stringy but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("Stringy this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this CustomOneofDirect_CustomType) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneofDirect_CustomType)
	if !ok {
		that2, ok := that.(CustomOneofDirect_CustomType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneofDirect_CustomType")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *CustomOneofDirect_CustomType but is nil && this != nil")
	}
	if !this.Equal(that1) {
		return fmt.Errorf("CustomType this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this CustomOneofDirect_CastType) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneofDirect_CastType)
	if !ok {
		that2, ok := that.(CustomOneofDirect_CastType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneofDirect_CastType")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *CustomOneofDirect_CastType but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("CastType this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this CustomOneofDirect_MyCustomName) VerboseEqual(that interface{}) error {
	if that == nil {
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneofDirect_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneofDirect_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneofDirect_MyCustomName")
		}
	}
	if that1 == nil {
		return fmt.Errorf("that is type *CustomOneofDirect_MyCustomName but is nil && this != nil")
	}
	if this != *that1 {
		return fmt.Errorf("MyCustomName this(%v) Not Equal that(%v)", this, that1)
	}
	return nil
}
func (this *CustomOneofDirect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomOneofDirect)
	if !ok {
		that2, ok := that.(CustomOneofDirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return false
		}
	} else if this.Custom == nil {
		return false
	} else if !this.Custom.Equal(that1.Custom) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this CustomOneofDirect_Stringy) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*CustomOneofDirect_Stringy)
	if !ok {
		that2, ok := that.(CustomOneofDirect_Stringy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this CustomOneofDirect_CustomType) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*CustomOneofDirect_CustomType)
	if !ok {
		that2, ok := that.(CustomOneofDirect_CustomType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if !this.Equal(that1) {
		return false
	}
	return true
}
func (this CustomOneofDirect_CastType) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*CustomOneofDirect_CastType)
	if !ok {
		that2, ok := that.(CustomOneofDirect_CastType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this CustomOneofDirect_MyCustomName) Equal(that interface{}) bool {
	if that == nil {
		return false
	}

	that1, ok := that.(*CustomOneofDirect_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneofDirect_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return false
	}
	if this != *that1 {
		return false
	}
	return true
}
func (this *Subby) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&one.Subby{")
	if this.Sub != nil {
		s = append(s, "Sub: "+valueToGoStringOne(this.Sub, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllTypesOneOf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&one.AllTypesOneOf{")
	if this.TestOneof != nil {
		s = append(s, "TestOneof: "+fmt.Sprintf("%#v", this.TestOneof)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllTypesOneOf_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field4{` +
		`Field4:` + fmt.Sprintf("%#v", this.Field4) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field5) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field5{` +
		`Field5:` + fmt.Sprintf("%#v", this.Field5) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field6{` +
		`Field6:` + fmt.Sprintf("%#v", this.Field6) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field7) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field7{` +
		`Field7:` + fmt.Sprintf("%#v", this.Field7) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field8) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field8{` +
		`Field8:` + fmt.Sprintf("%#v", this.Field8) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field9) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field9{` +
		`Field9:` + fmt.Sprintf("%#v", this.Field9) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field10) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field10{` +
		`Field10:` + fmt.Sprintf("%#v", this.Field10) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field11) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field11{` +
		`Field11:` + fmt.Sprintf("%#v", this.Field11) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field12) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field12{` +
		`Field12:` + fmt.Sprintf("%#v", this.Field12) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field13) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field13{` +
		`Field13:` + fmt.Sprintf("%#v", this.Field13) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field14) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field14{` +
		`Field14:` + fmt.Sprintf("%#v", this.Field14) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field15) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field15{` +
		`Field15:` + fmt.Sprintf("%#v", this.Field15) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_SubMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_SubMessage{` +
		`SubMessage:` + fmt.Sprintf("%#v", this.SubMessage) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&one.AllTypesOneOfDirect{")
	if this.TestOneof != nil {
		s = append(s, "TestOneof: "+fmt.Sprintf("%#v", this.TestOneof)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllTypesOneOfDirect_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field4{` +
		`Field4:` + fmt.Sprintf("%#v", this.Field4) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field5) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field5{` +
		`Field5:` + fmt.Sprintf("%#v", this.Field5) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field6{` +
		`Field6:` + fmt.Sprintf("%#v", this.Field6) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field7) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field7{` +
		`Field7:` + fmt.Sprintf("%#v", this.Field7) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field8) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field8{` +
		`Field8:` + fmt.Sprintf("%#v", this.Field8) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field9) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field9{` +
		`Field9:` + fmt.Sprintf("%#v", this.Field9) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field10) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field10{` +
		`Field10:` + fmt.Sprintf("%#v", this.Field10) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field11) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field11{` +
		`Field11:` + fmt.Sprintf("%#v", this.Field11) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field12) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field12{` +
		`Field12:` + fmt.Sprintf("%#v", this.Field12) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field13) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field13{` +
		`Field13:` + fmt.Sprintf("%#v", this.Field13) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field14) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field14{` +
		`Field14:` + fmt.Sprintf("%#v", this.Field14) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_Field15) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_Field15{` +
		`Field15:` + fmt.Sprintf("%#v", this.Field15) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOfDirect_SubMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOfDirect_SubMessage{` +
		`SubMessage:` + fmt.Sprintf("%#v", this.SubMessage) + `}`}, ", ")
	return s
}
func (this *TwoOneofs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&one.TwoOneofs{")
	if this.One != nil {
		s = append(s, "One: "+fmt.Sprintf("%#v", this.One)+",\n")
	}
	if this.Two != nil {
		s = append(s, "Two: "+fmt.Sprintf("%#v", this.Two)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TwoOneofs_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field34) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field34{` +
		`Field34:` + fmt.Sprintf("%#v", this.Field34) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field35) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field35{` +
		`Field35:` + fmt.Sprintf("%#v", this.Field35) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_SubMessage2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_SubMessage2{` +
		`SubMessage2:` + fmt.Sprintf("%#v", this.SubMessage2) + `}`}, ", ")
	return s
}
func (this *TwoOneofsDirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&one.TwoOneofsDirect{")
	if this.One != nil {
		s = append(s, "One: "+fmt.Sprintf("%#v", this.One)+",\n")
	}
	if this.Two != nil {
		s = append(s, "Two: "+fmt.Sprintf("%#v", this.Two)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TwoOneofsDirect_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofsDirect_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *TwoOneofsDirect_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofsDirect_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *TwoOneofsDirect_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofsDirect_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *TwoOneofsDirect_Field34) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofsDirect_Field34{` +
		`Field34:` + fmt.Sprintf("%#v", this.Field34) + `}`}, ", ")
	return s
}
func (this *TwoOneofsDirect_Field35) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofsDirect_Field35{` +
		`Field35:` + fmt.Sprintf("%#v", this.Field35) + `}`}, ", ")
	return s
}
func (this *TwoOneofsDirect_SubMessage2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofsDirect_SubMessage2{` +
		`SubMessage2:` + fmt.Sprintf("%#v", this.SubMessage2) + `}`}, ", ")
	return s
}
func (this *CustomOneof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&one.CustomOneof{")
	if this.Custom != nil {
		s = append(s, "Custom: "+fmt.Sprintf("%#v", this.Custom)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomOneof_Stringy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_Stringy{` +
		`Stringy:` + fmt.Sprintf("%#v", this.Stringy) + `}`}, ", ")
	return s
}
func (this *CustomOneof_CustomType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_CustomType{` +
		`CustomType:` + fmt.Sprintf("%#v", this.CustomType) + `}`}, ", ")
	return s
}
func (this *CustomOneof_CastType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_CastType{` +
		`CastType:` + fmt.Sprintf("%#v", this.CastType) + `}`}, ", ")
	return s
}
func (this *CustomOneof_MyCustomName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_MyCustomName{` +
		`MyCustomName:` + fmt.Sprintf("%#v", this.MyCustomName) + `}`}, ", ")
	return s
}
func (this *CustomOneofDirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&one.CustomOneofDirect{")
	if this.Custom != nil {
		s = append(s, "Custom: "+fmt.Sprintf("%#v", this.Custom)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomOneofDirect_Stringy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneofDirect_Stringy{` +
		`Stringy:` + fmt.Sprintf("%#v", this.Stringy) + `}`}, ", ")
	return s
}
func (this *CustomOneofDirect_CustomType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneofDirect_CustomType{` +
		`CustomType:` + fmt.Sprintf("%#v", this.CustomType) + `}`}, ", ")
	return s
}
func (this *CustomOneofDirect_CastType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneofDirect_CastType{` +
		`CastType:` + fmt.Sprintf("%#v", this.CastType) + `}`}, ", ")
	return s
}
func (this *CustomOneofDirect_MyCustomName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneofDirect_MyCustomName{` +
		`MyCustomName:` + fmt.Sprintf("%#v", this.MyCustomName) + `}`}, ", ")
	return s
}
func valueToGoStringOne(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringOne(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Subby) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Subby) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sub != nil {
		data[i] = 0xa
		i++
		i = encodeVarintOne(data, i, uint64(len(*m.Sub)))
		i += copy(data[i:], *m.Sub)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllTypesOneOf) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AllTypesOneOf) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TestOneof != nil {
		nn1, err := m.TestOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllTypesOneOf_Field1) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x9
	i++
	i = encodeFixed64One(data, i, uint64(math.Float64bits(float64(m.Field1))))
	return i, nil
}
func (m *AllTypesOneOf_Field2) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x15
	i++
	i = encodeFixed32One(data, i, uint32(math.Float32bits(float32(m.Field2))))
	return i, nil
}
func (m *AllTypesOneOf_Field3) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x18
	i++
	i = encodeVarintOne(data, i, uint64(m.Field3))
	return i, nil
}
func (m *AllTypesOneOf_Field4) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x20
	i++
	i = encodeVarintOne(data, i, uint64(m.Field4))
	return i, nil
}
func (m *AllTypesOneOf_Field5) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x28
	i++
	i = encodeVarintOne(data, i, uint64(m.Field5))
	return i, nil
}
func (m *AllTypesOneOf_Field6) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x30
	i++
	i = encodeVarintOne(data, i, uint64(m.Field6))
	return i, nil
}
func (m *AllTypesOneOf_Field7) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x38
	i++
	i = encodeVarintOne(data, i, uint64((uint32(m.Field7)<<1)^uint32((m.Field7>>31))))
	return i, nil
}
func (m *AllTypesOneOf_Field8) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x40
	i++
	i = encodeVarintOne(data, i, uint64((uint64(m.Field8)<<1)^uint64((m.Field8>>63))))
	return i, nil
}
func (m *AllTypesOneOf_Field9) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x4d
	i++
	i = encodeFixed32One(data, i, uint32(m.Field9))
	return i, nil
}
func (m *AllTypesOneOf_Field10) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x55
	i++
	i = encodeFixed32One(data, i, uint32(m.Field10))
	return i, nil
}
func (m *AllTypesOneOf_Field11) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x59
	i++
	i = encodeFixed64One(data, i, uint64(m.Field11))
	return i, nil
}
func (m *AllTypesOneOf_Field12) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x61
	i++
	i = encodeFixed64One(data, i, uint64(m.Field12))
	return i, nil
}
func (m *AllTypesOneOf_Field13) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x68
	i++
	if m.Field13 {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	return i, nil
}
func (m *AllTypesOneOf_Field14) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x72
	i++
	i = encodeVarintOne(data, i, uint64(len(m.Field14)))
	i += copy(data[i:], m.Field14)
	return i, nil
}
func (m *AllTypesOneOf_Field15) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Field15 != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintOne(data, i, uint64(len(m.Field15)))
		i += copy(data[i:], m.Field15)
	}
	return i, nil
}
func (m *AllTypesOneOf_SubMessage) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SubMessage != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOne(data, i, uint64(m.SubMessage.Size()))
		n2, err := m.SubMessage.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *AllTypesOneOfDirect) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AllTypesOneOfDirect) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TestOneof != nil {
		nn3, err := m.TestOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m AllTypesOneOfDirect_Field1) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := float64(m)
	data[i] = 0x9
	i++
	i = encodeFixed64One(data, i, uint64(math.Float64bits(float64(m2))))
	return i, nil
}
func (m AllTypesOneOfDirect_Field2) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := float32(m)
	data[i] = 0x15
	i++
	i = encodeFixed32One(data, i, uint32(math.Float32bits(float32(m2))))
	return i, nil
}
func (m AllTypesOneOfDirect_Field3) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int32(m)
	data[i] = 0x18
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field4) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int64(m)
	data[i] = 0x20
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field5) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := uint32(m)
	data[i] = 0x28
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field6) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := uint64(m)
	data[i] = 0x30
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field7) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int32(m)
	data[i] = 0x38
	i++
	i = encodeVarintOne(data, i, uint64((uint32(m2)<<1)^uint32((m2>>31))))
	return i, nil
}
func (m AllTypesOneOfDirect_Field8) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int64(m)
	data[i] = 0x40
	i++
	i = encodeVarintOne(data, i, uint64((uint64(m2)<<1)^uint64((m2>>63))))
	return i, nil
}
func (m AllTypesOneOfDirect_Field9) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := uint32(m)
	data[i] = 0x4d
	i++
	i = encodeFixed32One(data, i, uint32(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field10) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int32(m)
	data[i] = 0x55
	i++
	i = encodeFixed32One(data, i, uint32(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field11) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := uint64(m)
	data[i] = 0x59
	i++
	i = encodeFixed64One(data, i, uint64(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field12) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int64(m)
	data[i] = 0x61
	i++
	i = encodeFixed64One(data, i, uint64(m2))
	return i, nil
}
func (m AllTypesOneOfDirect_Field13) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := bool(m)
	data[i] = 0x68
	i++
	if m2 {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	return i, nil
}
func (m AllTypesOneOfDirect_Field14) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := string(m)
	data[i] = 0x72
	i++
	i = encodeVarintOne(data, i, uint64(len(m2)))
	i += copy(data[i:], m2)
	return i, nil
}
func (m AllTypesOneOfDirect_Field15) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := []byte(m)
	data[i] = 0x7a
	i++
	i = encodeVarintOne(data, i, uint64(len(m2)))
	i += copy(data[i:], m2)
	return i, nil
}
func (m AllTypesOneOfDirect_SubMessage) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := Subby(m)
	data[i] = 0x82
	i++
	data[i] = 0x1
	i++
	i = encodeVarintOne(data, i, uint64(m2.Size()))
	n4, err := m2.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}
func (m *TwoOneofs) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TwoOneofs) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.One != nil {
		nn5, err := m.One.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.Two != nil {
		nn6, err := m.Two.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TwoOneofs_Field1) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x9
	i++
	i = encodeFixed64One(data, i, uint64(math.Float64bits(float64(m.Field1))))
	return i, nil
}
func (m *TwoOneofs_Field2) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x15
	i++
	i = encodeFixed32One(data, i, uint32(math.Float32bits(float32(m.Field2))))
	return i, nil
}
func (m *TwoOneofs_Field3) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x18
	i++
	i = encodeVarintOne(data, i, uint64(m.Field3))
	return i, nil
}
func (m *TwoOneofs_Field34) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x92
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(len(m.Field34)))
	i += copy(data[i:], m.Field34)
	return i, nil
}
func (m *TwoOneofs_Field35) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Field35 != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOne(data, i, uint64(len(m.Field35)))
		i += copy(data[i:], m.Field35)
	}
	return i, nil
}
func (m *TwoOneofs_SubMessage2) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SubMessage2 != nil {
		data[i] = 0xa2
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOne(data, i, uint64(m.SubMessage2.Size()))
		n7, err := m.SubMessage2.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *TwoOneofsDirect) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TwoOneofsDirect) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.One != nil {
		nn8, err := m.One.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if m.Two != nil {
		nn9, err := m.Two.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m TwoOneofsDirect_Field1) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := float64(m)
	data[i] = 0x9
	i++
	i = encodeFixed64One(data, i, uint64(math.Float64bits(float64(m2))))
	return i, nil
}
func (m TwoOneofsDirect_Field2) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := float32(m)
	data[i] = 0x15
	i++
	i = encodeFixed32One(data, i, uint32(math.Float32bits(float32(m2))))
	return i, nil
}
func (m TwoOneofsDirect_Field3) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int32(m)
	data[i] = 0x18
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func (m TwoOneofsDirect_Field34) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := string(m)
	data[i] = 0x92
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(len(m2)))
	i += copy(data[i:], m2)
	return i, nil
}
func (m TwoOneofsDirect_Field35) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := []byte(m)
	data[i] = 0x9a
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(len(m2)))
	i += copy(data[i:], m2)
	return i, nil
}
func (m TwoOneofsDirect_SubMessage2) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := Subby(m)
	data[i] = 0xa2
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m2.Size()))
	n10, err := m2.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}
func (m *CustomOneof) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomOneof) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Custom != nil {
		nn11, err := m.Custom.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CustomOneof_Stringy) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x92
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(len(m.Stringy)))
	i += copy(data[i:], m.Stringy)
	return i, nil
}
func (m *CustomOneof_CustomType) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x9a
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m.CustomType.Size()))
	n12, err := m.CustomType.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}
func (m *CustomOneof_CastType) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0xa0
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m.CastType))
	return i, nil
}
func (m *CustomOneof_MyCustomName) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0xa8
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m.MyCustomName))
	return i, nil
}
func (m *CustomOneofDirect) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomOneofDirect) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Custom != nil {
		nn13, err := m.Custom.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m CustomOneofDirect_Stringy) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := string(m)
	data[i] = 0x92
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(len(m2)))
	i += copy(data[i:], m2)
	return i, nil
}
func (m CustomOneofDirect_CustomType) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := github_com_gogo_protobuf_test_custom.Uint128(m)
	data[i] = 0x9a
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m2.Size()))
	n14, err := m2.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}
func (m CustomOneofDirect_CastType) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := github_com_gogo_protobuf_test_casttype.MyUint64Type(m)
	data[i] = 0xa0
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func (m CustomOneofDirect_MyCustomName) MarshalTo(data []byte) (int, error) {
	i := 0
	m2 := int64(m)
	data[i] = 0xa8
	i++
	data[i] = 0x2
	i++
	i = encodeVarintOne(data, i, uint64(m2))
	return i, nil
}
func encodeFixed64One(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32One(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOne(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSubby(r randyOne, easy bool) *Subby {
	this := &Subby{}
	if r.Intn(10) != 0 {
		v1 := randStringOne(r)
		this.Sub = &v1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 2)
	}
	return this
}

func NewPopulatedAllTypesOneOf(r randyOne, easy bool) *AllTypesOneOf {
	this := &AllTypesOneOf{}
	oneofNumber_TestOneof := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}[r.Intn(16)]
	switch oneofNumber_TestOneof {
	case 1:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field1(r, easy)
	case 2:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field2(r, easy)
	case 3:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field3(r, easy)
	case 4:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field4(r, easy)
	case 5:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field5(r, easy)
	case 6:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field6(r, easy)
	case 7:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field7(r, easy)
	case 8:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field8(r, easy)
	case 9:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field9(r, easy)
	case 10:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field10(r, easy)
	case 11:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field11(r, easy)
	case 12:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field12(r, easy)
	case 13:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field13(r, easy)
	case 14:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field14(r, easy)
	case 15:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field15(r, easy)
	case 16:
		this.TestOneof = NewPopulatedAllTypesOneOf_SubMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 17)
	}
	return this
}

func NewPopulatedAllTypesOneOf_Field1(r randyOne, easy bool) *AllTypesOneOf_Field1 {
	this := &AllTypesOneOf_Field1{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field2(r randyOne, easy bool) *AllTypesOneOf_Field2 {
	this := &AllTypesOneOf_Field2{}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field3(r randyOne, easy bool) *AllTypesOneOf_Field3 {
	this := &AllTypesOneOf_Field3{}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field4(r randyOne, easy bool) *AllTypesOneOf_Field4 {
	this := &AllTypesOneOf_Field4{}
	this.Field4 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field4 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field5(r randyOne, easy bool) *AllTypesOneOf_Field5 {
	this := &AllTypesOneOf_Field5{}
	this.Field5 = uint32(r.Uint32())
	return this
}
func NewPopulatedAllTypesOneOf_Field6(r randyOne, easy bool) *AllTypesOneOf_Field6 {
	this := &AllTypesOneOf_Field6{}
	this.Field6 = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedAllTypesOneOf_Field7(r randyOne, easy bool) *AllTypesOneOf_Field7 {
	this := &AllTypesOneOf_Field7{}
	this.Field7 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field7 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field8(r randyOne, easy bool) *AllTypesOneOf_Field8 {
	this := &AllTypesOneOf_Field8{}
	this.Field8 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field8 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field9(r randyOne, easy bool) *AllTypesOneOf_Field9 {
	this := &AllTypesOneOf_Field9{}
	this.Field9 = uint32(r.Uint32())
	return this
}
func NewPopulatedAllTypesOneOf_Field10(r randyOne, easy bool) *AllTypesOneOf_Field10 {
	this := &AllTypesOneOf_Field10{}
	this.Field10 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field10 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field11(r randyOne, easy bool) *AllTypesOneOf_Field11 {
	this := &AllTypesOneOf_Field11{}
	this.Field11 = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedAllTypesOneOf_Field12(r randyOne, easy bool) *AllTypesOneOf_Field12 {
	this := &AllTypesOneOf_Field12{}
	this.Field12 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field12 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field13(r randyOne, easy bool) *AllTypesOneOf_Field13 {
	this := &AllTypesOneOf_Field13{}
	this.Field13 = bool(bool(r.Intn(2) == 0))
	return this
}
func NewPopulatedAllTypesOneOf_Field14(r randyOne, easy bool) *AllTypesOneOf_Field14 {
	this := &AllTypesOneOf_Field14{}
	this.Field14 = randStringOne(r)
	return this
}
func NewPopulatedAllTypesOneOf_Field15(r randyOne, easy bool) *AllTypesOneOf_Field15 {
	this := &AllTypesOneOf_Field15{}
	v2 := r.Intn(100)
	this.Field15 = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedAllTypesOneOf_SubMessage(r randyOne, easy bool) *AllTypesOneOf_SubMessage {
	this := &AllTypesOneOf_SubMessage{}
	this.SubMessage = NewPopulatedSubby(r, easy)
	return this
}
func NewPopulatedAllTypesOneOfDirect(r randyOne, easy bool) *AllTypesOneOfDirect {
	this := &AllTypesOneOfDirect{}
	oneofNumber_TestOneof := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}[r.Intn(16)]
	switch oneofNumber_TestOneof {
	case 1:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field1(r, easy)
	case 2:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field2(r, easy)
	case 3:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field3(r, easy)
	case 4:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field4(r, easy)
	case 5:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field5(r, easy)
	case 6:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field6(r, easy)
	case 7:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field7(r, easy)
	case 8:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field8(r, easy)
	case 9:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field9(r, easy)
	case 10:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field10(r, easy)
	case 11:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field11(r, easy)
	case 12:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field12(r, easy)
	case 13:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field13(r, easy)
	case 14:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field14(r, easy)
	case 15:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_Field15(r, easy)
	case 16:
		this.TestOneof = NewPopulatedAllTypesOneOfDirect_SubMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 17)
	}
	return this
}

func NewPopulatedAllTypesOneOfDirect_Field1(r randyOne, easy bool) AllTypesOneOfDirect_Field1 {
	var this float64
	this = float64(r.Float64())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field1(this)
}
func NewPopulatedAllTypesOneOfDirect_Field2(r randyOne, easy bool) AllTypesOneOfDirect_Field2 {
	var this float32
	this = float32(r.Float32())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field2(this)
}
func NewPopulatedAllTypesOneOfDirect_Field3(r randyOne, easy bool) AllTypesOneOfDirect_Field3 {
	var this int32
	this = int32(r.Int31())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field3(this)
}
func NewPopulatedAllTypesOneOfDirect_Field4(r randyOne, easy bool) AllTypesOneOfDirect_Field4 {
	var this int64
	this = int64(r.Int63())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field4(this)
}
func NewPopulatedAllTypesOneOfDirect_Field5(r randyOne, easy bool) AllTypesOneOfDirect_Field5 {
	var this uint32
	this = uint32(r.Uint32())
	return AllTypesOneOfDirect_Field5(this)
}
func NewPopulatedAllTypesOneOfDirect_Field6(r randyOne, easy bool) AllTypesOneOfDirect_Field6 {
	var this uint64
	this = uint64(uint64(r.Uint32()))
	return AllTypesOneOfDirect_Field6(this)
}
func NewPopulatedAllTypesOneOfDirect_Field7(r randyOne, easy bool) AllTypesOneOfDirect_Field7 {
	var this int32
	this = int32(r.Int31())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field7(this)
}
func NewPopulatedAllTypesOneOfDirect_Field8(r randyOne, easy bool) AllTypesOneOfDirect_Field8 {
	var this int64
	this = int64(r.Int63())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field8(this)
}
func NewPopulatedAllTypesOneOfDirect_Field9(r randyOne, easy bool) AllTypesOneOfDirect_Field9 {
	var this uint32
	this = uint32(r.Uint32())
	return AllTypesOneOfDirect_Field9(this)
}
func NewPopulatedAllTypesOneOfDirect_Field10(r randyOne, easy bool) AllTypesOneOfDirect_Field10 {
	var this int32
	this = int32(r.Int31())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field10(this)
}
func NewPopulatedAllTypesOneOfDirect_Field11(r randyOne, easy bool) AllTypesOneOfDirect_Field11 {
	var this uint64
	this = uint64(uint64(r.Uint32()))
	return AllTypesOneOfDirect_Field11(this)
}
func NewPopulatedAllTypesOneOfDirect_Field12(r randyOne, easy bool) AllTypesOneOfDirect_Field12 {
	var this int64
	this = int64(r.Int63())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return AllTypesOneOfDirect_Field12(this)
}
func NewPopulatedAllTypesOneOfDirect_Field13(r randyOne, easy bool) AllTypesOneOfDirect_Field13 {
	var this bool
	this = bool(bool(r.Intn(2) == 0))
	return AllTypesOneOfDirect_Field13(this)
}
func NewPopulatedAllTypesOneOfDirect_Field14(r randyOne, easy bool) AllTypesOneOfDirect_Field14 {
	var this string
	this = randStringOne(r)
	return AllTypesOneOfDirect_Field14(this)
}
func NewPopulatedAllTypesOneOfDirect_Field15(r randyOne, easy bool) AllTypesOneOfDirect_Field15 {
	var this []byte
	v3 := r.Intn(100)
	this = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this[i] = byte(r.Intn(256))
	}
	return AllTypesOneOfDirect_Field15(this)
}
func NewPopulatedAllTypesOneOfDirect_SubMessage(r randyOne, easy bool) AllTypesOneOfDirect_SubMessage {
	var this Subby
	v4 := NewPopulatedSubby(r, easy)
	this = *v4
	return AllTypesOneOfDirect_SubMessage(this)
}
func NewPopulatedTwoOneofs(r randyOne, easy bool) *TwoOneofs {
	this := &TwoOneofs{}
	oneofNumber_One := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_One {
	case 1:
		this.One = NewPopulatedTwoOneofs_Field1(r, easy)
	case 2:
		this.One = NewPopulatedTwoOneofs_Field2(r, easy)
	case 3:
		this.One = NewPopulatedTwoOneofs_Field3(r, easy)
	}
	oneofNumber_Two := []int32{34, 35, 36}[r.Intn(3)]
	switch oneofNumber_Two {
	case 34:
		this.Two = NewPopulatedTwoOneofs_Field34(r, easy)
	case 35:
		this.Two = NewPopulatedTwoOneofs_Field35(r, easy)
	case 36:
		this.Two = NewPopulatedTwoOneofs_SubMessage2(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 37)
	}
	return this
}

func NewPopulatedTwoOneofs_Field1(r randyOne, easy bool) *TwoOneofs_Field1 {
	this := &TwoOneofs_Field1{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	return this
}
func NewPopulatedTwoOneofs_Field2(r randyOne, easy bool) *TwoOneofs_Field2 {
	this := &TwoOneofs_Field2{}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	return this
}
func NewPopulatedTwoOneofs_Field3(r randyOne, easy bool) *TwoOneofs_Field3 {
	this := &TwoOneofs_Field3{}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	return this
}
func NewPopulatedTwoOneofs_Field34(r randyOne, easy bool) *TwoOneofs_Field34 {
	this := &TwoOneofs_Field34{}
	this.Field34 = randStringOne(r)
	return this
}
func NewPopulatedTwoOneofs_Field35(r randyOne, easy bool) *TwoOneofs_Field35 {
	this := &TwoOneofs_Field35{}
	v5 := r.Intn(100)
	this.Field35 = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Field35[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedTwoOneofs_SubMessage2(r randyOne, easy bool) *TwoOneofs_SubMessage2 {
	this := &TwoOneofs_SubMessage2{}
	this.SubMessage2 = NewPopulatedSubby(r, easy)
	return this
}
func NewPopulatedTwoOneofsDirect(r randyOne, easy bool) *TwoOneofsDirect {
	this := &TwoOneofsDirect{}
	oneofNumber_One := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_One {
	case 1:
		this.One = NewPopulatedTwoOneofsDirect_Field1(r, easy)
	case 2:
		this.One = NewPopulatedTwoOneofsDirect_Field2(r, easy)
	case 3:
		this.One = NewPopulatedTwoOneofsDirect_Field3(r, easy)
	}
	oneofNumber_Two := []int32{34, 35, 36}[r.Intn(3)]
	switch oneofNumber_Two {
	case 34:
		this.Two = NewPopulatedTwoOneofsDirect_Field34(r, easy)
	case 35:
		this.Two = NewPopulatedTwoOneofsDirect_Field35(r, easy)
	case 36:
		this.Two = NewPopulatedTwoOneofsDirect_SubMessage2(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 37)
	}
	return this
}

func NewPopulatedTwoOneofsDirect_Field1(r randyOne, easy bool) TwoOneofsDirect_Field1 {
	var this float64
	this = float64(r.Float64())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return TwoOneofsDirect_Field1(this)
}
func NewPopulatedTwoOneofsDirect_Field2(r randyOne, easy bool) TwoOneofsDirect_Field2 {
	var this float32
	this = float32(r.Float32())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return TwoOneofsDirect_Field2(this)
}
func NewPopulatedTwoOneofsDirect_Field3(r randyOne, easy bool) TwoOneofsDirect_Field3 {
	var this int32
	this = int32(r.Int31())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return TwoOneofsDirect_Field3(this)
}
func NewPopulatedTwoOneofsDirect_Field34(r randyOne, easy bool) TwoOneofsDirect_Field34 {
	var this string
	this = randStringOne(r)
	return TwoOneofsDirect_Field34(this)
}
func NewPopulatedTwoOneofsDirect_Field35(r randyOne, easy bool) TwoOneofsDirect_Field35 {
	var this []byte
	v6 := r.Intn(100)
	this = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this[i] = byte(r.Intn(256))
	}
	return TwoOneofsDirect_Field35(this)
}
func NewPopulatedTwoOneofsDirect_SubMessage2(r randyOne, easy bool) TwoOneofsDirect_SubMessage2 {
	var this Subby
	v7 := NewPopulatedSubby(r, easy)
	this = *v7
	return TwoOneofsDirect_SubMessage2(this)
}
func NewPopulatedCustomOneof(r randyOne, easy bool) *CustomOneof {
	this := &CustomOneof{}
	oneofNumber_Custom := []int32{34, 35, 36, 37}[r.Intn(4)]
	switch oneofNumber_Custom {
	case 34:
		this.Custom = NewPopulatedCustomOneof_Stringy(r, easy)
	case 35:
		this.Custom = NewPopulatedCustomOneof_CustomType(r, easy)
	case 36:
		this.Custom = NewPopulatedCustomOneof_CastType(r, easy)
	case 37:
		this.Custom = NewPopulatedCustomOneof_MyCustomName(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 38)
	}
	return this
}

func NewPopulatedCustomOneof_Stringy(r randyOne, easy bool) *CustomOneof_Stringy {
	this := &CustomOneof_Stringy{}
	this.Stringy = randStringOne(r)
	return this
}
func NewPopulatedCustomOneof_CustomType(r randyOne, easy bool) *CustomOneof_CustomType {
	this := &CustomOneof_CustomType{}
	v8 := github_com_gogo_protobuf_test_custom.NewPopulatedUint128(r)
	this.CustomType = *v8
	return this
}
func NewPopulatedCustomOneof_CastType(r randyOne, easy bool) *CustomOneof_CastType {
	this := &CustomOneof_CastType{}
	this.CastType = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
	return this
}
func NewPopulatedCustomOneof_MyCustomName(r randyOne, easy bool) *CustomOneof_MyCustomName {
	this := &CustomOneof_MyCustomName{}
	this.MyCustomName = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MyCustomName *= -1
	}
	return this
}
func NewPopulatedCustomOneofDirect(r randyOne, easy bool) *CustomOneofDirect {
	this := &CustomOneofDirect{}
	oneofNumber_Custom := []int32{34, 35, 36, 37}[r.Intn(4)]
	switch oneofNumber_Custom {
	case 34:
		this.Custom = NewPopulatedCustomOneofDirect_Stringy(r, easy)
	case 35:
		this.Custom = NewPopulatedCustomOneofDirect_CustomType(r, easy)
	case 36:
		this.Custom = NewPopulatedCustomOneofDirect_CastType(r, easy)
	case 37:
		this.Custom = NewPopulatedCustomOneofDirect_MyCustomName(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 38)
	}
	return this
}

func NewPopulatedCustomOneofDirect_Stringy(r randyOne, easy bool) CustomOneofDirect_Stringy {
	var this string
	this = randStringOne(r)
	return CustomOneofDirect_Stringy(this)
}
func NewPopulatedCustomOneofDirect_CustomType(r randyOne, easy bool) CustomOneofDirect_CustomType {
	var this github_com_gogo_protobuf_test_custom.Uint128
	v9 := github_com_gogo_protobuf_test_custom.NewPopulatedUint128(r)
	this = *v9
	return CustomOneofDirect_CustomType(this)
}
func NewPopulatedCustomOneofDirect_CastType(r randyOne, easy bool) CustomOneofDirect_CastType {
	var this github_com_gogo_protobuf_test_casttype.MyUint64Type
	this = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
	return CustomOneofDirect_CastType(this)
}
func NewPopulatedCustomOneofDirect_MyCustomName(r randyOne, easy bool) CustomOneofDirect_MyCustomName {
	var this int64
	this = int64(r.Int63())
	if r.Intn(2) == 0 {
		this *= -1
	}
	return CustomOneofDirect_MyCustomName(this)
}

type randyOne interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOne(r randyOne) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOne(r randyOne) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneOne(r)
	}
	return string(tmps)
}
func randUnrecognizedOne(r randyOne, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldOne(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldOne(data []byte, r randyOne, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateOne(data, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		data = encodeVarintPopulateOne(data, uint64(v11))
	case 1:
		data = encodeVarintPopulateOne(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateOne(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateOne(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateOne(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateOne(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Subby) Size() (n int) {
	var l int
	_ = l
	if m.Sub != nil {
		l = len(*m.Sub)
		n += 1 + l + sovOne(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllTypesOneOf) Size() (n int) {
	var l int
	_ = l
	if m.TestOneof != nil {
		n += m.TestOneof.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllTypesOneOf_Field1) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *AllTypesOneOf_Field2) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *AllTypesOneOf_Field3) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field3))
	return n
}
func (m *AllTypesOneOf_Field4) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field4))
	return n
}
func (m *AllTypesOneOf_Field5) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field5))
	return n
}
func (m *AllTypesOneOf_Field6) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field6))
	return n
}
func (m *AllTypesOneOf_Field7) Size() (n int) {
	var l int
	_ = l
	n += 1 + sozOne(uint64(m.Field7))
	return n
}
func (m *AllTypesOneOf_Field8) Size() (n int) {
	var l int
	_ = l
	n += 1 + sozOne(uint64(m.Field8))
	return n
}
func (m *AllTypesOneOf_Field9) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *AllTypesOneOf_Field10) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *AllTypesOneOf_Field11) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *AllTypesOneOf_Field12) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *AllTypesOneOf_Field13) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *AllTypesOneOf_Field14) Size() (n int) {
	var l int
	_ = l
	l = len(m.Field14)
	n += 1 + l + sovOne(uint64(l))
	return n
}
func (m *AllTypesOneOf_Field15) Size() (n int) {
	var l int
	_ = l
	if m.Field15 != nil {
		l = len(m.Field15)
		n += 1 + l + sovOne(uint64(l))
	}
	return n
}
func (m *AllTypesOneOf_SubMessage) Size() (n int) {
	var l int
	_ = l
	if m.SubMessage != nil {
		l = m.SubMessage.Size()
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m *AllTypesOneOfDirect) Size() (n int) {
	var l int
	_ = l
	if m.TestOneof != nil {
		n += m.TestOneof.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m AllTypesOneOfDirect_Field1) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m AllTypesOneOfDirect_Field2) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m AllTypesOneOfDirect_Field3) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m))
	return n
}
func (m AllTypesOneOfDirect_Field4) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m))
	return n
}
func (m AllTypesOneOfDirect_Field5) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m))
	return n
}
func (m AllTypesOneOfDirect_Field6) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m))
	return n
}
func (m AllTypesOneOfDirect_Field7) Size() (n int) {
	var l int
	_ = l
	n += 1 + sozOne(uint64(m))
	return n
}
func (m AllTypesOneOfDirect_Field8) Size() (n int) {
	var l int
	_ = l
	n += 1 + sozOne(uint64(m))
	return n
}
func (m AllTypesOneOfDirect_Field9) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m AllTypesOneOfDirect_Field10) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m AllTypesOneOfDirect_Field11) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m AllTypesOneOfDirect_Field12) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m AllTypesOneOfDirect_Field13) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m AllTypesOneOfDirect_Field14) Size() (n int) {
	var l int
	_ = l
	l = len(m)
	n += 1 + l + sovOne(uint64(l))
	return n
}
func (m AllTypesOneOfDirect_Field15) Size() (n int) {
	var l int
	_ = l
	if m != nil {
		l = len(m)
		n += 1 + l + sovOne(uint64(l))
	}
	return n
}
func (m AllTypesOneOfDirect_SubMessage) Size() (n int) {
	var l int
	_ = l
	m2 := Subby(m)
	l = m2.Size()
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *TwoOneofs) Size() (n int) {
	var l int
	_ = l
	if m.One != nil {
		n += m.One.Size()
	}
	if m.Two != nil {
		n += m.Two.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoOneofs_Field1) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *TwoOneofs_Field2) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *TwoOneofs_Field3) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field3))
	return n
}
func (m *TwoOneofs_Field34) Size() (n int) {
	var l int
	_ = l
	l = len(m.Field34)
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *TwoOneofs_Field35) Size() (n int) {
	var l int
	_ = l
	if m.Field35 != nil {
		l = len(m.Field35)
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m *TwoOneofs_SubMessage2) Size() (n int) {
	var l int
	_ = l
	if m.SubMessage2 != nil {
		l = m.SubMessage2.Size()
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m *TwoOneofsDirect) Size() (n int) {
	var l int
	_ = l
	if m.One != nil {
		n += m.One.Size()
	}
	if m.Two != nil {
		n += m.Two.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m TwoOneofsDirect_Field1) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m TwoOneofsDirect_Field2) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m TwoOneofsDirect_Field3) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m))
	return n
}
func (m TwoOneofsDirect_Field34) Size() (n int) {
	var l int
	_ = l
	l = len(m)
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m TwoOneofsDirect_Field35) Size() (n int) {
	var l int
	_ = l
	if m != nil {
		l = len(m)
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m TwoOneofsDirect_SubMessage2) Size() (n int) {
	var l int
	_ = l
	m2 := Subby(m)
	l = m2.Size()
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *CustomOneof) Size() (n int) {
	var l int
	_ = l
	if m.Custom != nil {
		n += m.Custom.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomOneof_Stringy) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stringy)
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *CustomOneof_CustomType) Size() (n int) {
	var l int
	_ = l
	l = m.CustomType.Size()
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *CustomOneof_CastType) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovOne(uint64(m.CastType))
	return n
}
func (m *CustomOneof_MyCustomName) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovOne(uint64(m.MyCustomName))
	return n
}
func (m *CustomOneofDirect) Size() (n int) {
	var l int
	_ = l
	if m.Custom != nil {
		n += m.Custom.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m CustomOneofDirect_Stringy) Size() (n int) {
	var l int
	_ = l
	l = len(m)
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m CustomOneofDirect_CustomType) Size() (n int) {
	var l int
	_ = l
	l = m.Size()
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m CustomOneofDirect_CastType) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovOne(uint64(m))
	return n
}
func (m CustomOneofDirect_MyCustomName) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovOne(uint64(m))
	return n
}

func sovOne(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOne(x uint64) (n int) {
	return sovOne(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Subby) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subby{`,
		`Sub:` + valueToStringOne(this.Sub) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf{`,
		`TestOneof:` + fmt.Sprintf("%v", this.TestOneof) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field4{`,
		`Field4:` + fmt.Sprintf("%v", this.Field4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field5) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field5{`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field6{`,
		`Field6:` + fmt.Sprintf("%v", this.Field6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field7) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field7{`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field8) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field8{`,
		`Field8:` + fmt.Sprintf("%v", this.Field8) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field9) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field9{`,
		`Field9:` + fmt.Sprintf("%v", this.Field9) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field10) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field10{`,
		`Field10:` + fmt.Sprintf("%v", this.Field10) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field11) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field11{`,
		`Field11:` + fmt.Sprintf("%v", this.Field11) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field12) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field12{`,
		`Field12:` + fmt.Sprintf("%v", this.Field12) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field13) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field13{`,
		`Field13:` + fmt.Sprintf("%v", this.Field13) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field14) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field14{`,
		`Field14:` + fmt.Sprintf("%v", this.Field14) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field15) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field15{`,
		`Field15:` + fmt.Sprintf("%v", this.Field15) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_SubMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_SubMessage{`,
		`SubMessage:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect{`,
		`TestOneof:` + fmt.Sprintf("%v", this.TestOneof) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field4{`,
		`Field4:` + fmt.Sprintf("%v", this.Field4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field5) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field5{`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field6{`,
		`Field6:` + fmt.Sprintf("%v", this.Field6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field7) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field7{`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field8) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field8{`,
		`Field8:` + fmt.Sprintf("%v", this.Field8) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field9) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field9{`,
		`Field9:` + fmt.Sprintf("%v", this.Field9) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field10) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field10{`,
		`Field10:` + fmt.Sprintf("%v", this.Field10) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field11) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field11{`,
		`Field11:` + fmt.Sprintf("%v", this.Field11) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field12) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field12{`,
		`Field12:` + fmt.Sprintf("%v", this.Field12) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field13) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field13{`,
		`Field13:` + fmt.Sprintf("%v", this.Field13) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field14) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field14{`,
		`Field14:` + fmt.Sprintf("%v", this.Field14) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_Field15) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_Field15{`,
		`Field15:` + fmt.Sprintf("%v", this.Field15) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOfDirect_SubMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOfDirect_SubMessage{`,
		`SubMessage:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs{`,
		`One:` + fmt.Sprintf("%v", this.One) + `,`,
		`Two:` + fmt.Sprintf("%v", this.Two) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field34) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field34{`,
		`Field34:` + fmt.Sprintf("%v", this.Field34) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field35) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field35{`,
		`Field35:` + fmt.Sprintf("%v", this.Field35) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_SubMessage2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_SubMessage2{`,
		`SubMessage2:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage2), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect{`,
		`One:` + fmt.Sprintf("%v", this.One) + `,`,
		`Two:` + fmt.Sprintf("%v", this.Two) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect_Field34) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect_Field34{`,
		`Field34:` + fmt.Sprintf("%v", this.Field34) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect_Field35) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect_Field35{`,
		`Field35:` + fmt.Sprintf("%v", this.Field35) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofsDirect_SubMessage2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofsDirect_SubMessage2{`,
		`SubMessage2:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage2), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof{`,
		`Custom:` + fmt.Sprintf("%v", this.Custom) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_Stringy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_Stringy{`,
		`Stringy:` + fmt.Sprintf("%v", this.Stringy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_CustomType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_CustomType{`,
		`CustomType:` + fmt.Sprintf("%v", this.CustomType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_CastType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_CastType{`,
		`CastType:` + fmt.Sprintf("%v", this.CastType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_MyCustomName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_MyCustomName{`,
		`MyCustomName:` + fmt.Sprintf("%v", this.MyCustomName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneofDirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneofDirect{`,
		`Custom:` + fmt.Sprintf("%v", this.Custom) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneofDirect_Stringy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneofDirect_Stringy{`,
		`Stringy:` + fmt.Sprintf("%v", this.Stringy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneofDirect_CustomType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneofDirect_CustomType{`,
		`CustomType:` + fmt.Sprintf("%v", this.CustomType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneofDirect_CastType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneofDirect_CastType{`,
		`CastType:` + fmt.Sprintf("%v", this.CastType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneofDirect_MyCustomName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneofDirect_MyCustomName{`,
		`MyCustomName:` + fmt.Sprintf("%v", this.MyCustomName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOne(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("combos/marshaler/one.proto", fileDescriptorOne) }

var fileDescriptorOne = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x95, 0xcf, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0xbb, 0x2c, 0xbf, 0xfa, 0xa0, 0x42, 0xd7, 0xcb, 0xc8, 0x01, 0xcc, 0xaa, 0x89, 0x07,
	0xcb, 0xc2, 0xfe, 0x00, 0xea, 0xcd, 0x6d, 0x63, 0xbc, 0x20, 0x09, 0x6d, 0xcf, 0x0d, 0x8b, 0x0b,
	0x25, 0x01, 0xb6, 0x61, 0x97, 0x34, 0xdc, 0xfa, 0x37, 0xf8, 0x07, 0x98, 0x78, 0xf3, 0xe8, 0xd1,
	0x3f, 0xa1, 0x47, 0x8e, 0xc6, 0x18, 0x62, 0xf1, 0x62, 0x3c, 0x71, 0x6c, 0x3c, 0xf9, 0x66, 0x76,
	0x3b, 0xd3, 0x6a, 0x8c, 0x17, 0x35, 0x31, 0x7a, 0x78, 0x99, 0x79, 0xfb, 0x79, 0xf3, 0x78, 0xdf,
	0x79, 0x8f, 0x5d, 0x28, 0x74, 0xbd, 0x91, 0xe3, 0xf9, 0xda, 0xa8, 0x33, 0xf1, 0x8f, 0x3a, 0x43,
	0x77, 0xa2, 0x79, 0x63, 0xb7, 0x7c, 0x3c, 0xf1, 0x02, 0x4f, 0x91, 0x71, 0x5b, 0xd8, 0xea, 0x0f,
	0x82, 0xa3, 0xa9, 0x53, 0xc6, 0x38, 0xad, 0xef, 0xf5, 0x3d, 0x8d, 0x31, 0x67, 0xda, 0x63, 0x1e,
	0x73, 0xd8, 0x2e, 0x3c, 0xa3, 0xde, 0x82, 0xc4, 0xde, 0xd4, 0x71, 0x66, 0x4a, 0x1e, 0x64, 0x7f,
	0xea, 0x10, 0xe9, 0xb6, 0x74, 0x7f, 0xbd, 0x4d, 0xb7, 0xea, 0x42, 0x86, 0x8d, 0x47, 0xc3, 0xe1,
	0xfe, 0xec, 0xd8, 0xf5, 0x5b, 0x63, 0xb7, 0xd5, 0x53, 0x08, 0x24, 0x1f, 0x0f, 0xdc, 0xe1, 0xb3,
	0x2a, 0x0b, 0x93, 0x9e, 0xac, 0xb5, 0x93, 0x3d, 0xe6, 0x73, 0xa2, 0x93, 0x18, 0x92, 0x18, 0x27,
	0x3a, 0x27, 0x06, 0x91, 0x91, 0x24, 0x38, 0x31, 0x38, 0x31, 0x49, 0x1c, 0x89, 0xcc, 0x89, 0xc9,
	0x89, 0x45, 0x12, 0x48, 0x36, 0x38, 0xb1, 0x38, 0xa9, 0x91, 0x24, 0x92, 0x38, 0x27, 0x35, 0x4e,
	0xea, 0x24, 0x85, 0x64, 0x93, 0x93, 0x3a, 0x27, 0x0d, 0x92, 0x46, 0xa2, 0x70, 0xd2, 0xe0, 0x64,
	0x9b, 0xac, 0x23, 0x49, 0x71, 0xb2, 0xad, 0x14, 0x20, 0x15, 0x2a, 0xad, 0x10, 0x40, 0x94, 0x43,
	0x94, 0x0a, 0xa5, 0x56, 0x04, 0xab, 0x92, 0x0c, 0xb2, 0xa4, 0x60, 0x55, 0xc1, 0x74, 0x92, 0x45,
	0x96, 0x17, 0x4c, 0x17, 0xcc, 0x20, 0x1b, 0xc8, 0xd2, 0x82, 0x19, 0x82, 0x99, 0xe4, 0x06, 0xed,
	0x80, 0x60, 0xa6, 0x60, 0x16, 0xc9, 0x21, 0xcb, 0x0a, 0x66, 0x29, 0x5b, 0x90, 0xc1, 0x56, 0x1d,
	0x8e, 0x5c, 0xdf, 0xef, 0xf4, 0x5d, 0x92, 0x47, 0x9e, 0xd1, 0xa1, 0x4c, 0x67, 0x82, 0xb5, 0x15,
	0x63, 0x01, 0x03, 0x9a, 0x21, 0xb7, 0xb3, 0x00, 0x81, 0xeb, 0x07, 0x87, 0xc8, 0xbd, 0x9e, 0xfa,
	0x59, 0x86, 0x9b, 0xd7, 0x1a, 0xbc, 0x3b, 0x98, 0xb8, 0xdd, 0xe0, 0x7f, 0x9b, 0xff, 0xf2, 0x36,
	0x3f, 0x8c, 0xaf, 0x5e, 0x96, 0xa4, 0x6f, 0x9a, 0x3d, 0x97, 0x60, 0x7d, 0xff, 0xc4, 0x6b, 0x51,
	0xc7, 0xff, 0xc5, 0x2d, 0xbe, 0x2c, 0xdd, 0x30, 0x89, 0xca, 0x64, 0x49, 0x51, 0xe9, 0x86, 0x90,
	0x65, 0x58, 0xe4, 0x0e, 0x93, 0xc5, 0x99, 0xa5, 0x68, 0x90, 0xbd, 0x22, 0x4b, 0x27, 0x77, 0xbf,
	0xd3, 0x25, 0xb5, 0x33, 0x42, 0x97, 0x6e, 0x27, 0x80, 0xbe, 0xe3, 0xe8, 0x12, 0x9c, 0x78, 0xea,
	0x7b, 0x09, 0x72, 0x5c, 0xd2, 0x6f, 0x99, 0xdd, 0x3f, 0x25, 0x2c, 0xea, 0xd8, 0x75, 0x79, 0xcf,
	0x63, 0x90, 0xd9, 0x99, 0xfa, 0x81, 0x37, 0x62, 0x0a, 0xe9, 0x0f, 0xee, 0x05, 0x93, 0xc1, 0xb8,
	0x3f, 0x8b, 0x8a, 0xc1, 0x01, 0xf1, 0xc3, 0x07, 0x4a, 0x1b, 0x20, 0x0c, 0xa5, 0x7f, 0xe6, 0xb0,
	0x1e, 0xbb, 0xf2, 0x6e, 0x51, 0x7a, 0xf0, 0xc3, 0xaf, 0x01, 0x1d, 0x0d, 0xad, 0xcb, 0xce, 0x94,
	0x0f, 0x06, 0xe3, 0xa0, 0xaa, 0x37, 0xe8, 0x14, 0x75, 0x79, 0x16, 0xe5, 0x00, 0xd2, 0x3b, 0x1d,
	0x3f, 0x60, 0x19, 0xa9, 0x80, 0xb8, 0x5d, 0xff, 0xb2, 0x28, 0x19, 0x3f, 0xc9, 0x88, 0x27, 0x02,
	0x3c, 0x51, 0x6e, 0xce, 0x68, 0xd6, 0x9a, 0x49, 0x8f, 0x63, 0xe2, 0x74, 0x37, 0x4a, 0xa5, 0xe8,
	0x97, 0xa5, 0x3e, 0xed, 0x8c, 0x5c, 0x72, 0x8f, 0xbe, 0x13, 0xec, 0xfc, 0x72, 0x51, 0xca, 0x36,
	0x67, 0xe2, 0xb9, 0x28, 0x85, 0x7a, 0x76, 0x1a, 0x92, 0xa1, 0xa7, 0xbe, 0x88, 0xc1, 0xe6, 0x95,
	0x4b, 0x89, 0xba, 0xfe, 0xef, 0x5e, 0x4d, 0x34, 0x39, 0xfc, 0x82, 0xec, 0xdd, 0xb3, 0xf3, 0xe2,
	0xda, 0x1c, 0xed, 0x2d, 0xda, 0x87, 0xf3, 0xa2, 0xb4, 0x42, 0xbb, 0x40, 0x3b, 0x5d, 0x16, 0xa5,
	0x57, 0x68, 0xaf, 0xd1, 0xde, 0xa0, 0x9d, 0xa1, 0xcd, 0x97, 0x18, 0x83, 0xeb, 0x27, 0x5c, 0x57,
	0xb8, 0x5e, 0xe0, 0x7a, 0xfa, 0xb1, 0xb8, 0xf6, 0x35, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x92, 0x3b,
	0x03, 0x67, 0x08, 0x00, 0x00,
}
