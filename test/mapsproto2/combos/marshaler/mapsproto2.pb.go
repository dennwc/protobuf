// Code generated by protoc-gen-gogo.
// source: combos/marshaler/mapsproto2.proto
// DO NOT EDIT!

/*
Package proto2_maps is a generated protocol buffer package.

It is generated from these files:
	combos/marshaler/mapsproto2.proto

It has these top-level messages:
	FloatingPoint
	AllMaps
	AllMapsOrdered
*/
package proto2_maps

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strconv "strconv"

import strings "strings"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MapEnum int32

const (
	MA MapEnum = 0
	MB MapEnum = 1
	MC MapEnum = 2
)

var MapEnum_name = map[int32]string{
	0: "MA",
	1: "MB",
	2: "MC",
}
var MapEnum_value = map[string]int32{
	"MA": 0,
	"MB": 1,
	"MC": 2,
}

func (x MapEnum) Enum() *MapEnum {
	p := new(MapEnum)
	*p = x
	return p
}
func (x MapEnum) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MapEnum_name, int32(x))
}
func (x *MapEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MapEnum_value, data, "MapEnum")
	if err != nil {
		return err
	}
	*x = MapEnum(value)
	return nil
}
func (MapEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{0} }

type FloatingPoint struct {
	F                *float64 `protobuf:"fixed64,1,opt,name=f" json:"f,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FloatingPoint) Reset()                    { *m = FloatingPoint{} }
func (*FloatingPoint) ProtoMessage()               {}
func (*FloatingPoint) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{0} }

type AllMaps struct {
	StringToDoubleMap map[string]float64        `protobuf:"bytes,1,rep,name=StringToDoubleMap,json=stringToDoubleMap" json:"StringToDoubleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloatMap  map[string]float32        `protobuf:"bytes,2,rep,name=StringToFloatMap,json=stringToFloatMap" json:"StringToFloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map          map[int32]int32           `protobuf:"bytes,3,rep,name=Int32Map,json=int32Map" json:"Int32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map          map[int64]int64           `protobuf:"bytes,4,rep,name=Int64Map,json=int64Map" json:"Int64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map         map[uint32]uint32         `protobuf:"bytes,5,rep,name=Uint32Map,json=uint32Map" json:"Uint32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map         map[uint64]uint64         `protobuf:"bytes,6,rep,name=Uint64Map,json=uint64Map" json:"Uint64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map         map[int32]int32           `protobuf:"bytes,7,rep,name=Sint32Map,json=sint32Map" json:"Sint32Map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map         map[int64]int64           `protobuf:"bytes,8,rep,name=Sint64Map,json=sint64Map" json:"Sint64Map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map        map[uint32]uint32         `protobuf:"bytes,9,rep,name=Fixed32Map,json=fixed32Map" json:"Fixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed32Map       map[int32]int32           `protobuf:"bytes,10,rep,name=Sfixed32Map,json=sfixed32Map" json:"Sfixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map        map[uint64]uint64         `protobuf:"bytes,11,rep,name=Fixed64Map,json=fixed64Map" json:"Fixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed64Map       map[int64]int64           `protobuf:"bytes,12,rep,name=Sfixed64Map,json=sfixed64Map" json:"Sfixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap           map[bool]bool             `protobuf:"bytes,13,rep,name=BoolMap,json=boolMap" json:"BoolMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap         map[string]string         `protobuf:"bytes,14,rep,name=StringMap,json=stringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBytesMap  map[string][]byte         `protobuf:"bytes,15,rep,name=StringToBytesMap,json=stringToBytesMap" json:"StringToBytesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnumMap   map[string]MapEnum        `protobuf:"bytes,16,rep,name=StringToEnumMap,json=stringToEnumMap" json:"StringToEnumMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto2.maps.MapEnum"`
	StringToMsgMap    map[string]*FloatingPoint `protobuf:"bytes,17,rep,name=StringToMsgMap,json=stringToMsgMap" json:"StringToMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *AllMaps) Reset()                    { *m = AllMaps{} }
func (*AllMaps) ProtoMessage()               {}
func (*AllMaps) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{1} }

type AllMapsOrdered struct {
	StringToDoubleMap map[string]float64        `protobuf:"bytes,1,rep,name=StringToDoubleMap,json=stringToDoubleMap" json:"StringToDoubleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloatMap  map[string]float32        `protobuf:"bytes,2,rep,name=StringToFloatMap,json=stringToFloatMap" json:"StringToFloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map          map[int32]int32           `protobuf:"bytes,3,rep,name=Int32Map,json=int32Map" json:"Int32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map          map[int64]int64           `protobuf:"bytes,4,rep,name=Int64Map,json=int64Map" json:"Int64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map         map[uint32]uint32         `protobuf:"bytes,5,rep,name=Uint32Map,json=uint32Map" json:"Uint32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map         map[uint64]uint64         `protobuf:"bytes,6,rep,name=Uint64Map,json=uint64Map" json:"Uint64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map         map[int32]int32           `protobuf:"bytes,7,rep,name=Sint32Map,json=sint32Map" json:"Sint32Map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map         map[int64]int64           `protobuf:"bytes,8,rep,name=Sint64Map,json=sint64Map" json:"Sint64Map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map        map[uint32]uint32         `protobuf:"bytes,9,rep,name=Fixed32Map,json=fixed32Map" json:"Fixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed32Map       map[int32]int32           `protobuf:"bytes,10,rep,name=Sfixed32Map,json=sfixed32Map" json:"Sfixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map        map[uint64]uint64         `protobuf:"bytes,11,rep,name=Fixed64Map,json=fixed64Map" json:"Fixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed64Map       map[int64]int64           `protobuf:"bytes,12,rep,name=Sfixed64Map,json=sfixed64Map" json:"Sfixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap           map[bool]bool             `protobuf:"bytes,13,rep,name=BoolMap,json=boolMap" json:"BoolMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap         map[string]string         `protobuf:"bytes,14,rep,name=StringMap,json=stringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBytesMap  map[string][]byte         `protobuf:"bytes,15,rep,name=StringToBytesMap,json=stringToBytesMap" json:"StringToBytesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnumMap   map[string]MapEnum        `protobuf:"bytes,16,rep,name=StringToEnumMap,json=stringToEnumMap" json:"StringToEnumMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto2.maps.MapEnum"`
	StringToMsgMap    map[string]*FloatingPoint `protobuf:"bytes,17,rep,name=StringToMsgMap,json=stringToMsgMap" json:"StringToMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *AllMapsOrdered) Reset()                    { *m = AllMapsOrdered{} }
func (*AllMapsOrdered) ProtoMessage()               {}
func (*AllMapsOrdered) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{2} }

func init() {
	proto.RegisterType((*FloatingPoint)(nil), "proto2.maps.FloatingPoint")
	proto.RegisterType((*AllMaps)(nil), "proto2.maps.AllMaps")
	proto.RegisterType((*AllMapsOrdered)(nil), "proto2.maps.AllMapsOrdered")
	proto.RegisterEnum("proto2.maps.MapEnum", MapEnum_name, MapEnum_value)
}
func (this *FloatingPoint) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *AllMaps) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *AllMapsOrdered) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func Mapsproto2Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4138 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0x5b, 0x6c, 0x23, 0xe7,
		0x75, 0x36, 0xef, 0xe4, 0x21, 0x45, 0x8e, 0x46, 0xf2, 0x9a, 0x56, 0xec, 0x5d, 0x2f, 0x6d, 0xc7,
		0x6b, 0x39, 0xd1, 0x3a, 0x4a, 0x6c, 0xaf, 0xe9, 0xc4, 0x81, 0x2e, 0x5c, 0xad, 0x1c, 0x5d, 0xd8,
		0xa1, 0x64, 0xaf, 0x5d, 0x18, 0xd3, 0x11, 0x39, 0xe4, 0xd2, 0x26, 0x67, 0x58, 0xce, 0xd0, 0x5e,
		0xe5, 0xc9, 0x85, 0x7b, 0x41, 0x50, 0xf4, 0x5e, 0xa0, 0x8e, 0xe3, 0xb8, 0x4d, 0x80, 0xd6, 0x49,
		0x7a, 0x8b, 0x7b, 0x09, 0x8a, 0x3e, 0x05, 0x28, 0xd2, 0xe6, 0xa9, 0x48, 0xfb, 0x94, 0x87, 0x3c,
		0x34, 0xa9, 0x81, 0xba, 0x6d, 0xda, 0xba, 0x80, 0x81, 0x06, 0xf0, 0x4b, 0xcf, 0x7f, 0x1b, 0xfe,
		0x33, 0x1c, 0x72, 0xa8, 0x00, 0xb9, 0x3c, 0x58, 0x00, 0x21, 0xce, 0xf9, 0xcf, 0xf7, 0xcd, 0x99,
		0xf3, 0x9f, 0xff, 0x9c, 0xf3, 0xff, 0x43, 0xf8, 0xbb, 0x8f, 0xc0, 0x5d, 0x1d, 0xdb, 0xee, 0xf4,
		0xcc, 0xcb, 0x83, 0xa1, 0xed, 0xda, 0x27, 0xa3, 0xf6, 0xe5, 0x96, 0xe9, 0x34, 0x87, 0xdd, 0x81,
		0x6b, 0x0f, 0xd7, 0xa8, 0x4c, 0x2d, 0x31, 0x8d, 0x35, 0xa1, 0x51, 0xd9, 0x87, 0xc5, 0xab, 0xdd,
		0x9e, 0xb9, 0xed, 0x29, 0x36, 0x4c, 0x57, 0xbd, 0x02, 0xc9, 0x36, 0x0a, 0xcb, 0xb1, 0xbb, 0x12,
		0x97, 0xf2, 0xeb, 0xf7, 0xac, 0x05, 0x40, 0x6b, 0x7e, 0x44, 0x9d, 0x88, 0x35, 0x8a, 0xa8, 0xbc,
		0x95, 0x84, 0xa5, 0x90, 0x51, 0x55, 0x85, 0xa4, 0x65, 0xf4, 0x09, 0x63, 0xec, 0x52, 0x4e, 0xa3,
		0xdf, 0xd5, 0x32, 0x64, 0x06, 0x46, 0xf3, 0x79, 0xa3, 0x63, 0x96, 0xe3, 0x54, 0x2c, 0x2e, 0xd5,
		0xf3, 0x00, 0x2d, 0x73, 0x60, 0x5a, 0x2d, 0xd3, 0x6a, 0x9e, 0x96, 0x13, 0x68, 0x45, 0x4e, 0x93,
		0x24, 0xea, 0x03, 0xb0, 0x38, 0x18, 0x9d, 0xf4, 0xba, 0x4d, 0x5d, 0x52, 0x03, 0x54, 0x4b, 0x69,
		0x0a, 0x1b, 0xd8, 0x1e, 0x2b, 0xdf, 0x07, 0xa5, 0x17, 0x4d, 0xe3, 0x79, 0x59, 0x35, 0x4f, 0x55,
		0x8b, 0x44, 0x2c, 0x29, 0x6e, 0x41, 0xa1, 0x6f, 0x3a, 0x0e, 0x1a, 0xa0, 0xbb, 0xa7, 0x03, 0xb3,
		0x9c, 0xa4, 0x4f, 0x7f, 0xd7, 0xc4, 0xd3, 0x07, 0x9f, 0x3c, 0xcf, 0x51, 0x47, 0x08, 0x52, 0x37,
		0x20, 0x67, 0x5a, 0xa3, 0x3e, 0x63, 0x48, 0x4d, 0xf1, 0x5f, 0x0d, 0x35, 0x82, 0x2c, 0x59, 0x02,
		0xe3, 0x14, 0x19, 0xc7, 0x1c, 0xbe, 0xd0, 0x6d, 0x9a, 0xe5, 0x34, 0x25, 0xb8, 0x6f, 0x82, 0xa0,
		0xc1, 0xc6, 0x83, 0x1c, 0x02, 0x87, 0x8f, 0x92, 0x33, 0x6f, 0xba, 0xa6, 0xe5, 0x74, 0x6d, 0xab,
		0x9c, 0xa1, 0x24, 0xf7, 0x86, 0xcc, 0xa2, 0xd9, 0x6b, 0x05, 0x29, 0xc6, 0x38, 0xf5, 0x61, 0xc8,
		0xd8, 0x03, 0x17, 0xbf, 0x39, 0xe5, 0x2c, 0xce, 0x4f, 0x7e, 0xfd, 0x8e, 0xd0, 0x40, 0x38, 0x64,
		0x3a, 0x9a, 0x50, 0x56, 0x77, 0x41, 0x71, 0xec, 0xd1, 0xb0, 0x69, 0xea, 0x4d, 0xbb, 0x65, 0xea,
		0x5d, 0xab, 0x6d, 0x97, 0x73, 0x94, 0xe0, 0xc2, 0xe4, 0x83, 0x50, 0xc5, 0x2d, 0xd4, 0xdb, 0x45,
		0x35, 0xad, 0xe8, 0xf8, 0xae, 0xd5, 0x73, 0x90, 0x76, 0x4e, 0x2d, 0xd7, 0xb8, 0x59, 0x2e, 0xd0,
		0x08, 0xe1, 0x57, 0x95, 0xff, 0x4b, 0x41, 0x69, 0x9e, 0x10, 0x7b, 0x0c, 0x52, 0x6d, 0xf2, 0x94,
		0x18, 0x60, 0x67, 0xf0, 0x01, 0xc3, 0xf8, 0x9d, 0x98, 0xfe, 0x21, 0x9d, 0xb8, 0x01, 0x79, 0xcb,
		0x74, 0x5c, 0xb3, 0xc5, 0x22, 0x22, 0x31, 0x67, 0x4c, 0x01, 0x03, 0x4d, 0x86, 0x54, 0xf2, 0x87,
		0x0a, 0xa9, 0xeb, 0x50, 0xf2, 0x4c, 0xd2, 0x87, 0x86, 0xd5, 0x11, 0xb1, 0x79, 0x39, 0xca, 0x92,
		0xb5, 0x9a, 0xc0, 0x69, 0x04, 0xa6, 0x15, 0x4d, 0xdf, 0xb5, 0xba, 0x0d, 0x60, 0x5b, 0xa6, 0xdd,
		0xc6, 0xe5, 0xd5, 0xec, 0x61, 0x9c, 0x84, 0x7b, 0xe9, 0x90, 0xa8, 0x4c, 0x78, 0xc9, 0x66, 0xd2,
		0x66, 0x4f, 0x7d, 0x74, 0x1c, 0x6a, 0x99, 0x29, 0x91, 0xb2, 0xcf, 0x16, 0xd9, 0x44, 0xb4, 0x1d,
		0x43, 0x71, 0x68, 0x92, 0xb8, 0x47, 0x17, 0xb3, 0x27, 0xcb, 0x51, 0x23, 0xd6, 0x22, 0x9f, 0x4c,
		0xe3, 0x30, 0xf6, 0x60, 0x0b, 0x43, 0xf9, 0x52, 0xbd, 0x1b, 0x3c, 0x81, 0x4e, 0xc3, 0x0a, 0x68,
		0x16, 0x2a, 0x08, 0xe1, 0x01, 0xca, 0x56, 0xae, 0x40, 0xd1, 0xef, 0x1e, 0x75, 0x19, 0x52, 0x8e,
		0x6b, 0x0c, 0x5d, 0x1a, 0x85, 0x29, 0x8d, 0x5d, 0xa8, 0x0a, 0x24, 0x30, 0xc9, 0xd0, 0x2c, 0x97,
		0xd2, 0xc8, 0xd7, 0x95, 0x47, 0x60, 0xc1, 0x77, 0xfb, 0x79, 0x81, 0x95, 0x57, 0xd2, 0xb0, 0x1c,
		0x16, 0x73, 0xa1, 0xe1, 0x8f, 0xcb, 0x07, 0x23, 0xe0, 0xc4, 0x1c, 0x62, 0xdc, 0x11, 0x06, 0x7e,
		0x85, 0x11, 0x95, 0xea, 0x19, 0x27, 0x66, 0x0f, 0xa3, 0x29, 0x76, 0xa9, 0xb8, 0xfe, 0xc0, 0x5c,
		0x51, 0xbd, 0xb6, 0x47, 0x20, 0x1a, 0x43, 0xaa, 0x8f, 0x43, 0x92, 0xa7, 0x38, 0xc2, 0xb0, 0x3a,
		0x1f, 0x03, 0x89, 0x45, 0x8d, 0xe2, 0xd4, 0x0f, 0x40, 0x8e, 0xfc, 0x67, 0xbe, 0x4d, 0x53, 0x9b,
		0xb3, 0x44, 0x40, 0xfc, 0xaa, 0xae, 0x40, 0x96, 0x86, 0x59, 0xcb, 0x14, 0xa5, 0xc1, 0xbb, 0x26,
		0x13, 0xd3, 0x32, 0xdb, 0xc6, 0xa8, 0xe7, 0xea, 0x2f, 0x18, 0xbd, 0x91, 0x49, 0x03, 0x06, 0x27,
		0x86, 0x0b, 0x9f, 0x24, 0x32, 0xf5, 0x02, 0xe4, 0x59, 0x54, 0x76, 0x11, 0x73, 0x93, 0x66, 0x9f,
		0x94, 0xc6, 0x02, 0x75, 0x97, 0x48, 0xc8, 0xed, 0x9f, 0x73, 0x70, 0x2d, 0xf0, 0xa9, 0xa5, 0xb7,
		0x20, 0x02, 0x7a, 0xfb, 0x47, 0x82, 0x89, 0xef, 0xce, 0xf0, 0xc7, 0x0b, 0xc6, 0x62, 0xe5, 0x6b,
		0x71, 0x48, 0xd2, 0xf5, 0x56, 0x82, 0xfc, 0xd1, 0xd3, 0xf5, 0x9a, 0xbe, 0x7d, 0x78, 0xbc, 0xb9,
		0x57, 0x53, 0x62, 0x6a, 0x11, 0x80, 0x0a, 0xae, 0xee, 0x1d, 0x6e, 0x1c, 0x29, 0x71, 0xef, 0x7a,
		0xf7, 0xe0, 0xe8, 0xe1, 0x8f, 0x29, 0x09, 0x0f, 0x70, 0xcc, 0x04, 0x49, 0x59, 0xe1, 0xa3, 0xeb,
		0x4a, 0x0a, 0x23, 0xa1, 0xc0, 0x08, 0x76, 0xaf, 0xd7, 0xb6, 0x51, 0x23, 0xed, 0x97, 0xa0, 0x4e,
		0x46, 0x5d, 0x80, 0x1c, 0x95, 0x6c, 0x1e, 0x1e, 0xee, 0x29, 0x59, 0x8f, 0xb3, 0x71, 0xa4, 0xed,
		0x1e, 0xec, 0x28, 0x39, 0x8f, 0x73, 0x47, 0x3b, 0x3c, 0xae, 0x2b, 0xe0, 0x31, 0xec, 0xd7, 0x1a,
		0x8d, 0x8d, 0x9d, 0x9a, 0x92, 0xf7, 0x34, 0x36, 0x9f, 0x3e, 0xaa, 0x35, 0x94, 0x82, 0xcf, 0x2c,
		0xbc, 0xc5, 0x82, 0x77, 0x8b, 0xda, 0xc1, 0xf1, 0xbe, 0x52, 0x54, 0x17, 0x61, 0x81, 0xdd, 0x42,
		0x18, 0x51, 0x0a, 0x88, 0xd0, 0x52, 0x65, 0x6c, 0x08, 0x63, 0x59, 0xf4, 0x09, 0x50, 0x43, 0xad,
		0x6c, 0x41, 0x8a, 0x46, 0x17, 0x46, 0x71, 0x71, 0x6f, 0x63, 0xb3, 0xb6, 0xa7, 0x1f, 0xd6, 0x8f,
		0x76, 0x0f, 0x0f, 0x36, 0xf6, 0xd0, 0x77, 0x9e, 0x4c, 0xab, 0xfd, 0xcc, 0xf1, 0xae, 0x56, 0xdb,
		0x46, 0xff, 0x49, 0xb2, 0x7a, 0x6d, 0xe3, 0x08, 0x65, 0x89, 0xca, 0x2a, 0x2c, 0x87, 0xe5, 0x99,
		0xb0, 0x95, 0x51, 0xf9, 0x62, 0x0c, 0x96, 0x42, 0x52, 0x66, 0xe8, 0x2a, 0xfa, 0x24, 0xa4, 0x58,
		0xa4, 0xb1, 0x22, 0x72, 0x7f, 0x68, 0xee, 0xa5, 0x71, 0x37, 0x51, 0x48, 0x28, 0x4e, 0x2e, 0xa4,
		0x89, 0x29, 0x85, 0x94, 0x50, 0x4c, 0x84, 0xd3, 0xcb, 0x31, 0x28, 0x4f, 0xe3, 0x8e, 0x58, 0xef,
		0x71, 0xdf, 0x7a, 0x7f, 0x2c, 0x68, 0xc0, 0xc5, 0xe9, 0xcf, 0x30, 0x61, 0xc5, 0x1b, 0x31, 0x38,
		0x17, 0xde, 0x6f, 0x84, 0xda, 0xf0, 0x38, 0xa4, 0xfb, 0xa6, 0x7b, 0xc3, 0x16, 0x35, 0xf7, 0x83,
		0x21, 0x99, 0x9c, 0x0c, 0x07, 0x7d, 0xc5, 0x51, 0x72, 0x29, 0x48, 0x4c, 0x6b, 0x1a, 0x98, 0x35,
		0x13, 0x96, 0x7e, 0x26, 0x0e, 0xb7, 0x86, 0x92, 0x87, 0x1a, 0x7a, 0x27, 0x40, 0xd7, 0x1a, 0x8c,
		0x5c, 0x56, 0x57, 0x59, 0x9a, 0xc9, 0x51, 0x09, 0x5d, 0xc2, 0x24, 0x85, 0x8c, 0x5c, 0x6f, 0x3c,
		0x41, 0xc7, 0x81, 0x89, 0xa8, 0xc2, 0x95, 0xb1, 0xa1, 0x49, 0x6a, 0xe8, 0xf9, 0x29, 0x4f, 0x3a,
		0x51, 0xb2, 0x1e, 0x04, 0xa5, 0xd9, 0xeb, 0x9a, 0x96, 0xab, 0x3b, 0xee, 0xd0, 0x34, 0xfa, 0x5d,
		0xab, 0x43, 0xf3, 0x68, 0xb6, 0x9a, 0x6a, 0x1b, 0x3d, 0xc7, 0xd4, 0x4a, 0x6c, 0xb8, 0x21, 0x46,
		0x09, 0x82, 0x16, 0x8b, 0xa1, 0x84, 0x48, 0xfb, 0x10, 0x6c, 0xd8, 0x43, 0x54, 0xfe, 0x39, 0x03,
		0x79, 0xa9, 0x3b, 0x53, 0x2f, 0x42, 0xe1, 0x39, 0xe3, 0x05, 0x43, 0x17, 0x1d, 0x37, 0xf3, 0x44,
		0x9e, 0xc8, 0xea, 0xbc, 0xeb, 0x7e, 0x10, 0x96, 0xa9, 0x0a, 0x3e, 0x23, 0xde, 0xa8, 0xd9, 0x33,
		0x1c, 0x87, 0x3a, 0x2d, 0x4b, 0x55, 0x55, 0x32, 0x76, 0x48, 0x86, 0xb6, 0xc4, 0x88, 0xfa, 0x10,
		0x2c, 0x51, 0x44, 0x1f, 0x13, 0x6f, 0x77, 0xd0, 0x33, 0x75, 0xb2, 0x07, 0x70, 0x68, 0x3e, 0xf5,
		0x2c, 0x5b, 0x24, 0x1a, 0xfb, 0x5c, 0x81, 0x58, 0xe4, 0xa8, 0x3b, 0x70, 0x27, 0x85, 0x75, 0x4c,
		0xcb, 0x1c, 0x1a, 0xae, 0xa9, 0x9b, 0x3f, 0x3f, 0x42, 0x5d, 0xdd, 0xb0, 0x5a, 0xfa, 0x0d, 0xc3,
		0xb9, 0x51, 0x5e, 0x96, 0x09, 0x6e, 0x27, 0xba, 0x3b, 0x5c, 0xb5, 0x46, 0x35, 0x37, 0xac, 0xd6,
		0x35, 0xd4, 0x53, 0xab, 0x70, 0x8e, 0x12, 0xa1, 0x53, 0xf0, 0x99, 0xf5, 0xe6, 0x0d, 0xb3, 0xf9,
		0xbc, 0x3e, 0x72, 0xdb, 0x57, 0xca, 0x1f, 0x90, 0x19, 0xa8, 0x91, 0x0d, 0xaa, 0xb3, 0x45, 0x54,
		0x8e, 0x51, 0x43, 0x6d, 0x40, 0x81, 0xcc, 0x47, 0xbf, 0xfb, 0x69, 0x34, 0xdb, 0x1e, 0xd2, 0x1a,
		0x51, 0x0c, 0x59, 0xdc, 0x92, 0x13, 0xd7, 0x0e, 0x39, 0x60, 0x1f, 0xfb, 0xd3, 0x6a, 0xaa, 0x51,
		0xaf, 0xd5, 0xb6, 0xb5, 0xbc, 0x60, 0xb9, 0x6a, 0x0f, 0x49, 0x4c, 0x75, 0x6c, 0xcf, 0xc7, 0x79,
		0x16, 0x53, 0x1d, 0x5b, 0x78, 0x18, 0xfd, 0xd5, 0x6c, 0xb2, 0xc7, 0xc6, 0xbd, 0x0b, 0x6f, 0xd6,
		0x9d, 0xb2, 0xe2, 0xf3, 0x57, 0xb3, 0xb9, 0xc3, 0x14, 0x78, 0x98, 0x3b, 0xb8, 0x24, 0x6e, 0x1d,
		0xfb, 0x4b, 0x06, 0x2e, 0x4e, 0x3c, 0x65, 0x10, 0x8a, 0x77, 0x1c, 0x9c, 0x4e, 0x02, 0x55, 0xdf,
		0x1d, 0x07, 0xa7, 0x41, 0xd8, 0xbd, 0x74, 0x03, 0x36, 0x34, 0x9b, 0xe8, 0xf2, 0x56, 0xf9, 0x36,
		0x59, 0x5b, 0x1a, 0x50, 0x2f, 0x63, 0x20, 0x37, 0x75, 0xd3, 0x32, 0x4e, 0x70, 0xee, 0x8d, 0x21,
		0x7e, 0x71, 0xca, 0x17, 0x64, 0xe5, 0x62, 0xb3, 0x59, 0xa3, 0xa3, 0x1b, 0x74, 0x50, 0x5d, 0x85,
		0x45, 0xfb, 0xe4, 0xb9, 0x26, 0x0b, 0x2e, 0x1d, 0x79, 0xda, 0xdd, 0x9b, 0xe5, 0x7b, 0xa8, 0x9b,
		0x4a, 0x64, 0x80, 0x86, 0x56, 0x9d, 0x8a, 0xd5, 0xfb, 0x91, 0xdc, 0xb9, 0x61, 0x0c, 0x07, 0xb4,
		0x48, 0x3b, 0xe8, 0x54, 0xb3, 0x7c, 0x2f, 0x53, 0x65, 0xf2, 0x03, 0x21, 0x56, 0x6b, 0x70, 0x81,
		0x3c, 0xbc, 0x65, 0x58, 0xb6, 0x3e, 0x72, 0x4c, 0x7d, 0x6c, 0xa2, 0x37, 0x17, 0x1f, 0x24, 0x66,
		0x69, 0x77, 0x08, 0xb5, 0x63, 0x07, 0x93, 0x99, 0x50, 0x12, 0xd3, 0x73, 0x1d, 0x96, 0x47, 0x56,
		0xd7, 0xc2, 0x10, 0xc7, 0x11, 0x02, 0x66, 0x0b, 0xb6, 0xfc, 0x6f, 0x99, 0x29, 0x4d, 0xf7, 0xb1,
		0xac, 0xcd, 0x82, 0x44, 0x5b, 0x1a, 0x4d, 0x0a, 0x2b, 0x55, 0x28, 0xc8, 0xb1, 0xa3, 0xe6, 0x80,
		0x45, 0x0f, 0x56, 0x37, 0xac, 0xa8, 0x5b, 0x87, 0xdb, 0xa4, 0x16, 0x3e, 0x53, 0xc3, 0xc2, 0x86,
		0x35, 0x79, 0x6f, 0xf7, 0xa8, 0xa6, 0x6b, 0xc7, 0x07, 0x47, 0xbb, 0xfb, 0x35, 0x25, 0xb1, 0x9a,
		0xcb, 0xbe, 0x9d, 0x51, 0x5e, 0xc2, 0xbf, 0x78, 0xe5, 0x1b, 0x71, 0x28, 0xfa, 0xfb, 0x60, 0xf5,
		0xe3, 0x70, 0x9b, 0xd8, 0xb4, 0x3a, 0xa6, 0xab, 0xbf, 0xd8, 0x1d, 0xd2, 0x70, 0xee, 0x1b, 0xac,
		0x93, 0xf4, 0x66, 0x62, 0x99, 0x6b, 0xe1, 0xf6, 0xfe, 0x29, 0xd4, 0xb9, 0x4a, 0x55, 0xd4, 0x3d,
		0xb8, 0x80, 0x2e, 0xc3, 0x5e, 0xd3, 0x6a, 0x19, 0xc3, 0x96, 0x3e, 0x3e, 0x2e, 0xd0, 0x8d, 0x26,
		0xc6, 0x81, 0x63, 0xb3, 0x4a, 0xe2, 0xb1, 0xdc, 0x61, 0xd9, 0x0d, 0xae, 0x3c, 0x4e, 0xb1, 0x1b,
		0x5c, 0x35, 0x10, 0x35, 0x89, 0x69, 0x51, 0x83, 0xbd, 0x57, 0xdf, 0x18, 0x60, 0xd8, 0xb8, 0xc3,
		0x53, 0xda, 0xbd, 0x65, 0xb5, 0x2c, 0x0a, 0x6a, 0xe4, 0xfa, 0x47, 0x37, 0x07, 0xb2, 0x1f, 0xbf,
		0x93, 0x80, 0x82, 0xdc, 0xc1, 0x91, 0x86, 0xb8, 0x49, 0xd3, 0x7c, 0x8c, 0x66, 0x81, 0xbb, 0x67,
		0xf6, 0x7b, 0x6b, 0x5b, 0x24, 0xff, 0x57, 0xd3, 0xac, 0xaf, 0xd2, 0x18, 0x92, 0xd4, 0x5e, 0x12,
		0x6b, 0x26, 0xeb, 0xd6, 0xb3, 0x1a, 0xbf, 0xc2, 0x64, 0x97, 0x7e, 0xce, 0xa1, 0xdc, 0x69, 0xca,
		0x7d, 0xcf, 0x6c, 0xee, 0x27, 0x1a, 0x94, 0x3c, 0xf7, 0x44, 0x43, 0x3f, 0x38, 0xd4, 0xf6, 0x37,
		0xf6, 0x34, 0x0e, 0x57, 0x6f, 0x87, 0x64, 0xcf, 0xf8, 0xf4, 0xa9, 0xbf, 0x52, 0x50, 0xd1, 0xbc,
		0x8e, 0x47, 0x06, 0x72, 0xe4, 0xe1, 0xcf, 0xcf, 0x54, 0xf4, 0x23, 0x0c, 0xfd, 0xcb, 0x90, 0xa2,
		0xfe, 0x52, 0x01, 0xb8, 0xc7, 0x94, 0x5b, 0xd4, 0x2c, 0x24, 0xb7, 0x0e, 0x35, 0x12, 0xfe, 0x18,
		0xef, 0x4c, 0xaa, 0xd7, 0x77, 0x6b, 0x5b, 0xb8, 0x02, 0x2a, 0x0f, 0x41, 0x9a, 0x39, 0x81, 0x2c,
		0x0d, 0xcf, 0x0d, 0x08, 0x62, 0x97, 0x9c, 0x23, 0x26, 0x46, 0x8f, 0xf7, 0x37, 0x6b, 0x9a, 0x12,
		0x97, 0xa7, 0xf7, 0x6f, 0x63, 0x90, 0x97, 0x1a, 0x2a, 0x52, 0xca, 0x8d, 0x5e, 0xcf, 0x7e, 0x51,
		0x37, 0x7a, 0x5d, 0xcc, 0x50, 0x6c, 0x7e, 0x80, 0x8a, 0x36, 0x88, 0x64, 0x5e, 0xff, 0xfd, 0x58,
		0x62, 0xf3, 0xf5, 0x18, 0x28, 0xc1, 0x66, 0x2c, 0x60, 0x60, 0xec, 0x27, 0x6a, 0xe0, 0x6b, 0x31,
		0x28, 0xfa, 0x3b, 0xb0, 0x80, 0x79, 0x17, 0x7f, 0xa2, 0xe6, 0x7d, 0x2e, 0x06, 0x0b, 0xbe, 0xbe,
		0xeb, 0xa7, 0xca, 0xba, 0x57, 0x13, 0xb0, 0x14, 0x82, 0xc3, 0x04, 0xc4, 0x1a, 0x54, 0xd6, 0x33,
		0x7f, 0x78, 0x9e, 0x7b, 0xad, 0x91, 0xfa, 0x57, 0x37, 0x86, 0x2e, 0xef, 0x67, 0xb1, 0x5e, 0x76,
		0x5b, 0x98, 0x54, 0xbb, 0xed, 0x2e, 0xb6, 0x6f, 0x6c, 0xc7, 0xc2, 0xba, 0xd6, 0xd2, 0x58, 0xce,
		0xb6, 0xc7, 0x1f, 0x02, 0x75, 0x60, 0x3b, 0x5d, 0xb7, 0xfb, 0x02, 0x39, 0x9e, 0x13, 0x1b, 0x69,
		0xd2, 0xc5, 0x26, 0x35, 0x45, 0x8c, 0xec, 0x5a, 0xae, 0xa7, 0x6d, 0x99, 0x1d, 0x23, 0xa0, 0x4d,
		0xd2, 0x50, 0x42, 0x53, 0xc4, 0x88, 0xa7, 0x8d, 0x8d, 0x66, 0xcb, 0x1e, 0x91, 0x86, 0x80, 0xe9,
		0x91, 0xac, 0x17, 0xd3, 0xf2, 0x4c, 0xe6, 0xa9, 0xf0, 0x8e, 0x6d, 0xbc, 0x83, 0x2f, 0x68, 0x79,
		0x26, 0x63, 0x2a, 0xf7, 0x41, 0xc9, 0xe8, 0x74, 0x86, 0x84, 0x5c, 0x10, 0xb1, 0x36, 0xb4, 0xe8,
		0x89, 0xa9, 0xe2, 0xca, 0x13, 0x90, 0x15, 0x7e, 0x20, 0x85, 0x85, 0x78, 0x02, 0x6b, 0x3e, 0x3d,
		0x47, 0x89, 0x93, 0x4d, 0xbd, 0x25, 0x06, 0xf1, 0xa6, 0x5d, 0x47, 0x1f, 0x1f, 0xe8, 0xc5, 0x71,
		0x3c, 0xab, 0xe5, 0xbb, 0x8e, 0x77, 0x82, 0x53, 0x79, 0x03, 0xcb, 0xab, 0xff, 0x40, 0x52, 0xdd,
		0x86, 0x6c, 0xcf, 0xc6, 0xf8, 0x20, 0x08, 0x76, 0x1a, 0x7e, 0x29, 0xe2, 0x0c, 0x73, 0x6d, 0x8f,
		0xeb, 0x6b, 0x1e, 0x72, 0xe5, 0x1f, 0x63, 0x90, 0x15, 0x62, 0x2c, 0x14, 0xc9, 0x81, 0xe1, 0xde,
		0xa0, 0x74, 0xa9, 0xcd, 0xb8, 0x12, 0xd3, 0xe8, 0x35, 0x91, 0x63, 0x37, 0x63, 0xd1, 0x10, 0xe0,
		0x72, 0x72, 0x4d, 0xe6, 0xb5, 0x67, 0x1a, 0x2d, 0xda, 0xe0, 0xda, 0xfd, 0x3e, 0xce, 0xa4, 0x23,
		0xe6, 0x95, 0xcb, 0xb7, 0xb8, 0x98, 0x9c, 0x8b, 0xbb, 0x43, 0xa3, 0xdb, 0xf3, 0xe9, 0x26, 0xa9,
		0xae, 0x22, 0x06, 0x3c, 0xe5, 0x2a, 0xdc, 0x2e, 0x78, 0x5b, 0xa6, 0x6b, 0x60, 0xf3, 0xdc, 0x1a,
		0x83, 0xd2, 0xf4, 0xb4, 0xeb, 0x36, 0xae, 0xb0, 0xcd, 0xc7, 0x05, 0x76, 0xf3, 0x3a, 0x36, 0xb2,
		0x76, 0x3f, 0xe8, 0x89, 0x4d, 0x25, 0xb0, 0xef, 0x72, 0xae, 0xc5, 0x9e, 0x81, 0x71, 0x53, 0xf1,
		0xc5, 0x78, 0x62, 0xa7, 0xbe, 0xf9, 0x95, 0xf8, 0xca, 0x0e, 0xc3, 0xd5, 0x85, 0x07, 0x35, 0xb3,
		0xdd, 0x33, 0x9b, 0xc4, 0x3b, 0xf0, 0xe6, 0x3d, 0xf0, 0xe1, 0x4e, 0xd7, 0xbd, 0x31, 0x3a, 0x59,
		0xc3, 0x3b, 0x5c, 0xee, 0xd8, 0x1d, 0x7b, 0xfc, 0x3a, 0x83, 0x5c, 0xd1, 0x0b, 0xfa, 0x8d, 0xbf,
		0xd2, 0xc8, 0x79, 0xd2, 0x95, 0xc8, 0xf7, 0x1f, 0xd5, 0x03, 0x58, 0xe2, 0xca, 0x3a, 0x3d, 0x53,
		0x65, 0x2d, 0xa8, 0x3a, 0x73, 0x43, 0x5e, 0x7e, 0xf3, 0x2d, 0x5a, 0x12, 0xb4, 0x45, 0x0e, 0x25,
		0x63, 0xac, 0x49, 0xad, 0x6a, 0x70, 0xab, 0x8f, 0x8f, 0xc5, 0x30, 0x6e, 0xb9, 0x67, 0x33, 0x7e,
		0x83, 0x33, 0x2e, 0x49, 0x8c, 0x0d, 0x0e, 0xad, 0x6e, 0xc1, 0xc2, 0x59, 0xb8, 0xfe, 0x9e, 0x73,
		0x15, 0x4c, 0x99, 0x64, 0x07, 0x4a, 0x94, 0xa4, 0x39, 0x72, 0x5c, 0xbb, 0x4f, 0x13, 0xc4, 0x6c,
		0x9a, 0x7f, 0x78, 0x8b, 0x05, 0x55, 0x91, 0xc0, 0xb6, 0x3c, 0x54, 0xf5, 0x49, 0x58, 0x26, 0x12,
		0xba, 0x06, 0x65, 0xb6, 0xe8, 0x23, 0x84, 0xf2, 0x3f, 0xbd, 0xcc, 0x62, 0x6f, 0xc9, 0x23, 0x90,
		0x78, 0xa5, 0x99, 0xe8, 0x98, 0x2e, 0xe6, 0x36, 0xdc, 0xff, 0xf5, 0x7a, 0xea, 0xcc, 0x77, 0x0c,
		0xe5, 0xcf, 0x7e, 0xdf, 0x3f, 0x13, 0x3b, 0x0c, 0xb9, 0xd1, 0xeb, 0x55, 0x8f, 0xe1, 0xb6, 0x90,
		0x99, 0x9d, 0x83, 0xf3, 0x55, 0xce, 0xb9, 0x3c, 0x31, 0xbb, 0x84, 0xb6, 0x0e, 0x42, 0xee, 0xcd,
		0xc7, 0x1c, 0x9c, 0x9f, 0xe3, 0x9c, 0x2a, 0xc7, 0x8a, 0x69, 0x21, 0x8c, 0x4f, 0xc0, 0x22, 0xee,
		0xd4, 0x4f, 0x6c, 0x87, 0xef, 0x7b, 0xe7, 0xa0, 0x7b, 0x8d, 0xd3, 0x95, 0x38, 0x90, 0xee, 0x82,
		0x09, 0xd7, 0xa3, 0x90, 0x6d, 0xe3, 0x06, 0x68, 0x0e, 0x8a, 0xcf, 0x73, 0x8a, 0x0c, 0xd1, 0x27,
		0xd0, 0x0d, 0x28, 0x74, 0x6c, 0x9e, 0x86, 0xa3, 0xe1, 0xaf, 0x73, 0x78, 0x5e, 0x60, 0x38, 0xc5,
		0xc0, 0x1e, 0x8c, 0x7a, 0x24, 0x47, 0x47, 0x53, 0xfc, 0xbe, 0xa0, 0x10, 0x18, 0x4e, 0x71, 0x06,
		0xb7, 0xfe, 0x81, 0xa0, 0x70, 0x24, 0x7f, 0x7e, 0x92, 0x9c, 0xf5, 0xf6, 0x4e, 0x6d, 0x6b, 0x1e,
		0x23, 0xbe, 0xc0, 0x19, 0x80, 0x43, 0x08, 0xc1, 0x63, 0x90, 0x9b, 0x77, 0x22, 0xfe, 0x90, 0xc3,
		0xb3, 0xa6, 0x98, 0x01, 0x5c, 0x67, 0x22, 0xc9, 0x90, 0x77, 0x2b, 0xd1, 0x14, 0x7f, 0xc4, 0x29,
		0x8a, 0x12, 0x8c, 0x3f, 0x86, 0x6b, 0x3a, 0x2e, 0x6e, 0xd5, 0xe7, 0x20, 0x79, 0x43, 0x3c, 0x06,
		0x87, 0x70, 0x57, 0x9e, 0x98, 0x56, 0xf3, 0xc6, 0x7c, 0x0c, 0x5f, 0x12, 0xae, 0x14, 0x18, 0x42,
		0x81, 0x99, 0xa7, 0x6f, 0x0c, 0x71, 0x73, 0xdd, 0x9b, 0x6b, 0x3a, 0xbe, 0xcc, 0x39, 0x0a, 0x1e,
		0x88, 0x7b, 0x64, 0x64, 0x9d, 0x85, 0xe6, 0x2b, 0xc2, 0x23, 0x12, 0x8c, 0x2f, 0x3d, 0xdc, 0x99,
		0x92, 0x4e, 0xe2, 0x2c, 0x6c, 0x7f, 0x2c, 0x96, 0x1e, 0xc3, 0xee, 0xcb, 0x8c, 0x38, 0xd3, 0x0e,
		0x6e, 0xc1, 0xe7, 0xa1, 0xf9, 0x13, 0x31, 0xd3, 0x14, 0x40, 0xc0, 0x4f, 0xc3, 0xed, 0xa1, 0xa9,
		0x7e, 0x0e, 0xb2, 0x3f, 0xe5, 0x64, 0xe7, 0x42, 0xd2, 0x3d, 0x4f, 0x09, 0x67, 0xa5, 0xfc, 0x33,
		0x91, 0x12, 0xcc, 0x00, 0x57, 0x9d, 0xb4, 0xb1, 0x8e, 0xd1, 0x3e, 0x9b, 0xd7, 0xfe, 0x5c, 0x78,
		0x8d, 0x61, 0x7d, 0x5e, 0x3b, 0x82, 0x73, 0x9c, 0xf1, 0x6c, 0xf3, 0xfa, 0x55, 0x91, 0x58, 0x19,
		0xfa, 0xd8, 0x3f, 0xbb, 0x3f, 0x0b, 0x2b, 0x9e, 0x3b, 0x45, 0x07, 0xe6, 0xe8, 0xe4, 0x60, 0x20,
		0x9a, 0xf9, 0x4d, 0xce, 0x2c, 0x32, 0xbe, 0xd7, 0xc2, 0x39, 0xfb, 0xc6, 0x80, 0x90, 0x5f, 0x87,
		0xb2, 0x20, 0x1f, 0x59, 0xd8, 0xe0, 0xdb, 0x1d, 0x0b, 0xa7, 0xb1, 0x35, 0x07, 0xf5, 0x5f, 0x04,
		0xa6, 0xea, 0x58, 0x82, 0x13, 0xe6, 0x5d, 0x50, 0xbc, 0x7e, 0x43, 0xef, 0xf6, 0x07, 0x36, 0xb6,
		0x96, 0xb3, 0x19, 0xff, 0x52, 0xcc, 0x94, 0x87, 0xdb, 0xa5, 0xb0, 0x6a, 0x0d, 0x8a, 0xf4, 0x72,
		0xde, 0x90, 0xfc, 0x2b, 0x4e, 0xb4, 0x30, 0x46, 0xf1, 0xc4, 0x81, 0x9d, 0x12, 0xf6, 0xbc, 0xf3,
		0xe4, 0xbf, 0xbf, 0x16, 0x89, 0x83, 0x43, 0x08, 0xc1, 0x35, 0x50, 0x5a, 0x5d, 0x7c, 0x4a, 0x57,
		0x67, 0xef, 0xcc, 0xa2, 0x59, 0xbe, 0xe6, 0xe5, 0x30, 0x8a, 0xa3, 0x6f, 0x5d, 0x58, 0x1c, 0x97,
		0x02, 0x35, 0x5d, 0x8d, 0x7a, 0x91, 0x5b, 0xfe, 0x85, 0x77, 0x39, 0x97, 0xbf, 0xa4, 0x57, 0xf7,
		0x88, 0xa3, 0xfd, 0x85, 0x37, 0x9a, 0xec, 0xe5, 0x77, 0x3d, 0x5f, 0xfb, 0xea, 0x6e, 0xf5, 0x2a,
		0x2c, 0xf8, 0x8a, 0x6e, 0x34, 0xd5, 0x2f, 0x72, 0xaa, 0x82, 0x5c, 0x73, 0xab, 0x0f, 0x41, 0x92,
		0x14, 0xd0, 0x68, 0xf8, 0x2f, 0x71, 0x38, 0x55, 0xaf, 0x7e, 0x02, 0xb2, 0xa2, 0x70, 0x46, 0x43,
		0x7f, 0x99, 0x43, 0x3d, 0x08, 0x81, 0x8b, 0xa2, 0x19, 0x0d, 0xff, 0x15, 0x01, 0x17, 0x10, 0x02,
		0x9f, 0xdf, 0x85, 0x5f, 0xff, 0xd5, 0x24, 0x4f, 0x7c, 0xc2, 0x77, 0xe4, 0xed, 0x11, 0xab, 0x96,
		0xd1, 0xe8, 0xcf, 0xf0, 0x9b, 0x0b, 0x44, 0xf5, 0x11, 0x48, 0xcd, 0xe9, 0xf0, 0x5f, 0xe3, 0x50,
		0xa6, 0x8f, 0xb5, 0x28, 0x2f, 0x55, 0xc8, 0x68, 0xf8, 0xaf, 0x73, 0xb8, 0x8c, 0x22, 0xa6, 0xf3,
		0x0a, 0x19, 0x4d, 0xf0, 0x1b, 0xc2, 0x74, 0x8e, 0x20, 0x6e, 0x13, 0xc5, 0x31, 0x1a, 0xfd, 0x9b,
		0xc2, 0xeb, 0x02, 0x82, 0xeb, 0x32, 0xe7, 0x25, 0xbc, 0x68, 0xfc, 0x6f, 0x71, 0xfc, 0x18, 0x43,
		0x3c, 0x20, 0x25, 0xdc, 0x68, 0x8a, 0xdf, 0x16, 0x1e, 0x90, 0x50, 0x64, 0x19, 0x05, 0x8b, 0x68,
		0x34, 0xd3, 0xef, 0x88, 0x65, 0x14, 0xa8, 0xa1, 0x64, 0x36, 0x69, 0xde, 0x89, 0xa6, 0xf8, 0x5d,
		0x31, 0x9b, 0x54, 0x9f, 0x98, 0x11, 0xac, 0x4a, 0xd1, 0x1c, 0xbf, 0x27, 0xcc, 0x08, 0x14, 0x25,
		0xac, 0x71, 0xea, 0x64, 0x45, 0x8a, 0xe6, 0x7b, 0x85, 0xf3, 0x2d, 0x4e, 0x14, 0xa4, 0xea, 0x53,
		0x70, 0x2e, 0xbc, 0x1a, 0x45, 0xb3, 0x7e, 0xf6, 0xdd, 0xc0, 0xfe, 0x41, 0x2e, 0x46, 0x58, 0x3c,
		0x97, 0xc3, 0x2a, 0x51, 0x34, 0xed, 0xab, 0xef, 0xfa, 0xb7, 0x88, 0x72, 0x21, 0xc2, 0x5e, 0x0f,
		0xc6, 0x45, 0x20, 0x9a, 0xeb, 0x35, 0xce, 0x25, 0x81, 0xc8, 0xd2, 0xe0, 0x35, 0x20, 0x1a, 0xff,
		0x79, 0xb1, 0x34, 0x38, 0xa2, 0xba, 0x0d, 0x05, 0xb9, 0x64, 0x44, 0x33, 0xbc, 0xee, 0xad, 0xce,
		0x71, 0xc5, 0x40, 0x13, 0xb2, 0xd6, 0xa8, 0xd7, 0x23, 0x21, 0xa6, 0xce, 0xfe, 0x89, 0x45, 0xf9,
		0xdf, 0xdf, 0xe3, 0xcb, 0x4b, 0x00, 0x30, 0x13, 0xa7, 0xcc, 0xfe, 0x09, 0x7a, 0x32, 0x02, 0xf9,
		0x1f, 0xef, 0x89, 0xb4, 0x42, 0xb4, 0x71, 0x55, 0x02, 0xdb, 0xc4, 0xd2, 0x33, 0xf5, 0x08, 0xec,
		0x7f, 0xbe, 0xc7, 0x5f, 0xfb, 0x8e, 0x21, 0x63, 0x02, 0xf6, 0x12, 0x79, 0x36, 0xc1, 0xf7, 0xfd,
		0x04, 0x74, 0xe3, 0xfb, 0x28, 0x64, 0xc8, 0x2f, 0x4d, 0x5c, 0xa3, 0x13, 0x85, 0xfe, 0x2f, 0x8e,
		0x16, 0xfa, 0xc4, 0x61, 0x7d, 0x7b, 0x68, 0xe2, 0x57, 0x27, 0x0a, 0xfb, 0xdf, 0x1c, 0xeb, 0x01,
		0x08, 0xb8, 0x69, 0x38, 0xee, 0x3c, 0xcf, 0xfd, 0x3f, 0x02, 0x2c, 0x00, 0xc4, 0x68, 0xf2, 0xfd,
		0x79, 0xf3, 0x34, 0x0a, 0xfb, 0x8e, 0x30, 0x9a, 0xeb, 0x63, 0x1a, 0xcd, 0x91, 0xaf, 0xec, 0xa7,
		0x10, 0x11, 0xe0, 0xff, 0xe5, 0xe0, 0x31, 0x62, 0xf3, 0x62, 0xf8, 0x51, 0x13, 0xec, 0xd8, 0x3b,
		0x36, 0x3b, 0x64, 0x82, 0x2f, 0x5f, 0x82, 0x8b, 0xa8, 0x83, 0x55, 0xfa, 0xb2, 0xb7, 0xa2, 0xf1,
		0xdb, 0xc0, 0xa1, 0xda, 0xeb, 0xfc, 0x9c, 0x28, 0xcf, 0xaf, 0xc8, 0xc0, 0xca, 0xd9, 0xce, 0x98,
		0x2a, 0x77, 0xc2, 0xc2, 0xd5, 0x9e, 0x6d, 0xb8, 0x58, 0x10, 0xeb, 0x76, 0xd7, 0x72, 0xd5, 0x02,
		0xc4, 0xda, 0xf4, 0x1c, 0x3e, 0xa6, 0xc5, 0xda, 0x95, 0x6f, 0xab, 0x90, 0xc1, 0xfe, 0x07, 0xd7,
		0xbb, 0xa3, 0x3e, 0x0d, 0x8b, 0xac, 0xeb, 0x38, 0xb2, 0xb7, 0xe9, 0x99, 0x27, 0x4a, 0xf9, 0xd1,
		0xe1, 0x03, 0x6b, 0x92, 0x09, 0x6b, 0x1c, 0xb0, 0x36, 0xa1, 0x4d, 0x5f, 0x84, 0x69, 0x8b, 0x4e,
		0x50, 0xae, 0x3e, 0x09, 0x8a, 0x50, 0xa6, 0xd6, 0x10, 0x66, 0x76, 0x60, 0xbc, 0x3a, 0x93, 0x59,
		0x28, 0x33, 0x62, 0xc5, 0x09, 0x88, 0xd5, 0xc7, 0x21, 0xbb, 0x6b, 0xb9, 0x1f, 0x5d, 0x27, 0x7c,
		0xec, 0x07, 0x8a, 0x95, 0x50, 0x3e, 0xa1, 0xc4, 0x78, 0xb2, 0x5d, 0x7e, 0xc9, 0xf1, 0x0f, 0x7f,
		0x8c, 0xe0, 0x93, 0xb3, 0xf1, 0x54, 0x69, 0x8c, 0xa7, 0x97, 0xe4, 0x07, 0x8e, 0xc7, 0x82, 0x8c,
		0xff, 0x2e, 0xf1, 0xee, 0x50, 0x02, 0x4f, 0x8b, 0x31, 0xe4, 0x46, 0x9e, 0x09, 0x9c, 0x82, 0xd9,
		0x90, 0x8e, 0xa0, 0x90, 0x8c, 0xa0, 0x14, 0x9e, 0x15, 0x0d, 0xcf, 0x8a, 0xcc, 0x0c, 0x8a, 0x46,
		0xc0, 0x0a, 0x47, 0xb6, 0xa2, 0xe1, 0x59, 0x91, 0x8d, 0xa0, 0x90, 0xad, 0x70, 0x3c, 0x2b, 0xb6,
		0x01, 0xae, 0x76, 0x6f, 0x9a, 0x2d, 0x66, 0x46, 0x8e, 0xbf, 0x7a, 0x08, 0xe3, 0x18, 0xab, 0x31,
		0x12, 0x68, 0x7b, 0x02, 0x75, 0x07, 0xf2, 0x8d, 0xf1, 0x25, 0xfd, 0xed, 0x22, 0xf9, 0x59, 0x66,
		0xa8, 0x29, 0xed, 0x00, 0x4f, 0xde, 0x91, 0x88, 0x84, 0x39, 0xec, 0x91, 0xf2, 0x51, 0xe6, 0x48,
		0xcf, 0xc4, 0xcc, 0x61, 0x0f, 0xe5, 0x99, 0xc3, 0x68, 0x0a, 0x91, 0xe6, 0x48, 0x3c, 0xdc, 0x1c,
		0x46, 0x84, 0x45, 0x6b, 0xd3, 0xb6, 0x89, 0x66, 0x79, 0x81, 0x92, 0x5c, 0x0c, 0x25, 0xe1, 0x3a,
		0x8c, 0x20, 0x73, 0xc2, 0xae, 0xe8, 0xec, 0xd0, 0xd0, 0x27, 0xf0, 0xe2, 0xac, 0xd9, 0x11, 0x5a,
		0x62, 0x76, 0xc4, 0xb5, 0xbc, 0x02, 0x37, 0x4f, 0xb1, 0x4f, 0x24, 0x4c, 0xa5, 0x39, 0x56, 0xa0,
		0x50, 0x0e, 0xac, 0x40, 0x21, 0x56, 0x1b, 0x50, 0x12, 0xaa, 0xe4, 0x6c, 0x80, 0xd0, 0x2a, 0xfc,
		0xc7, 0x66, 0xb3, 0x68, 0xb9, 0x2e, 0x63, 0x2d, 0x39, 0x7e, 0xa9, 0x5a, 0x87, 0xa2, 0x50, 0xdc,
		0x77, 0xe8, 0x43, 0x2f, 0xf2, 0x37, 0x18, 0xb3, 0x38, 0x99, 0x2a, 0xa3, 0x2c, 0x3a, 0x3e, 0xe1,
		0xca, 0x36, 0x9c, 0x0b, 0xcf, 0x56, 0xe4, 0x87, 0xaa, 0x98, 0xeb, 0xf9, 0xaf, 0x8a, 0xc8, 0x57,
		0xf2, 0x83, 0x56, 0xf1, 0xab, 0x39, 0x92, 0x25, 0xd9, 0x45, 0x35, 0x7e, 0x25, 0xb6, 0xb2, 0x05,
		0xb7, 0x86, 0x66, 0xa6, 0x28, 0x92, 0xb8, 0x4c, 0xf2, 0x18, 0x2c, 0xf8, 0xd2, 0x91, 0x0c, 0x4e,
		0x85, 0x80, 0x53, 0x93, 0xe0, 0x71, 0x90, 0xc9, 0xe0, 0x44, 0x08, 0x38, 0x21, 0x83, 0x3f, 0x0e,
		0x45, 0x7f, 0x1e, 0x92, 0xd1, 0x0b, 0x21, 0xe8, 0x85, 0x10, 0x74, 0xf8, 0xbd, 0x93, 0x21, 0xe8,
		0x64, 0x00, 0xdd, 0x98, 0x7a, 0xef, 0xc5, 0x10, 0xf4, 0x62, 0x08, 0x3a, 0xfc, 0xde, 0x6a, 0x08,
		0x5a, 0x95, 0xd1, 0x9f, 0x80, 0x52, 0x20, 0xe5, 0xc8, 0xf0, 0x4c, 0x08, 0x3c, 0x23, 0xc3, 0x1f,
		0xc7, 0xa5, 0xd3, 0x9e, 0x8e, 0x2f, 0x85, 0xe0, 0x4b, 0x61, 0xb7, 0x0f, 0xb7, 0x3e, 0x1d, 0x02,
		0x4f, 0x87, 0xde, 0x3e, 0x1c, 0xaf, 0x84, 0xe0, 0x15, 0x19, 0x5f, 0x85, 0x82, 0x9c, 0x55, 0x64,
		0x6c, 0x36, 0x04, 0x9b, 0x0d, 0xfa, 0xdd, 0x97, 0x52, 0xa2, 0x22, 0x3d, 0x37, 0x65, 0xb9, 0xf8,
		0xd2, 0x48, 0x14, 0x49, 0x41, 0x26, 0xb9, 0x0e, 0xcb, 0x61, 0x49, 0x23, 0x84, 0x63, 0x55, 0xe6,
		0x28, 0xae, 0x2f, 0xfb, 0x92, 0x05, 0xc5, 0x8d, 0xfa, 0x32, 0xf3, 0xb3, 0xb0, 0x14, 0x92, 0x3a,
		0x42, 0x88, 0x1f, 0x94, 0x89, 0xf3, 0xeb, 0x2b, 0x3e, 0x62, 0x5f, 0x77, 0x25, 0xd1, 0x57, 0xbe,
		0xb3, 0x04, 0x45, 0x9e, 0xa2, 0x0e, 0x87, 0x2d, 0x73, 0x88, 0x0d, 0xff, 0xcf, 0x4d, 0xef, 0xb0,
		0xd6, 0xc3, 0x52, 0x1b, 0xc7, 0x9d, 0xa1, 0xd1, 0x7a, 0x76, 0x6a, 0xa3, 0xf5, 0x91, 0x79, 0x6e,
		0x10, 0xd5, 0x6f, 0xd5, 0x26, 0xfa, 0xad, 0xfb, 0x67, 0xd1, 0x4e, 0x6b, 0xbb, 0x6a, 0x13, 0x6d,
		0x57, 0x14, 0x4d, 0x68, 0xf7, 0x75, 0x6d, 0xb2, 0xfb, 0x5a, 0x9d, 0xc5, 0x33, 0xbd, 0x09, 0xbb,
		0x36, 0xd9, 0x84, 0x45, 0x32, 0x85, 0xf7, 0x62, 0xd7, 0x26, 0x7b, 0xb1, 0x99, 0x4c, 0xd3, 0x5b,
		0xb2, 0x6b, 0x93, 0x2d, 0x59, 0x24, 0x53, 0x78, 0x67, 0xf6, 0xa9, 0x90, 0xce, 0xec, 0x81, 0x59,
		0x54, 0xb3, 0x1a, 0xb4, 0x83, 0xb0, 0x06, 0xed, 0x43, 0x33, 0x0d, 0x9b, 0xd9, 0xa7, 0x7d, 0x2a,
		0xa4, 0x4f, 0x8b, 0x36, 0x6e, 0x4a, 0xbb, 0x76, 0x10, 0xd6, 0xae, 0xcd, 0x61, 0xdc, 0xb4, 0xae,
		0x6d, 0x33, 0xd8, 0xb5, 0x5d, 0x9a, 0xc5, 0x15, 0xde, 0xbc, 0x5d, 0x9b, 0x6c, 0xde, 0x56, 0xa3,
		0xd7, 0x62, 0x58, 0x0f, 0xf7, 0xec, 0xd4, 0x1e, 0x6e, 0xae, 0xc5, 0x1d, 0xd5, 0xca, 0x3d, 0x33,
		0xad, 0x95, 0x7b, 0x70, 0x1e, 0xf6, 0xd9, 0x1d, 0xdd, 0x53, 0x53, 0x3a, 0xba, 0xcb, 0xf3, 0x50,
		0xbf, 0xdf, 0xd8, 0xbd, 0xdf, 0xd8, 0xbd, 0xdf, 0xd8, 0xbd, 0xdf, 0xd8, 0xfd, 0x74, 0x34, 0x76,
		0xd5, 0xe4, 0x2b, 0x5f, 0xb8, 0x10, 0x5b, 0xbd, 0x08, 0x19, 0x7e, 0x6b, 0x35, 0x0d, 0xf1, 0xfd,
		0x0d, 0xe5, 0x16, 0xfa, 0x7f, 0x53, 0x89, 0xd1, 0xff, 0x5b, 0x4a, 0x7c, 0x73, 0xef, 0x9b, 0xdf,
		0x3d, 0x7f, 0xcb, 0xb7, 0xf0, 0xf3, 0x6d, 0xfc, 0xfc, 0xcb, 0x77, 0xcf, 0xc7, 0xde, 0xc6, 0xcf,
		0x3b, 0xf8, 0xf9, 0x01, 0x7e, 0x5e, 0xfa, 0xde, 0xf9, 0xd8, 0x97, 0xf0, 0xf3, 0x55, 0xfc, 0xfc,
		0x0d, 0x7e, 0xbe, 0x8e, 0x9f, 0x6f, 0xe2, 0xe7, 0x5b, 0xdf, 0x43, 0x5d, 0xfc, 0xff, 0x36, 0xfe,
		0x7f, 0x07, 0xff, 0xff, 0x00, 0xff, 0xbf, 0xf4, 0xaf, 0xe7, 0x6f, 0xf9, 0xff, 0x00, 0x00, 0x00,
		0xff, 0xff, 0xac, 0xcd, 0x67, 0x36, 0x26, 0x3f, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (x MapEnum) String() string {
	s, ok := MapEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FloatingPoint) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FloatingPoint)
	if !ok {
		that2, ok := that.(FloatingPoint)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FloatingPoint")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FloatingPoint but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FloatingPoint but is not nil && this == nil")
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return fmt.Errorf("F this(%v) Not Equal that(%v)", *this.F, *that1.F)
		}
	} else if this.F != nil {
		return fmt.Errorf("this.F == nil && that.F != nil")
	} else if that1.F != nil {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FloatingPoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FloatingPoint)
	if !ok {
		that2, ok := that.(FloatingPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return false
		}
	} else if this.F != nil {
		return false
	} else if that1.F != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllMaps) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllMaps)
	if !ok {
		that2, ok := that.(AllMaps)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllMaps")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllMaps but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllMaps but is not nil && this == nil")
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return fmt.Errorf("StringToDoubleMap this(%v) Not Equal that(%v)", len(this.StringToDoubleMap), len(that1.StringToDoubleMap))
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return fmt.Errorf("StringToDoubleMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToDoubleMap[i], i, that1.StringToDoubleMap[i])
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return fmt.Errorf("StringToFloatMap this(%v) Not Equal that(%v)", len(this.StringToFloatMap), len(that1.StringToFloatMap))
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return fmt.Errorf("StringToFloatMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToFloatMap[i], i, that1.StringToFloatMap[i])
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return fmt.Errorf("Int32Map this(%v) Not Equal that(%v)", len(this.Int32Map), len(that1.Int32Map))
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return fmt.Errorf("Int32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int32Map[i], i, that1.Int32Map[i])
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return fmt.Errorf("Int64Map this(%v) Not Equal that(%v)", len(this.Int64Map), len(that1.Int64Map))
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return fmt.Errorf("Int64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int64Map[i], i, that1.Int64Map[i])
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return fmt.Errorf("Uint32Map this(%v) Not Equal that(%v)", len(this.Uint32Map), len(that1.Uint32Map))
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return fmt.Errorf("Uint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint32Map[i], i, that1.Uint32Map[i])
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return fmt.Errorf("Uint64Map this(%v) Not Equal that(%v)", len(this.Uint64Map), len(that1.Uint64Map))
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return fmt.Errorf("Uint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint64Map[i], i, that1.Uint64Map[i])
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return fmt.Errorf("Sint32Map this(%v) Not Equal that(%v)", len(this.Sint32Map), len(that1.Sint32Map))
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return fmt.Errorf("Sint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint32Map[i], i, that1.Sint32Map[i])
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return fmt.Errorf("Sint64Map this(%v) Not Equal that(%v)", len(this.Sint64Map), len(that1.Sint64Map))
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return fmt.Errorf("Sint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint64Map[i], i, that1.Sint64Map[i])
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return fmt.Errorf("Fixed32Map this(%v) Not Equal that(%v)", len(this.Fixed32Map), len(that1.Fixed32Map))
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return fmt.Errorf("Fixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed32Map[i], i, that1.Fixed32Map[i])
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return fmt.Errorf("Sfixed32Map this(%v) Not Equal that(%v)", len(this.Sfixed32Map), len(that1.Sfixed32Map))
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return fmt.Errorf("Sfixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed32Map[i], i, that1.Sfixed32Map[i])
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return fmt.Errorf("Fixed64Map this(%v) Not Equal that(%v)", len(this.Fixed64Map), len(that1.Fixed64Map))
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return fmt.Errorf("Fixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed64Map[i], i, that1.Fixed64Map[i])
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return fmt.Errorf("Sfixed64Map this(%v) Not Equal that(%v)", len(this.Sfixed64Map), len(that1.Sfixed64Map))
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return fmt.Errorf("Sfixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed64Map[i], i, that1.Sfixed64Map[i])
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return fmt.Errorf("BoolMap this(%v) Not Equal that(%v)", len(this.BoolMap), len(that1.BoolMap))
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return fmt.Errorf("BoolMap this[%v](%v) Not Equal that[%v](%v)", i, this.BoolMap[i], i, that1.BoolMap[i])
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return fmt.Errorf("StringMap this(%v) Not Equal that(%v)", len(this.StringMap), len(that1.StringMap))
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return fmt.Errorf("StringMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringMap[i], i, that1.StringMap[i])
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return fmt.Errorf("StringToBytesMap this(%v) Not Equal that(%v)", len(this.StringToBytesMap), len(that1.StringToBytesMap))
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return fmt.Errorf("StringToBytesMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToBytesMap[i], i, that1.StringToBytesMap[i])
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return fmt.Errorf("StringToEnumMap this(%v) Not Equal that(%v)", len(this.StringToEnumMap), len(that1.StringToEnumMap))
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return fmt.Errorf("StringToEnumMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToEnumMap[i], i, that1.StringToEnumMap[i])
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return fmt.Errorf("StringToMsgMap this(%v) Not Equal that(%v)", len(this.StringToMsgMap), len(that1.StringToMsgMap))
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return fmt.Errorf("StringToMsgMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToMsgMap[i], i, that1.StringToMsgMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllMaps) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllMaps)
	if !ok {
		that2, ok := that.(AllMaps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return false
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return false
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return false
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return false
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return false
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return false
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return false
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return false
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return false
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return false
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return false
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return false
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return false
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return false
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return false
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return false
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return false
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return false
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return false
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return false
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return false
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return false
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return false
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return false
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return false
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return false
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return false
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return false
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return false
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return false
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return false
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllMapsOrdered) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllMapsOrdered)
	if !ok {
		that2, ok := that.(AllMapsOrdered)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllMapsOrdered")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllMapsOrdered but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllMapsOrdered but is not nil && this == nil")
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return fmt.Errorf("StringToDoubleMap this(%v) Not Equal that(%v)", len(this.StringToDoubleMap), len(that1.StringToDoubleMap))
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return fmt.Errorf("StringToDoubleMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToDoubleMap[i], i, that1.StringToDoubleMap[i])
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return fmt.Errorf("StringToFloatMap this(%v) Not Equal that(%v)", len(this.StringToFloatMap), len(that1.StringToFloatMap))
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return fmt.Errorf("StringToFloatMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToFloatMap[i], i, that1.StringToFloatMap[i])
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return fmt.Errorf("Int32Map this(%v) Not Equal that(%v)", len(this.Int32Map), len(that1.Int32Map))
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return fmt.Errorf("Int32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int32Map[i], i, that1.Int32Map[i])
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return fmt.Errorf("Int64Map this(%v) Not Equal that(%v)", len(this.Int64Map), len(that1.Int64Map))
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return fmt.Errorf("Int64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int64Map[i], i, that1.Int64Map[i])
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return fmt.Errorf("Uint32Map this(%v) Not Equal that(%v)", len(this.Uint32Map), len(that1.Uint32Map))
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return fmt.Errorf("Uint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint32Map[i], i, that1.Uint32Map[i])
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return fmt.Errorf("Uint64Map this(%v) Not Equal that(%v)", len(this.Uint64Map), len(that1.Uint64Map))
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return fmt.Errorf("Uint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint64Map[i], i, that1.Uint64Map[i])
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return fmt.Errorf("Sint32Map this(%v) Not Equal that(%v)", len(this.Sint32Map), len(that1.Sint32Map))
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return fmt.Errorf("Sint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint32Map[i], i, that1.Sint32Map[i])
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return fmt.Errorf("Sint64Map this(%v) Not Equal that(%v)", len(this.Sint64Map), len(that1.Sint64Map))
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return fmt.Errorf("Sint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint64Map[i], i, that1.Sint64Map[i])
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return fmt.Errorf("Fixed32Map this(%v) Not Equal that(%v)", len(this.Fixed32Map), len(that1.Fixed32Map))
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return fmt.Errorf("Fixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed32Map[i], i, that1.Fixed32Map[i])
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return fmt.Errorf("Sfixed32Map this(%v) Not Equal that(%v)", len(this.Sfixed32Map), len(that1.Sfixed32Map))
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return fmt.Errorf("Sfixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed32Map[i], i, that1.Sfixed32Map[i])
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return fmt.Errorf("Fixed64Map this(%v) Not Equal that(%v)", len(this.Fixed64Map), len(that1.Fixed64Map))
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return fmt.Errorf("Fixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed64Map[i], i, that1.Fixed64Map[i])
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return fmt.Errorf("Sfixed64Map this(%v) Not Equal that(%v)", len(this.Sfixed64Map), len(that1.Sfixed64Map))
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return fmt.Errorf("Sfixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed64Map[i], i, that1.Sfixed64Map[i])
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return fmt.Errorf("BoolMap this(%v) Not Equal that(%v)", len(this.BoolMap), len(that1.BoolMap))
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return fmt.Errorf("BoolMap this[%v](%v) Not Equal that[%v](%v)", i, this.BoolMap[i], i, that1.BoolMap[i])
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return fmt.Errorf("StringMap this(%v) Not Equal that(%v)", len(this.StringMap), len(that1.StringMap))
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return fmt.Errorf("StringMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringMap[i], i, that1.StringMap[i])
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return fmt.Errorf("StringToBytesMap this(%v) Not Equal that(%v)", len(this.StringToBytesMap), len(that1.StringToBytesMap))
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return fmt.Errorf("StringToBytesMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToBytesMap[i], i, that1.StringToBytesMap[i])
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return fmt.Errorf("StringToEnumMap this(%v) Not Equal that(%v)", len(this.StringToEnumMap), len(that1.StringToEnumMap))
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return fmt.Errorf("StringToEnumMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToEnumMap[i], i, that1.StringToEnumMap[i])
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return fmt.Errorf("StringToMsgMap this(%v) Not Equal that(%v)", len(this.StringToMsgMap), len(that1.StringToMsgMap))
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return fmt.Errorf("StringToMsgMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToMsgMap[i], i, that1.StringToMsgMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllMapsOrdered) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllMapsOrdered)
	if !ok {
		that2, ok := that.(AllMapsOrdered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return false
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return false
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return false
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return false
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return false
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return false
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return false
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return false
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return false
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return false
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return false
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return false
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return false
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return false
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return false
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return false
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return false
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return false
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return false
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return false
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return false
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return false
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return false
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return false
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return false
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return false
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return false
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return false
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return false
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return false
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return false
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type FloatingPointFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetF() *float64
}

func (this *FloatingPoint) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *FloatingPoint) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewFloatingPointFromFace(this)
}

func (this *FloatingPoint) GetF() *float64 {
	return this.F
}

func NewFloatingPointFromFace(that FloatingPointFace) *FloatingPoint {
	this := &FloatingPoint{}
	this.F = that.GetF()
	return this
}

type AllMapsFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStringToDoubleMap() map[string]float64
	GetStringToFloatMap() map[string]float32
	GetInt32Map() map[int32]int32
	GetInt64Map() map[int64]int64
	GetUint32Map() map[uint32]uint32
	GetUint64Map() map[uint64]uint64
	GetSint32Map() map[int32]int32
	GetSint64Map() map[int64]int64
	GetFixed32Map() map[uint32]uint32
	GetSfixed32Map() map[int32]int32
	GetFixed64Map() map[uint64]uint64
	GetSfixed64Map() map[int64]int64
	GetBoolMap() map[bool]bool
	GetStringMap() map[string]string
	GetStringToBytesMap() map[string][]byte
	GetStringToEnumMap() map[string]MapEnum
	GetStringToMsgMap() map[string]*FloatingPoint
}

func (this *AllMaps) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *AllMaps) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewAllMapsFromFace(this)
}

func (this *AllMaps) GetStringToDoubleMap() map[string]float64 {
	return this.StringToDoubleMap
}

func (this *AllMaps) GetStringToFloatMap() map[string]float32 {
	return this.StringToFloatMap
}

func (this *AllMaps) GetInt32Map() map[int32]int32 {
	return this.Int32Map
}

func (this *AllMaps) GetInt64Map() map[int64]int64 {
	return this.Int64Map
}

func (this *AllMaps) GetUint32Map() map[uint32]uint32 {
	return this.Uint32Map
}

func (this *AllMaps) GetUint64Map() map[uint64]uint64 {
	return this.Uint64Map
}

func (this *AllMaps) GetSint32Map() map[int32]int32 {
	return this.Sint32Map
}

func (this *AllMaps) GetSint64Map() map[int64]int64 {
	return this.Sint64Map
}

func (this *AllMaps) GetFixed32Map() map[uint32]uint32 {
	return this.Fixed32Map
}

func (this *AllMaps) GetSfixed32Map() map[int32]int32 {
	return this.Sfixed32Map
}

func (this *AllMaps) GetFixed64Map() map[uint64]uint64 {
	return this.Fixed64Map
}

func (this *AllMaps) GetSfixed64Map() map[int64]int64 {
	return this.Sfixed64Map
}

func (this *AllMaps) GetBoolMap() map[bool]bool {
	return this.BoolMap
}

func (this *AllMaps) GetStringMap() map[string]string {
	return this.StringMap
}

func (this *AllMaps) GetStringToBytesMap() map[string][]byte {
	return this.StringToBytesMap
}

func (this *AllMaps) GetStringToEnumMap() map[string]MapEnum {
	return this.StringToEnumMap
}

func (this *AllMaps) GetStringToMsgMap() map[string]*FloatingPoint {
	return this.StringToMsgMap
}

func NewAllMapsFromFace(that AllMapsFace) *AllMaps {
	this := &AllMaps{}
	this.StringToDoubleMap = that.GetStringToDoubleMap()
	this.StringToFloatMap = that.GetStringToFloatMap()
	this.Int32Map = that.GetInt32Map()
	this.Int64Map = that.GetInt64Map()
	this.Uint32Map = that.GetUint32Map()
	this.Uint64Map = that.GetUint64Map()
	this.Sint32Map = that.GetSint32Map()
	this.Sint64Map = that.GetSint64Map()
	this.Fixed32Map = that.GetFixed32Map()
	this.Sfixed32Map = that.GetSfixed32Map()
	this.Fixed64Map = that.GetFixed64Map()
	this.Sfixed64Map = that.GetSfixed64Map()
	this.BoolMap = that.GetBoolMap()
	this.StringMap = that.GetStringMap()
	this.StringToBytesMap = that.GetStringToBytesMap()
	this.StringToEnumMap = that.GetStringToEnumMap()
	this.StringToMsgMap = that.GetStringToMsgMap()
	return this
}

type AllMapsOrderedFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStringToDoubleMap() map[string]float64
	GetStringToFloatMap() map[string]float32
	GetInt32Map() map[int32]int32
	GetInt64Map() map[int64]int64
	GetUint32Map() map[uint32]uint32
	GetUint64Map() map[uint64]uint64
	GetSint32Map() map[int32]int32
	GetSint64Map() map[int64]int64
	GetFixed32Map() map[uint32]uint32
	GetSfixed32Map() map[int32]int32
	GetFixed64Map() map[uint64]uint64
	GetSfixed64Map() map[int64]int64
	GetBoolMap() map[bool]bool
	GetStringMap() map[string]string
	GetStringToBytesMap() map[string][]byte
	GetStringToEnumMap() map[string]MapEnum
	GetStringToMsgMap() map[string]*FloatingPoint
}

func (this *AllMapsOrdered) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *AllMapsOrdered) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewAllMapsOrderedFromFace(this)
}

func (this *AllMapsOrdered) GetStringToDoubleMap() map[string]float64 {
	return this.StringToDoubleMap
}

func (this *AllMapsOrdered) GetStringToFloatMap() map[string]float32 {
	return this.StringToFloatMap
}

func (this *AllMapsOrdered) GetInt32Map() map[int32]int32 {
	return this.Int32Map
}

func (this *AllMapsOrdered) GetInt64Map() map[int64]int64 {
	return this.Int64Map
}

func (this *AllMapsOrdered) GetUint32Map() map[uint32]uint32 {
	return this.Uint32Map
}

func (this *AllMapsOrdered) GetUint64Map() map[uint64]uint64 {
	return this.Uint64Map
}

func (this *AllMapsOrdered) GetSint32Map() map[int32]int32 {
	return this.Sint32Map
}

func (this *AllMapsOrdered) GetSint64Map() map[int64]int64 {
	return this.Sint64Map
}

func (this *AllMapsOrdered) GetFixed32Map() map[uint32]uint32 {
	return this.Fixed32Map
}

func (this *AllMapsOrdered) GetSfixed32Map() map[int32]int32 {
	return this.Sfixed32Map
}

func (this *AllMapsOrdered) GetFixed64Map() map[uint64]uint64 {
	return this.Fixed64Map
}

func (this *AllMapsOrdered) GetSfixed64Map() map[int64]int64 {
	return this.Sfixed64Map
}

func (this *AllMapsOrdered) GetBoolMap() map[bool]bool {
	return this.BoolMap
}

func (this *AllMapsOrdered) GetStringMap() map[string]string {
	return this.StringMap
}

func (this *AllMapsOrdered) GetStringToBytesMap() map[string][]byte {
	return this.StringToBytesMap
}

func (this *AllMapsOrdered) GetStringToEnumMap() map[string]MapEnum {
	return this.StringToEnumMap
}

func (this *AllMapsOrdered) GetStringToMsgMap() map[string]*FloatingPoint {
	return this.StringToMsgMap
}

func NewAllMapsOrderedFromFace(that AllMapsOrderedFace) *AllMapsOrdered {
	this := &AllMapsOrdered{}
	this.StringToDoubleMap = that.GetStringToDoubleMap()
	this.StringToFloatMap = that.GetStringToFloatMap()
	this.Int32Map = that.GetInt32Map()
	this.Int64Map = that.GetInt64Map()
	this.Uint32Map = that.GetUint32Map()
	this.Uint64Map = that.GetUint64Map()
	this.Sint32Map = that.GetSint32Map()
	this.Sint64Map = that.GetSint64Map()
	this.Fixed32Map = that.GetFixed32Map()
	this.Sfixed32Map = that.GetSfixed32Map()
	this.Fixed64Map = that.GetFixed64Map()
	this.Sfixed64Map = that.GetSfixed64Map()
	this.BoolMap = that.GetBoolMap()
	this.StringMap = that.GetStringMap()
	this.StringToBytesMap = that.GetStringToBytesMap()
	this.StringToEnumMap = that.GetStringToEnumMap()
	this.StringToMsgMap = that.GetStringToMsgMap()
	return this
}

func (this *FloatingPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto2_maps.FloatingPoint{")
	if this.F != nil {
		s = append(s, "F: "+valueToGoStringMapsproto2(this.F, "float64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllMaps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&proto2_maps.AllMaps{")
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%#v: %#v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	if this.StringToDoubleMap != nil {
		s = append(s, "StringToDoubleMap: "+mapStringForStringToDoubleMap+",\n")
	}
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%#v: %#v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	if this.StringToFloatMap != nil {
		s = append(s, "StringToFloatMap: "+mapStringForStringToFloatMap+",\n")
	}
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%#v: %#v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	if this.Int32Map != nil {
		s = append(s, "Int32Map: "+mapStringForInt32Map+",\n")
	}
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%#v: %#v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	if this.Uint32Map != nil {
		s = append(s, "Uint32Map: "+mapStringForUint32Map+",\n")
	}
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%#v: %#v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	if this.Uint64Map != nil {
		s = append(s, "Uint64Map: "+mapStringForUint64Map+",\n")
	}
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%#v: %#v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	if this.Sint32Map != nil {
		s = append(s, "Sint32Map: "+mapStringForSint32Map+",\n")
	}
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%#v: %#v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	if this.Sint64Map != nil {
		s = append(s, "Sint64Map: "+mapStringForSint64Map+",\n")
	}
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	if this.Fixed32Map != nil {
		s = append(s, "Fixed32Map: "+mapStringForFixed32Map+",\n")
	}
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	if this.Sfixed32Map != nil {
		s = append(s, "Sfixed32Map: "+mapStringForSfixed32Map+",\n")
	}
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	if this.Fixed64Map != nil {
		s = append(s, "Fixed64Map: "+mapStringForFixed64Map+",\n")
	}
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	if this.Sfixed64Map != nil {
		s = append(s, "Sfixed64Map: "+mapStringForSfixed64Map+",\n")
	}
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%#v: %#v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	if this.BoolMap != nil {
		s = append(s, "BoolMap: "+mapStringForBoolMap+",\n")
	}
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%#v: %#v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	if this.StringMap != nil {
		s = append(s, "StringMap: "+mapStringForStringMap+",\n")
	}
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%#v: %#v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	if this.StringToBytesMap != nil {
		s = append(s, "StringToBytesMap: "+mapStringForStringToBytesMap+",\n")
	}
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%#v: %#v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	if this.StringToEnumMap != nil {
		s = append(s, "StringToEnumMap: "+mapStringForStringToEnumMap+",\n")
	}
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%#v: %#v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	if this.StringToMsgMap != nil {
		s = append(s, "StringToMsgMap: "+mapStringForStringToMsgMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllMapsOrdered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&proto2_maps.AllMapsOrdered{")
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%#v: %#v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	if this.StringToDoubleMap != nil {
		s = append(s, "StringToDoubleMap: "+mapStringForStringToDoubleMap+",\n")
	}
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%#v: %#v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	if this.StringToFloatMap != nil {
		s = append(s, "StringToFloatMap: "+mapStringForStringToFloatMap+",\n")
	}
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%#v: %#v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	if this.Int32Map != nil {
		s = append(s, "Int32Map: "+mapStringForInt32Map+",\n")
	}
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%#v: %#v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	if this.Uint32Map != nil {
		s = append(s, "Uint32Map: "+mapStringForUint32Map+",\n")
	}
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%#v: %#v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	if this.Uint64Map != nil {
		s = append(s, "Uint64Map: "+mapStringForUint64Map+",\n")
	}
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%#v: %#v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	if this.Sint32Map != nil {
		s = append(s, "Sint32Map: "+mapStringForSint32Map+",\n")
	}
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%#v: %#v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	if this.Sint64Map != nil {
		s = append(s, "Sint64Map: "+mapStringForSint64Map+",\n")
	}
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	if this.Fixed32Map != nil {
		s = append(s, "Fixed32Map: "+mapStringForFixed32Map+",\n")
	}
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	if this.Sfixed32Map != nil {
		s = append(s, "Sfixed32Map: "+mapStringForSfixed32Map+",\n")
	}
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	if this.Fixed64Map != nil {
		s = append(s, "Fixed64Map: "+mapStringForFixed64Map+",\n")
	}
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	if this.Sfixed64Map != nil {
		s = append(s, "Sfixed64Map: "+mapStringForSfixed64Map+",\n")
	}
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%#v: %#v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	if this.BoolMap != nil {
		s = append(s, "BoolMap: "+mapStringForBoolMap+",\n")
	}
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%#v: %#v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	if this.StringMap != nil {
		s = append(s, "StringMap: "+mapStringForStringMap+",\n")
	}
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%#v: %#v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	if this.StringToBytesMap != nil {
		s = append(s, "StringToBytesMap: "+mapStringForStringToBytesMap+",\n")
	}
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%#v: %#v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	if this.StringToEnumMap != nil {
		s = append(s, "StringToEnumMap: "+mapStringForStringToEnumMap+",\n")
	}
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%#v: %#v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	if this.StringToMsgMap != nil {
		s = append(s, "StringToMsgMap: "+mapStringForStringToMsgMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMapsproto2(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMapsproto2(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *FloatingPoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FloatingPoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F != nil {
		data[i] = 0x9
		i++
		i = encodeFixed64Mapsproto2(data, i, uint64(math.Float64bits(float64(*m.F))))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllMaps) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AllMaps) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k := range m.StringToDoubleMap {
			data[i] = 0xa
			i++
			v := m.StringToDoubleMap[k]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x11
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(math.Float64bits(float64(v))))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k := range m.StringToFloatMap {
			data[i] = 0x12
			i++
			v := m.StringToFloatMap[k]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x15
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(math.Float32bits(float32(v))))
		}
	}
	if len(m.Int32Map) > 0 {
		for k := range m.Int32Map {
			data[i] = 0x1a
			i++
			v := m.Int32Map[k]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Int64Map) > 0 {
		for k := range m.Int64Map {
			data[i] = 0x22
			i++
			v := m.Int64Map[k]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k := range m.Uint32Map {
			data[i] = 0x2a
			i++
			v := m.Uint32Map[k]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k := range m.Uint64Map {
			data[i] = 0x32
			i++
			v := m.Uint64Map[k]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k := range m.Sint32Map {
			data[i] = 0x3a
			i++
			v := m.Sint32Map[k]
			mapSize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint32(k)<<1)^uint32((k>>31))))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint32(v)<<1)^uint32((v>>31))))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k := range m.Sint64Map {
			data[i] = 0x42
			i++
			v := m.Sint64Map[k]
			mapSize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint64(k)<<1)^uint64((k>>63))))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint64(v)<<1)^uint64((v>>63))))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k := range m.Fixed32Map {
			data[i] = 0x4a
			i++
			v := m.Fixed32Map[k]
			mapSize := 1 + 4 + 1 + 4
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xd
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(k))
			data[i] = 0x15
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(v))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k := range m.Sfixed32Map {
			data[i] = 0x52
			i++
			v := m.Sfixed32Map[k]
			mapSize := 1 + 4 + 1 + 4
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xd
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(k))
			data[i] = 0x15
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(v))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k := range m.Fixed64Map {
			data[i] = 0x5a
			i++
			v := m.Fixed64Map[k]
			mapSize := 1 + 8 + 1 + 8
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x9
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(k))
			data[i] = 0x11
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k := range m.Sfixed64Map {
			data[i] = 0x62
			i++
			v := m.Sfixed64Map[k]
			mapSize := 1 + 8 + 1 + 8
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x9
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(k))
			data[i] = 0x11
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(v))
		}
	}
	if len(m.BoolMap) > 0 {
		for k := range m.BoolMap {
			data[i] = 0x6a
			i++
			v := m.BoolMap[k]
			mapSize := 1 + 1 + 1 + 1
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			if k {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
			data[i] = 0x10
			i++
			if v {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if len(m.StringMap) > 0 {
		for k := range m.StringMap {
			data[i] = 0x72
			i++
			v := m.StringMap[k]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k := range m.StringToBytesMap {
			data[i] = 0x7a
			i++
			v := m.StringToBytesMap[k]
			byteSize := 0
			if v != nil {
				byteSize = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + byteSize
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintMapsproto2(data, i, uint64(len(v)))
				i += copy(data[i:], v)
			}
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k := range m.StringToEnumMap {
			data[i] = 0x82
			i++
			data[i] = 0x1
			i++
			v := m.StringToEnumMap[k]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k := range m.StringToMsgMap {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			v := m.StringToMsgMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMapsproto2(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + msgSize
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintMapsproto2(data, i, uint64(v.Size()))
				n1, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllMapsOrdered) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AllMapsOrdered) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		keysForStringToDoubleMap := make([]string, 0, len(m.StringToDoubleMap))
		for k := range m.StringToDoubleMap {
			keysForStringToDoubleMap = append(keysForStringToDoubleMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
		for _, k := range keysForStringToDoubleMap {
			data[i] = 0xa
			i++
			v := m.StringToDoubleMap[string(k)]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x11
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(math.Float64bits(float64(v))))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		keysForStringToFloatMap := make([]string, 0, len(m.StringToFloatMap))
		for k := range m.StringToFloatMap {
			keysForStringToFloatMap = append(keysForStringToFloatMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
		for _, k := range keysForStringToFloatMap {
			data[i] = 0x12
			i++
			v := m.StringToFloatMap[string(k)]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x15
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(math.Float32bits(float32(v))))
		}
	}
	if len(m.Int32Map) > 0 {
		keysForInt32Map := make([]int32, 0, len(m.Int32Map))
		for k := range m.Int32Map {
			keysForInt32Map = append(keysForInt32Map, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
		for _, k := range keysForInt32Map {
			data[i] = 0x1a
			i++
			v := m.Int32Map[int32(k)]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Int64Map) > 0 {
		keysForInt64Map := make([]int64, 0, len(m.Int64Map))
		for k := range m.Int64Map {
			keysForInt64Map = append(keysForInt64Map, int64(k))
		}
		github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
		for _, k := range keysForInt64Map {
			data[i] = 0x22
			i++
			v := m.Int64Map[int64(k)]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Uint32Map) > 0 {
		keysForUint32Map := make([]uint32, 0, len(m.Uint32Map))
		for k := range m.Uint32Map {
			keysForUint32Map = append(keysForUint32Map, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
		for _, k := range keysForUint32Map {
			data[i] = 0x2a
			i++
			v := m.Uint32Map[uint32(k)]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Uint64Map) > 0 {
		keysForUint64Map := make([]uint64, 0, len(m.Uint64Map))
		for k := range m.Uint64Map {
			keysForUint64Map = append(keysForUint64Map, uint64(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
		for _, k := range keysForUint64Map {
			data[i] = 0x32
			i++
			v := m.Uint64Map[uint64(k)]
			mapSize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64(k))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Sint32Map) > 0 {
		keysForSint32Map := make([]int32, 0, len(m.Sint32Map))
		for k := range m.Sint32Map {
			keysForSint32Map = append(keysForSint32Map, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
		for _, k := range keysForSint32Map {
			data[i] = 0x3a
			i++
			v := m.Sint32Map[int32(k)]
			mapSize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint32(k)<<1)^uint32((k>>31))))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint32(v)<<1)^uint32((v>>31))))
		}
	}
	if len(m.Sint64Map) > 0 {
		keysForSint64Map := make([]int64, 0, len(m.Sint64Map))
		for k := range m.Sint64Map {
			keysForSint64Map = append(keysForSint64Map, int64(k))
		}
		github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
		for _, k := range keysForSint64Map {
			data[i] = 0x42
			i++
			v := m.Sint64Map[int64(k)]
			mapSize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint64(k)<<1)^uint64((k>>63))))
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64((uint64(v)<<1)^uint64((v>>63))))
		}
	}
	if len(m.Fixed32Map) > 0 {
		keysForFixed32Map := make([]uint32, 0, len(m.Fixed32Map))
		for k := range m.Fixed32Map {
			keysForFixed32Map = append(keysForFixed32Map, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
		for _, k := range keysForFixed32Map {
			data[i] = 0x4a
			i++
			v := m.Fixed32Map[uint32(k)]
			mapSize := 1 + 4 + 1 + 4
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xd
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(k))
			data[i] = 0x15
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(v))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		keysForSfixed32Map := make([]int32, 0, len(m.Sfixed32Map))
		for k := range m.Sfixed32Map {
			keysForSfixed32Map = append(keysForSfixed32Map, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
		for _, k := range keysForSfixed32Map {
			data[i] = 0x52
			i++
			v := m.Sfixed32Map[int32(k)]
			mapSize := 1 + 4 + 1 + 4
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xd
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(k))
			data[i] = 0x15
			i++
			i = encodeFixed32Mapsproto2(data, i, uint32(v))
		}
	}
	if len(m.Fixed64Map) > 0 {
		keysForFixed64Map := make([]uint64, 0, len(m.Fixed64Map))
		for k := range m.Fixed64Map {
			keysForFixed64Map = append(keysForFixed64Map, uint64(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
		for _, k := range keysForFixed64Map {
			data[i] = 0x5a
			i++
			v := m.Fixed64Map[uint64(k)]
			mapSize := 1 + 8 + 1 + 8
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x9
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(k))
			data[i] = 0x11
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(v))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		keysForSfixed64Map := make([]int64, 0, len(m.Sfixed64Map))
		for k := range m.Sfixed64Map {
			keysForSfixed64Map = append(keysForSfixed64Map, int64(k))
		}
		github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
		for _, k := range keysForSfixed64Map {
			data[i] = 0x62
			i++
			v := m.Sfixed64Map[int64(k)]
			mapSize := 1 + 8 + 1 + 8
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x9
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(k))
			data[i] = 0x11
			i++
			i = encodeFixed64Mapsproto2(data, i, uint64(v))
		}
	}
	if len(m.BoolMap) > 0 {
		keysForBoolMap := make([]bool, 0, len(m.BoolMap))
		for k := range m.BoolMap {
			keysForBoolMap = append(keysForBoolMap, bool(k))
		}
		github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
		for _, k := range keysForBoolMap {
			data[i] = 0x6a
			i++
			v := m.BoolMap[bool(k)]
			mapSize := 1 + 1 + 1 + 1
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			if k {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
			data[i] = 0x10
			i++
			if v {
				data[i] = 1
			} else {
				data[i] = 0
			}
			i++
		}
	}
	if len(m.StringMap) > 0 {
		keysForStringMap := make([]string, 0, len(m.StringMap))
		for k := range m.StringMap {
			keysForStringMap = append(keysForStringMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
		for _, k := range keysForStringMap {
			data[i] = 0x72
			i++
			v := m.StringMap[string(k)]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.StringToBytesMap) > 0 {
		keysForStringToBytesMap := make([]string, 0, len(m.StringToBytesMap))
		for k := range m.StringToBytesMap {
			keysForStringToBytesMap = append(keysForStringToBytesMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
		for _, k := range keysForStringToBytesMap {
			data[i] = 0x7a
			i++
			v := m.StringToBytesMap[string(k)]
			byteSize := 0
			if v != nil {
				byteSize = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + byteSize
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintMapsproto2(data, i, uint64(len(v)))
				i += copy(data[i:], v)
			}
		}
	}
	if len(m.StringToEnumMap) > 0 {
		keysForStringToEnumMap := make([]string, 0, len(m.StringToEnumMap))
		for k := range m.StringToEnumMap {
			keysForStringToEnumMap = append(keysForStringToEnumMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
		for _, k := range keysForStringToEnumMap {
			data[i] = 0x82
			i++
			data[i] = 0x1
			i++
			v := m.StringToEnumMap[string(k)]
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x10
			i++
			i = encodeVarintMapsproto2(data, i, uint64(v))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		keysForStringToMsgMap := make([]string, 0, len(m.StringToMsgMap))
		for k := range m.StringToMsgMap {
			keysForStringToMsgMap = append(keysForStringToMsgMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
		for _, k := range keysForStringToMsgMap {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			v := m.StringToMsgMap[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMapsproto2(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + msgSize
			i = encodeVarintMapsproto2(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMapsproto2(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintMapsproto2(data, i, uint64(v.Size()))
				n2, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Mapsproto2(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mapsproto2(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMapsproto2(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFloatingPoint(r randyMapsproto2, easy bool) *FloatingPoint {
	this := &FloatingPoint{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.F = &v1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 2)
	}
	return this
}

func NewPopulatedAllMaps(r randyMapsproto2, easy bool) *AllMaps {
	this := &AllMaps{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.StringToDoubleMap = make(map[string]float64)
		for i := 0; i < v2; i++ {
			v3 := randStringMapsproto2(r)
			this.StringToDoubleMap[v3] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.StringToDoubleMap[v3] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.StringToFloatMap = make(map[string]float32)
		for i := 0; i < v4; i++ {
			v5 := randStringMapsproto2(r)
			this.StringToFloatMap[v5] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.StringToFloatMap[v5] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Int32Map = make(map[int32]int32)
		for i := 0; i < v6; i++ {
			v7 := int32(r.Int31())
			this.Int32Map[v7] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Int32Map[v7] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Int64Map = make(map[int64]int64)
		for i := 0; i < v8; i++ {
			v9 := int64(r.Int63())
			this.Int64Map[v9] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Int64Map[v9] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.Uint32Map = make(map[uint32]uint32)
		for i := 0; i < v10; i++ {
			v11 := uint32(r.Uint32())
			this.Uint32Map[v11] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.Uint64Map = make(map[uint64]uint64)
		for i := 0; i < v12; i++ {
			v13 := uint64(uint64(r.Uint32()))
			this.Uint64Map[v13] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.Sint32Map = make(map[int32]int32)
		for i := 0; i < v14; i++ {
			v15 := int32(r.Int31())
			this.Sint32Map[v15] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sint32Map[v15] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.Sint64Map = make(map[int64]int64)
		for i := 0; i < v16; i++ {
			v17 := int64(r.Int63())
			this.Sint64Map[v17] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sint64Map[v17] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.Fixed32Map = make(map[uint32]uint32)
		for i := 0; i < v18; i++ {
			v19 := uint32(r.Uint32())
			this.Fixed32Map[v19] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Sfixed32Map = make(map[int32]int32)
		for i := 0; i < v20; i++ {
			v21 := int32(r.Int31())
			this.Sfixed32Map[v21] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sfixed32Map[v21] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(10)
		this.Fixed64Map = make(map[uint64]uint64)
		for i := 0; i < v22; i++ {
			v23 := uint64(uint64(r.Uint32()))
			this.Fixed64Map[v23] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.Sfixed64Map = make(map[int64]int64)
		for i := 0; i < v24; i++ {
			v25 := int64(r.Int63())
			this.Sfixed64Map[v25] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sfixed64Map[v25] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.BoolMap = make(map[bool]bool)
		for i := 0; i < v26; i++ {
			v27 := bool(bool(r.Intn(2) == 0))
			this.BoolMap[v27] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.StringMap = make(map[string]string)
		for i := 0; i < v28; i++ {
			this.StringMap[randStringMapsproto2(r)] = randStringMapsproto2(r)
		}
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.StringToBytesMap = make(map[string][]byte)
		for i := 0; i < v29; i++ {
			v30 := r.Intn(100)
			v31 := randStringMapsproto2(r)
			this.StringToBytesMap[v31] = make([]byte, v30)
			for i := 0; i < v30; i++ {
				this.StringToBytesMap[v31][i] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(10)
		this.StringToEnumMap = make(map[string]MapEnum)
		for i := 0; i < v32; i++ {
			this.StringToEnumMap[randStringMapsproto2(r)] = MapEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(10)
		this.StringToMsgMap = make(map[string]*FloatingPoint)
		for i := 0; i < v33; i++ {
			this.StringToMsgMap[randStringMapsproto2(r)] = NewPopulatedFloatingPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 18)
	}
	return this
}

func NewPopulatedAllMapsOrdered(r randyMapsproto2, easy bool) *AllMapsOrdered {
	this := &AllMapsOrdered{}
	if r.Intn(10) != 0 {
		v34 := r.Intn(10)
		this.StringToDoubleMap = make(map[string]float64)
		for i := 0; i < v34; i++ {
			v35 := randStringMapsproto2(r)
			this.StringToDoubleMap[v35] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.StringToDoubleMap[v35] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(10)
		this.StringToFloatMap = make(map[string]float32)
		for i := 0; i < v36; i++ {
			v37 := randStringMapsproto2(r)
			this.StringToFloatMap[v37] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.StringToFloatMap[v37] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v38 := r.Intn(10)
		this.Int32Map = make(map[int32]int32)
		for i := 0; i < v38; i++ {
			v39 := int32(r.Int31())
			this.Int32Map[v39] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Int32Map[v39] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v40 := r.Intn(10)
		this.Int64Map = make(map[int64]int64)
		for i := 0; i < v40; i++ {
			v41 := int64(r.Int63())
			this.Int64Map[v41] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Int64Map[v41] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v42 := r.Intn(10)
		this.Uint32Map = make(map[uint32]uint32)
		for i := 0; i < v42; i++ {
			v43 := uint32(r.Uint32())
			this.Uint32Map[v43] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v44 := r.Intn(10)
		this.Uint64Map = make(map[uint64]uint64)
		for i := 0; i < v44; i++ {
			v45 := uint64(uint64(r.Uint32()))
			this.Uint64Map[v45] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v46 := r.Intn(10)
		this.Sint32Map = make(map[int32]int32)
		for i := 0; i < v46; i++ {
			v47 := int32(r.Int31())
			this.Sint32Map[v47] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sint32Map[v47] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v48 := r.Intn(10)
		this.Sint64Map = make(map[int64]int64)
		for i := 0; i < v48; i++ {
			v49 := int64(r.Int63())
			this.Sint64Map[v49] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sint64Map[v49] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v50 := r.Intn(10)
		this.Fixed32Map = make(map[uint32]uint32)
		for i := 0; i < v50; i++ {
			v51 := uint32(r.Uint32())
			this.Fixed32Map[v51] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v52 := r.Intn(10)
		this.Sfixed32Map = make(map[int32]int32)
		for i := 0; i < v52; i++ {
			v53 := int32(r.Int31())
			this.Sfixed32Map[v53] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sfixed32Map[v53] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v54 := r.Intn(10)
		this.Fixed64Map = make(map[uint64]uint64)
		for i := 0; i < v54; i++ {
			v55 := uint64(uint64(r.Uint32()))
			this.Fixed64Map[v55] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v56 := r.Intn(10)
		this.Sfixed64Map = make(map[int64]int64)
		for i := 0; i < v56; i++ {
			v57 := int64(r.Int63())
			this.Sfixed64Map[v57] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sfixed64Map[v57] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v58 := r.Intn(10)
		this.BoolMap = make(map[bool]bool)
		for i := 0; i < v58; i++ {
			v59 := bool(bool(r.Intn(2) == 0))
			this.BoolMap[v59] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v60 := r.Intn(10)
		this.StringMap = make(map[string]string)
		for i := 0; i < v60; i++ {
			this.StringMap[randStringMapsproto2(r)] = randStringMapsproto2(r)
		}
	}
	if r.Intn(10) != 0 {
		v61 := r.Intn(10)
		this.StringToBytesMap = make(map[string][]byte)
		for i := 0; i < v61; i++ {
			v62 := r.Intn(100)
			v63 := randStringMapsproto2(r)
			this.StringToBytesMap[v63] = make([]byte, v62)
			for i := 0; i < v62; i++ {
				this.StringToBytesMap[v63][i] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v64 := r.Intn(10)
		this.StringToEnumMap = make(map[string]MapEnum)
		for i := 0; i < v64; i++ {
			this.StringToEnumMap[randStringMapsproto2(r)] = MapEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if r.Intn(10) != 0 {
		v65 := r.Intn(10)
		this.StringToMsgMap = make(map[string]*FloatingPoint)
		for i := 0; i < v65; i++ {
			this.StringToMsgMap[randStringMapsproto2(r)] = NewPopulatedFloatingPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 18)
	}
	return this
}

type randyMapsproto2 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMapsproto2(r randyMapsproto2) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMapsproto2(r randyMapsproto2) string {
	v66 := r.Intn(100)
	tmps := make([]rune, v66)
	for i := 0; i < v66; i++ {
		tmps[i] = randUTF8RuneMapsproto2(r)
	}
	return string(tmps)
}
func randUnrecognizedMapsproto2(r randyMapsproto2, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMapsproto2(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMapsproto2(data []byte, r randyMapsproto2, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		v67 := r.Int63()
		if r.Intn(2) == 0 {
			v67 *= -1
		}
		data = encodeVarintPopulateMapsproto2(data, uint64(v67))
	case 1:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMapsproto2(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMapsproto2(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMapsproto2(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *FloatingPoint) Size() (n int) {
	var l int
	_ = l
	if m.F != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMaps) Size() (n int) {
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k, v := range m.StringToDoubleMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k, v := range m.StringToFloatMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k, v := range m.Uint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k, v := range m.Uint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k, v := range m.Sint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k, v := range m.Sint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k, v := range m.Fixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k, v := range m.Sfixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k, v := range m.Fixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k, v := range m.Sfixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.BoolMap) > 0 {
		for k, v := range m.BoolMap {
			_ = k
			_ = v
			mapEntrySize := 1 + 1 + 1 + 1
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k, v := range m.StringToBytesMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k, v := range m.StringToEnumMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k, v := range m.StringToMsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMapsOrdered) Size() (n int) {
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k, v := range m.StringToDoubleMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k, v := range m.StringToFloatMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k, v := range m.Uint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k, v := range m.Uint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k, v := range m.Sint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k, v := range m.Sint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k, v := range m.Fixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k, v := range m.Sfixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k, v := range m.Fixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k, v := range m.Sfixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.BoolMap) > 0 {
		for k, v := range m.BoolMap {
			_ = k
			_ = v
			mapEntrySize := 1 + 1 + 1 + 1
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k, v := range m.StringToBytesMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k, v := range m.StringToEnumMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k, v := range m.StringToMsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapsproto2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMapsproto2(x uint64) (n int) {
	return sovMapsproto2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FloatingPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingPoint{`,
		`F:` + valueToStringMapsproto2(this.F) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllMaps) String() string {
	if this == nil {
		return "nil"
	}
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%v: %v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%v: %v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%v: %v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%v: %v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%v: %v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%v: %v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%v: %v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%v: %v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%v: %v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%v: %v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%v: %v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%v: %v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%v: %v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%v: %v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%v: %v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%v: %v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	s := strings.Join([]string{`&AllMaps{`,
		`StringToDoubleMap:` + mapStringForStringToDoubleMap + `,`,
		`StringToFloatMap:` + mapStringForStringToFloatMap + `,`,
		`Int32Map:` + mapStringForInt32Map + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`Uint32Map:` + mapStringForUint32Map + `,`,
		`Uint64Map:` + mapStringForUint64Map + `,`,
		`Sint32Map:` + mapStringForSint32Map + `,`,
		`Sint64Map:` + mapStringForSint64Map + `,`,
		`Fixed32Map:` + mapStringForFixed32Map + `,`,
		`Sfixed32Map:` + mapStringForSfixed32Map + `,`,
		`Fixed64Map:` + mapStringForFixed64Map + `,`,
		`Sfixed64Map:` + mapStringForSfixed64Map + `,`,
		`BoolMap:` + mapStringForBoolMap + `,`,
		`StringMap:` + mapStringForStringMap + `,`,
		`StringToBytesMap:` + mapStringForStringToBytesMap + `,`,
		`StringToEnumMap:` + mapStringForStringToEnumMap + `,`,
		`StringToMsgMap:` + mapStringForStringToMsgMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllMapsOrdered) String() string {
	if this == nil {
		return "nil"
	}
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%v: %v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%v: %v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%v: %v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%v: %v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%v: %v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%v: %v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%v: %v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%v: %v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%v: %v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%v: %v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%v: %v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%v: %v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%v: %v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%v: %v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%v: %v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%v: %v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	s := strings.Join([]string{`&AllMapsOrdered{`,
		`StringToDoubleMap:` + mapStringForStringToDoubleMap + `,`,
		`StringToFloatMap:` + mapStringForStringToFloatMap + `,`,
		`Int32Map:` + mapStringForInt32Map + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`Uint32Map:` + mapStringForUint32Map + `,`,
		`Uint64Map:` + mapStringForUint64Map + `,`,
		`Sint32Map:` + mapStringForSint32Map + `,`,
		`Sint64Map:` + mapStringForSint64Map + `,`,
		`Fixed32Map:` + mapStringForFixed32Map + `,`,
		`Sfixed32Map:` + mapStringForSfixed32Map + `,`,
		`Fixed64Map:` + mapStringForFixed64Map + `,`,
		`Sfixed64Map:` + mapStringForSfixed64Map + `,`,
		`BoolMap:` + mapStringForBoolMap + `,`,
		`StringMap:` + mapStringForStringMap + `,`,
		`StringToBytesMap:` + mapStringForStringToBytesMap + `,`,
		`StringToEnumMap:` + mapStringForStringToEnumMap + `,`,
		`StringToMsgMap:` + mapStringForStringToMsgMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMapsproto2(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("combos/marshaler/mapsproto2.proto", fileDescriptorMapsproto2) }

var fileDescriptorMapsproto2 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x96, 0xcd, 0x4f, 0xe3, 0x46,
	0x18, 0xc6, 0x71, 0xbe, 0x33, 0xf9, 0x72, 0x06, 0x5a, 0x45, 0x91, 0x9a, 0x96, 0xb4, 0x95, 0x42,
	0x68, 0x13, 0x9a, 0x56, 0x55, 0x05, 0x2d, 0x12, 0x81, 0xd0, 0x54, 0x14, 0x8a, 0x48, 0xbf, 0x25,
	0xa4, 0x26, 0xc5, 0x09, 0xd1, 0x26, 0x31, 0x8a, 0x9d, 0xd5, 0x72, 0xe3, 0xcf, 0xd8, 0xeb, 0xde,
	0xf6, 0xb8, 0xc7, 0x3d, 0xee, 0x91, 0x23, 0x47, 0x0e, 0x7b, 0x58, 0xd8, 0x0b, 0x47, 0x8e, 0x1c,
	0x77, 0x3c, 0x63, 0x3b, 0x63, 0xfb, 0xb5, 0x9d, 0xbd, 0xed, 0x21, 0x87, 0xd1, 0x64, 0x86, 0xf7,
	0xf9, 0xcd, 0x63, 0xec, 0x79, 0xf5, 0xa0, 0xe5, 0xff, 0xe5, 0x61, 0x47, 0x56, 0xaa, 0xc3, 0xf6,
	0x58, 0x39, 0x6d, 0x0f, 0xa4, 0x31, 0xf9, 0x75, 0xa6, 0x9c, 0x8d, 0x65, 0x55, 0xae, 0x55, 0xe8,
	0x84, 0x13, 0xfa, 0x4a, 0xfb, 0x43, 0xfe, 0xeb, 0x5e, 0x5f, 0x3d, 0x9d, 0x74, 0x2a, 0x44, 0x56,
	0xed, 0xc9, 0x3d, 0xb9, 0x4a, 0xff, 0xd8, 0x99, 0x74, 0xe9, 0x8a, 0x2e, 0xe8, 0x2f, 0xa6, 0x2d,
	0x7e, 0x82, 0x52, 0xbb, 0x03, 0xb9, 0xad, 0xf6, 0x47, 0xbd, 0x43, 0xb9, 0x3f, 0x52, 0x71, 0x12,
	0x09, 0xdd, 0x9c, 0xf0, 0x99, 0x50, 0x12, 0x8e, 0x84, 0x6e, 0xf1, 0x1a, 0xa3, 0xe8, 0xd6, 0x60,
	0xb0, 0x4f, 0xc8, 0xf8, 0x1f, 0x94, 0x6d, 0xa9, 0x63, 0x52, 0xf8, 0xbb, 0xbc, 0x23, 0x4f, 0x3a,
	0x03, 0x89, 0xec, 0x92, 0xca, 0x60, 0x29, 0x51, 0x5b, 0xad, 0x70, 0x16, 0x2a, 0xba, 0xa0, 0xe2,
	0xa8, 0x6e, 0x8c, 0xd4, 0xf1, 0xf9, 0x51, 0x56, 0xb1, 0xef, 0xe3, 0x3f, 0x91, 0x68, 0x14, 0x53,
	0x37, 0x1a, 0x39, 0x40, 0xc9, 0x65, 0x4f, 0xb2, 0x51, 0xcc, 0xc0, 0xa2, 0x62, 0xdb, 0xc6, 0x9b,
	0x28, 0xf6, 0xcb, 0x48, 0xfd, 0xb6, 0xa6, 0xf1, 0x82, 0x94, 0x57, 0x04, 0x79, 0x46, 0x11, 0xe3,
	0xc4, 0xfa, 0xfa, 0x52, 0xd7, 0x7f, 0xff, 0x9d, 0xa6, 0x0f, 0x79, 0xeb, 0x69, 0xd1, 0x54, 0x4f,
	0x97, 0x78, 0x0b, 0xc5, 0xff, 0x30, 0x60, 0xb9, 0x30, 0x05, 0x7c, 0x0e, 0x02, 0xcc, 0x2a, 0x46,
	0x88, 0x4f, 0x4c, 0x0b, 0x3a, 0x82, 0x79, 0x88, 0xf8, 0x20, 0x38, 0x13, 0x14, 0x61, 0xba, 0x68,
	0x99, 0x2e, 0xa2, 0x1e, 0x88, 0x96, 0xcd, 0x85, 0xc2, 0xbb, 0x68, 0x99, 0x2e, 0x62, 0x3e, 0x08,
	0xde, 0x85, 0x62, 0xba, 0xd8, 0x41, 0x68, 0xb7, 0xff, 0x44, 0x3a, 0x61, 0x36, 0xe2, 0x94, 0xf1,
	0x05, 0xc8, 0x98, 0x96, 0x31, 0x08, 0xea, 0x9a, 0x1b, 0xf8, 0x67, 0x94, 0x68, 0x4d, 0x97, 0x39,
	0x44, 0x31, 0x5f, 0xc2, 0x56, 0xba, 0x36, 0x4e, 0x42, 0xe1, 0x40, 0x86, 0x1d, 0xf6, 0x48, 0x09,
	0x3f, 0x3b, 0xdc, 0x33, 0x31, 0x3b, 0xec, 0xa1, 0x4c, 0x3b, 0x0c, 0x93, 0xf4, 0xb5, 0xc3, 0x71,
	0x74, 0x3b, 0x0c, 0xb4, 0x81, 0xa2, 0x75, 0x59, 0xd6, 0x2a, 0x73, 0x29, 0x0a, 0x59, 0x06, 0x21,
	0x7a, 0x0d, 0x03, 0x44, 0x3b, 0x6c, 0x45, 0xdf, 0x0e, 0xfd, 0xf4, 0x35, 0x79, 0xda, 0xeb, 0xed,
	0x18, 0x55, 0xc6, 0xdb, 0x31, 0xd6, 0xfc, 0x0d, 0xac, 0x9f, 0xab, 0x92, 0xa2, 0x91, 0x32, 0x33,
	0xdc, 0x40, 0xa3, 0xd8, 0x76, 0x03, 0x8d, 0x6d, 0xdc, 0x42, 0x19, 0xa3, 0xb4, 0x31, 0x9a, 0x0c,
	0x35, 0xac, 0x48, 0xb1, 0x2b, 0x9e, 0x58, 0xbd, 0x96, 0x51, 0x33, 0x8a, 0x75, 0x17, 0x1f, 0xa2,
	0xb4, 0x51, 0xb8, 0xaf, 0xd0, 0x87, 0xce, 0x52, 0x66, 0xc9, 0x93, 0xc9, 0x4a, 0x19, 0x32, 0xad,
	0x58, 0x36, 0xf3, 0x3b, 0xe8, 0x63, 0xb8, 0x5b, 0x61, 0x11, 0x05, 0x1f, 0x49, 0xe7, 0xb4, 0x23,
	0xc6, 0x8f, 0xb4, 0x9f, 0x78, 0x09, 0x85, 0x1f, 0xb7, 0x07, 0x13, 0x89, 0x74, 0x28, 0xad, 0x4b,
	0xb2, 0xc5, 0x7a, 0xe0, 0x07, 0x21, 0xbf, 0x8d, 0x3e, 0x02, 0x3b, 0x93, 0x1f, 0x24, 0xc0, 0x43,
	0x36, 0x50, 0xca, 0xd2, 0x8e, 0x78, 0x71, 0x18, 0x10, 0x87, 0x9d, 0xe2, 0xe9, 0x47, 0xc6, 0x8b,
	0x83, 0x80, 0x38, 0xc8, 0x8b, 0x7f, 0x44, 0x69, 0x6b, 0x1f, 0xe2, 0xd5, 0x29, 0x40, 0x9d, 0x02,
	0xd4, 0xf0, 0xd9, 0x21, 0x40, 0x1d, 0xb2, 0xa9, 0x5b, 0xae, 0x67, 0x67, 0x01, 0x75, 0x16, 0x50,
	0xc3, 0x67, 0x63, 0x40, 0x8d, 0x79, 0xf5, 0x4f, 0x28, 0x63, 0x6b, 0x39, 0xbc, 0x3c, 0x0a, 0xc8,
	0xa3, 0xbc, 0x7c, 0x93, 0x5c, 0x9d, 0xae, 0xbb, 0x3e, 0x03, 0xe8, 0x33, 0xd0, 0xf1, 0xb0, 0xfb,
	0x08, 0x20, 0x8f, 0x80, 0xc7, 0xc3, 0x7a, 0x11, 0xd0, 0x8b, 0xbc, 0x7e, 0x1d, 0x25, 0xf9, 0xae,
	0xc2, 0x6b, 0x63, 0x80, 0x36, 0x66, 0xff, 0xbf, 0x5b, 0x5a, 0x8a, 0xdf, 0x97, 0x1e, 0x77, 0xb9,
	0x2e, 0x96, 0x36, 0xe2, 0x07, 0x49, 0xf2, 0x90, 0xbf, 0xd1, 0x12, 0xd4, 0x34, 0x00, 0x46, 0x99,
	0x67, 0xa4, 0x6b, 0x4b, 0x96, 0x66, 0x41, 0x75, 0x93, 0x21, 0x4f, 0x3e, 0x46, 0x8b, 0x40, 0xeb,
	0x00, 0xc0, 0x6b, 0x3c, 0x38, 0x51, 0xcb, 0x5b, 0xc0, 0x96, 0x74, 0xc5, 0xe1, 0x8b, 0xaf, 0x17,
	0x51, 0x5a, 0x6f, 0x51, 0xbf, 0x8d, 0x4f, 0xa4, 0xb1, 0x74, 0x82, 0xff, 0x73, 0x4f, 0x58, 0x35,
	0xa8, 0xb5, 0xe9, 0xba, 0xf7, 0x08, 0x5a, 0xc7, 0xae, 0x41, 0xeb, 0x9b, 0x59, 0x0e, 0xf0, 0xcb,
	0x5b, 0x0d, 0x47, 0xde, 0x5a, 0xf1, 0xc2, 0xba, 0xc5, 0xae, 0x86, 0x23, 0x76, 0xf9, 0x61, 0xc0,
	0xf4, 0xd5, 0x74, 0xa6, 0xaf, 0xb2, 0x17, 0xc7, 0x3d, 0x84, 0x35, 0x9d, 0x21, 0xcc, 0x97, 0x04,
	0x67, 0xb1, 0xa6, 0x33, 0x8b, 0x79, 0x92, 0xdc, 0x23, 0x59, 0xd3, 0x19, 0xc9, 0x7c, 0x49, 0x70,
	0x32, 0xdb, 0x03, 0x92, 0xd9, 0xaa, 0x17, 0xca, 0x2b, 0xa0, 0x1d, 0x40, 0x01, 0xed, 0x2b, 0x4f,
	0x63, 0x9e, 0x39, 0x6d, 0x0f, 0xc8, 0x69, 0xfe, 0xe6, 0x5c, 0xe2, 0xda, 0x01, 0x14, 0xd7, 0x66,
	0x30, 0xe7, 0x96, 0xda, 0xea, 0xf6, 0xd4, 0x56, 0xf2, 0x62, 0xc1, 0xe1, 0xad, 0xe9, 0x0c, 0x6f,
	0x65, 0xff, 0xbb, 0x08, 0x65, 0xb8, 0x63, 0xd7, 0x0c, 0x37, 0xd3, 0xe5, 0xf6, 0x8b, 0x72, 0xff,
	0xba, 0x45, 0xb9, 0xb5, 0x59, 0xe8, 0xde, 0x89, 0xee, 0x2f, 0x97, 0x44, 0x57, 0x9d, 0x05, 0x3d,
	0x0f, 0x76, 0xf3, 0x60, 0x37, 0x0f, 0x76, 0xf3, 0x60, 0xf7, 0x61, 0x04, 0xbb, 0xf5, 0xd0, 0xd3,
	0x67, 0x9f, 0x0a, 0xe5, 0x65, 0x14, 0xd5, 0x8f, 0xc6, 0x11, 0x14, 0xd8, 0xdf, 0x12, 0x17, 0xe8,
	0x5c, 0x17, 0x05, 0x3a, 0x6f, 0x8b, 0x81, 0xfa, 0xaf, 0x97, 0x37, 0x85, 0x85, 0x2b, 0x32, 0xae,
	0xc9, 0x78, 0x73, 0x53, 0x10, 0xee, 0xc8, 0xb8, 0x27, 0xe3, 0x81, 0x8c, 0x8b, 0xdb, 0x82, 0xf0,
	0x9c, 0x8c, 0x17, 0x64, 0xbc, 0x24, 0xe3, 0x15, 0x19, 0x97, 0x64, 0x5c, 0xdd, 0x92, 0x5a, 0x32,
	0xdf, 0x91, 0xf9, 0x9e, 0xcc, 0x0f, 0x64, 0xbe, 0x78, 0x5b, 0x58, 0x78, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x0d, 0x6b, 0x00, 0x44, 0x29, 0x14, 0x00, 0x00,
}
